#!/bin/sh

if test -f /proc/vmcore; then
    # NOOP if dump-capture kernel
    exit 0;
fi

hv=$(cat /run/eve-hv-type)
default_cgroup_cpus_limit=1

default_cgroup_memory_limit=838860800 #800M
EVESERVICES="sshd eve-edgeview wwan wlan lisp guacd pillar vtpm watchdog xen-tools newlogd memlogd memory-monitor debug monitor node-exporter vector"

#Increase memory limits temporarily for 'k' type only.
case $hv in
   k)
       default_cgroup_memory_limit=8388608000 #8G
       EVESERVICES="${EVESERVICES} kube"
       ;;
esac

# Parse kernel command line parameters for cgroup limits
dom0_cgroup_memory_soft_limit=$(</proc/cmdline grep -o '\bdom0_mem=[^, ]*' | cut -d = -f 2)
dom0_cgroup_memory_limit=$(</proc/cmdline grep -o "\bdom0_mem=[^,]*,max:[^ ]*" | cut -d : -f 2)
dom0_cgroup_cpus_limit=$(</proc/cmdline grep -o '\bdom0_max_vcpus=[^ ]*' | cut -d = -f 2)

eve_cgroup_memory_soft_limit=$(</proc/cmdline grep -o '\beve_mem=[^, ]*' | cut -d = -f 2)
eve_cgroup_memory_limit=$(</proc/cmdline grep -o "\beve_mem=[^,]*,max:[^ ]*" | cut -d : -f 2)
eve_cgroup_cpus_limit=$(</proc/cmdline grep -o '\beve_max_vcpus=[^ ]*' | cut -d = -f 2)

ctrd_cgroup_memory_soft_limit=$(</proc/cmdline grep -o '\bctrd_mem=[^, ]*' | cut -d = -f 2)
ctrd_cgroup_memory_limit=$(</proc/cmdline grep -o "\bctrd_mem=[^,]*,max:[^ ]*" | cut -d : -f 2)
ctrd_cgroup_cpus_limit=$(</proc/cmdline grep -o '\bctrd_max_vcpus=[^ ]*' | cut -d = -f 2)

# Set defaults if not specified in kernel command line
if [ -z "${dom0_cgroup_memory_soft_limit}" ]; then
    echo "Setting default value of $default_cgroup_memory_limit for dom0_cgroup_memory_soft_limit"
    dom0_cgroup_memory_soft_limit=$default_cgroup_memory_limit
fi

if [ -z "${dom0_cgroup_memory_limit}" ]; then
    echo "Setting value of $dom0_cgroup_memory_soft_limit for dom0_cgroup_memory_limit"
    dom0_cgroup_memory_limit=$dom0_cgroup_memory_soft_limit
fi

if [ -z "${dom0_cgroup_cpus_limit}" ] || [ "${dom0_cgroup_cpus_limit}" = "0" ]; then
    echo "Setting default value of $default_cgroup_cpus_limit for dom0_cgroup_cpus_limit"
    dom0_cgroup_cpus_limit=$default_cgroup_cpus_limit
fi

if [ -z "${eve_cgroup_memory_soft_limit}" ]; then
    echo "Setting default value of $default_cgroup_memory_limit for eve_cgroup_memory_soft_limit"
    eve_cgroup_memory_soft_limit=$default_cgroup_memory_limit
fi

if [ -z "${eve_cgroup_memory_limit}" ]; then
    echo "Setting value of $eve_cgroup_memory_soft_limit for eve_cgroup_memory_limit"
    eve_cgroup_memory_limit=$eve_cgroup_memory_soft_limit
fi

if [ -z "${eve_cgroup_cpus_limit}" ] || [ "${eve_cgroup_cpus_limit}" = "0" ]; then
    echo "Setting default value of $default_cgroup_cpus_limit for eve_cgroup_cpus_limit"
    eve_cgroup_cpus_limit=$default_cgroup_cpus_limit
fi

if [ -z "${ctrd_cgroup_memory_soft_limit}" ]; then
    echo "Setting default value of $default_cgroup_memory_limit for ctrd_cgroup_memory_soft_limit"
    ctrd_cgroup_memory_soft_limit=$default_cgroup_memory_limit
fi

if [ -z "${ctrd_cgroup_memory_limit}" ]; then
    echo "Setting value of $ctrd_cgroup_memory_soft_limit for ctrd_cgroup_memory_limit"
    ctrd_cgroup_memory_limit=$ctrd_cgroup_memory_soft_limit
fi

if [ -z "${ctrd_cgroup_cpus_limit}" ] || [ "${ctrd_cgroup_cpus_limit}" = "0" ]; then
    echo "Setting default value of $default_cgroup_cpus_limit for ctrd_cgroup_cpus_limit"
    ctrd_cgroup_cpus_limit=$default_cgroup_cpus_limit
fi

# Check if cgroup v2 is available
if [ ! -f /sys/fs/cgroup/cgroup.controllers ]; then
  echo "ERROR: cgroup v2 not available - cgroup v1 is no longer supported"
  exit 1
fi
echo "Using cgroup v2 unified hierarchy"
CGROOT="/sys/fs/cgroup"

# Enable controllers at root level for children to inherit
echo "+cpu +cpuset +memory +io +pids" > "$CGROOT/cgroup.subtree_control" 2>/dev/null || true

# Create EVE cgroup hierarchy for v2
mkdir -p "$CGROOT/eve"
mkdir -p "$CGROOT/eve/containerd"
mkdir -p "$CGROOT/eve/services"

# Enable controllers for eve cgroup
echo "+cpu +cpuset +memory +io +pids" > "$CGROOT/eve/cgroup.subtree_control" 2>/dev/null || true
echo "+cpu +cpuset +memory +io +pids" > "$CGROOT/eve/services/cgroup.subtree_control" 2>/dev/null || true

# Create individual service cgroups
for srv in $EVESERVICES; do
    mkdir -p "$CGROOT/eve/services/${srv}"
done

# Get effective CPU range from parent
parent_cpus=$(cat "$CGROOT/cpuset.cpus.effective" 2>/dev/null || echo "0")
parent_mems=$(cat "$CGROOT/cpuset.mems.effective" 2>/dev/null || echo "0")

# Set eve cgroup limits (cgroup v2 uses different file names)
echo "$dom0_cgroup_memory_limit" > "$CGROOT/eve/memory.max" 2>/dev/null || true
echo "$dom0_cgroup_memory_soft_limit" > "$CGROOT/eve/memory.high" 2>/dev/null || true
echo "$parent_cpus" > "$CGROOT/eve/cpuset.cpus" 2>/dev/null || true
echo "$parent_mems" > "$CGROOT/eve/cpuset.mems" 2>/dev/null || true

# Calculate CPU range for dom0 and eve services
if [ -n "$parent_cpus" ] && [ "$dom0_cgroup_cpus_limit" -gt 0 ]; then
    # Extract max CPU from parent range (e.g., "0-3" -> 3)
    max_cpu=$(echo "$parent_cpus" | grep -o '[0-9]*$' | head -1)
    if [ -n "$max_cpu" ] && [ "$max_cpu" -ge "$((dom0_cgroup_cpus_limit-1))" ]; then
        cpu_range="0-$((dom0_cgroup_cpus_limit-1))"
    else
        cpu_range="$parent_cpus"
    fi
else
    cpu_range="$parent_cpus"
fi

# Set containerd limits
echo "$ctrd_cgroup_memory_limit" > "$CGROOT/eve/containerd/memory.max" 2>/dev/null || true
echo "$ctrd_cgroup_memory_soft_limit" > "$CGROOT/eve/containerd/memory.high" 2>/dev/null || true
echo "$cpu_range" > "$CGROOT/eve/containerd/cpuset.cpus" 2>/dev/null || true
echo "$parent_mems" > "$CGROOT/eve/containerd/cpuset.mems" 2>/dev/null || true

# Set services aggregate limits
echo "$eve_cgroup_memory_limit" > "$CGROOT/eve/services/memory.max" 2>/dev/null || true
echo "$eve_cgroup_memory_soft_limit" > "$CGROOT/eve/services/memory.high" 2>/dev/null || true

# Calculate CPU range for eve services
if [ -n "$parent_cpus" ] && [ "$eve_cgroup_cpus_limit" -gt 0 ]; then
    max_cpu=$(echo "$parent_cpus" | grep -o '[0-9]*$' | head -1)
    if [ -n "$max_cpu" ] && [ "$max_cpu" -ge "$((eve_cgroup_cpus_limit-1))" ]; then
        eve_cpu_range="0-$((eve_cgroup_cpus_limit-1))"
    else
        eve_cpu_range="$parent_cpus"
    fi
else
    eve_cpu_range="$parent_cpus"
fi

echo "$eve_cpu_range" > "$CGROOT/eve/services/cpuset.cpus" 2>/dev/null || true
echo "$parent_mems" > "$CGROOT/eve/services/cpuset.mems" 2>/dev/null || true

# Set individual service limits
for srv in $EVESERVICES; do
    echo "$eve_cgroup_memory_limit" > "$CGROOT/eve/services/${srv}/memory.max" 2>/dev/null || true
    echo "$eve_cgroup_memory_soft_limit" > "$CGROOT/eve/services/${srv}/memory.high" 2>/dev/null || true
    echo "$eve_cpu_range" > "$CGROOT/eve/services/${srv}/cpuset.cpus" 2>/dev/null || true
    echo "$parent_mems" > "$CGROOT/eve/services/${srv}/cpuset.mems" 2>/dev/null || true
done

echo "cgroup v2 setup completed successfully"
