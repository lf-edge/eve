#!/bin/sh

CTR_CMD="ctr --namespace services.linuxkit"
CTR_UA_CMD="ctr --namespace eve-user-apps"
KVM_RUN_DIR="/run/hypervisor/kvm"

help() {
  cat <<__EOT__
Welcome to EVE!
  commands: enter [service] [command (assumed sh)]
            enter-user-app <service>
            exec [--fork] [service] command
            list
            status
            start <service>
            pause <service>
            resume <service>
            destroy <service>
            list-app-consoles   Outputs list of available consoles for attach
            attach-app-console <console id>   Attach to the application console, see 'eve list-app-consoles' for details
            persist list
            persist attach <disk>
            config mount <mountpoint>
            config unmount
            remote-access on|off
            http-debug
            dump-stacks
            dump-memory
            memory-monitor-update-config
            psi-collector start|stop
            firewall drop
            verbose on|off
            version
            uuid
            hv
__EOT__
  exit 1
}

sec_start=2048
sec_end=0
num_p3_part=9
p3_old_tag=P3_OLD

list_partitions() {
  p3_dev=$(/sbin/findfs PARTLABEL=P3)
  p3_dev_base=$(basename "$p3_dev")
  /bin/lsblk -o KNAME,TYPE,SIZE,MODEL,PARTLABEL
  echo "CURRENT PERSIST PARTITION IS: $p3_dev_base"
}

relabel_dev() {
  /usr/bin/sgdisk -c "$num_p3_part":"$1" "$2"
}

clear_gpt() {
  /usr/bin/sgdisk -g --clear "$1"
}

create_new_p3_part() {
  /usr/bin/sgdisk --new "$num_p3_part":"$sec_start":"$sec_end" \
                  --typecode="$num_p3_part":7dcc9ef1-b744-454a-b6ee-c15af7e3eea9 \
                  --change-name="$num_p3_part":'P3' "$1"
}

mount_partlabel() {
  PARTLABEL="$1"
  if [ -z "$2" ]; then
    echo "ERROR: no mountpoint provided" && help
  fi
  MOUNTPOINT="$2"
  if ! mkdir -p "$MOUNTPOINT"; then
     echo "ERROR: failed to ensure $MOUNTPOINT" && exit 1
  fi
  MOUNT_DEV=$(/sbin/findfs PARTLABEL="$PARTLABEL")
  if [ -z "$MOUNT_DEV" ]; then
    echo "ERROR: no device with PARTLABEL=$PARTLABEL found" && exit 1
  fi
  if ! mount -t vfat -o rw,iocharset=iso8859-1 "$MOUNT_DEV" "$MOUNTPOINT"; then
     echo "ERROR: mount $MOUNT_DEV on $MOUNTPOINT failed" && exit 1
  fi
}

unmount_partlabel() {
  PARTLABEL="$1"
  MOUNT_DEV=$(/sbin/findfs PARTLABEL="$PARTLABEL")
  if [ -z "$MOUNT_DEV" ]; then
    echo "ERROR: no device with PARTLABEL=$PARTLABEL found" && exit 1
  fi
  if ! umount "$MOUNT_DEV"; then
     echo "ERROR: umount $MOUNT_DEV failed" && exit 1
  fi
}

http_debug_request() {
    URL="$1"
    running=0

    if nc -z 127.1 6543; then
        running=1
    fi

    if [ "$running" = "0" ]; then
        kill -USR2 "$(cat /run/zedbox.pid)"
    fi

    printf "POST %s HTTP/1.0\r\n\r\n" "$URL" | nc 127.1 6543

    if [ "$running" = "0" ]; then
        printf "POST /stop HTTP/1.0\r\n\r\n" | nc 127.1 6543
    fi
}

dump_stacks() {
    http_debug_request "/dump/stacks"
}

dump_mem() {
    http_debug_request "/dump/memory"
}

psi_collector_start() {
    http_debug_request "/memory-monitor/psi-collector/start"
}

psi_collector_stop() {
    http_debug_request "/memory-monitor/psi-collector/stop"
}

is_in_debug_service() {
    grep -q '/eve/services/debug' < /proc/self/cgroup
}

case "$1" in
    exec) NO_FORK="-F"
          if [ "$2" = "--fork" ]; then
            NO_FORK=""
            shift
          fi
          # shellcheck disable=SC2086
          ID=$(${CTR_CMD} t ls | awk '/^'${2:-pillar}' /{print $2;}' 2>/dev/null)
          CMD="${3:-sh}"
          shift ; shift ; shift
          for c in /sys/fs/cgroup/*/tasks; do echo "$$" >> "$c"; done
          # shellcheck disable=SC2086
          exec nsenter ${NO_FORK} -a -t "${ID:-1}" "$CMD" "$@"
          ;;
    list-app-consoles)
          if ! is_in_debug_service; then
              # List can be executed only in debug service container
              # due to missing convenient GNU tools
              eve enter debug "eve $1"
              exit
          fi
          printf "PID\tAPP-UUID\t\t\t\tCONS-TYPE\tCONS-ID\n"
          # shellcheck disable=SC3045
          printf "---\t--------\t\t\t\t---------\t---------\n"
          for pid in $(pgrep qemu-system); do
              # shellcheck disable=SC2009
              name=$(ps -p "$pid" --no-headers -o command | grep -o '\-name\s\+[^ ]\+' | awk '{print $2}')
              # shellcheck disable=SC2009
              uuid=$(ps -p "$pid" --no-headers -o command | grep -o '\-uuid\s\+[^ ]\+' | awk '{print $2}')
              dir="$KVM_RUN_DIR/$name"
              if [ -e "$dir/shim-cons" ]; then
                  printf "%s\t%s\tCONTAINER\t%s/cons\n" "$pid" "$uuid" "$name"
                  printf "%s\t%s\tVM\t\t%s/shim-cons\n" "$pid" "$uuid" "$name"
              else
                  printf "%s\t%s\tVM\t\t%s/cons\n" "$pid" "$uuid" "$name"
              fi
          done
          ;;
    attach-app-console) [ -z "$2" ] && help
          if ! is_in_debug_service; then
              # Attach can be executed only in debug service container
              # due to missing convenient GNU tools
              eve enter debug "eve $1 $2"
              exit
          fi
          CONS="$KVM_RUN_DIR/$2"
          if [ ! -e "$CONS" ]; then
              echo "Error: console '$2' does not exist."
              echo "Try to use 'eve list-app-consoles'."
              exit 1
          fi
          PTY=$(dirname "$CONS")/pty-$$
          # Start socat in background to pump bytes between console socket and PTY
          trap 'kill $SOCAT_PID 2>/dev/null' EXIT HUP INT QUIT TERM
          socat "unix-connect:$CONS" "pty,link=$PTY" &
          SOCAT_PID=$!
          # Give some time to socat to create PTY
          sleep 1
          # Start tio
          tio "$PTY"
          ;;
   enter) PROMPT="[${2:-pillar}] \u@\h:\w\$ "
          # shellcheck disable=SC2086
          ${CTR_CMD} t exec -t --exec-id $(basename $(mktemp)) ${2:-pillar} ${3:-/bin/sh -lc "export PS1='$PROMPT'; exec /bin/sh"}
          ;;
   enter-user-app) [ -z "$2" ] && help
          # shellcheck disable=SC2046,SC2086
          ${CTR_UA_CMD} t exec -t --exec-id $(basename $(mktemp)) $2 sh -l
          ;;
    list) ${CTR_CMD} c ls
          ;;
  status) ${CTR_CMD} t ls
          ;;
   start) [ -z "$2" ] && help
          ${CTR_CMD} c ls -q | grep -q $2 && echo "ERROR: make sure to run: $0 destroy $2" && help
          /usr/bin/service -v start $2
          ;;
 destroy) [ -z "$2" ] && help
          ${CTR_CMD} t kill -a -s SIGKILL $2
          ${CTR_CMD} t delete $2
          ${CTR_CMD} c rm $2
          ;;
   pause) [ -z "$2" ] && help
          ${CTR_CMD} t pause $2
          ;;
  resume) [ -z "$2" ] && help
          ${CTR_CMD} t resume $2
          ;;
firewall) if [ "$2" = drop ]; then
             nsenter -a -t "$(${CTR_CMD} t ls | awk '/^pillar /{print $2;}' 2>/dev/null)" sh -x <<__EOT__
               iptables -P INPUT ACCEPT
               iptables -P FORWARD ACCEPT
               iptables -P OUTPUT ACCEPT
               iptables -F
               iptables -X
               iptables -Z
               iptables -t nat -F
               iptables -t nat -X
               iptables -t mangle -F
               iptables -t mangle -X
               iptables -t raw -F
               iptables -t raw -X
__EOT__
          else
             help
          fi
          ;;
 http-debug) if [ -z "$2" ] || [ "$2" = "start" ]; then
              kill -USR2 "$(cat /run/zedbox.pid)"
              echo "Listening on :6543 -- use 'eve http-debug stop' to stop"
          elif [ "$2" = "stop" ]; then
              printf "POST /stop HTTP/1.0\r\n\r\n" | nc 127.1 6543
          else
              echo "Unknown command; use 'start' or 'stop'"
          fi
          ;;
 dump-stacks)
          dump_stacks
          echo "Your information can be found in logread"
          ;;
 dump-memory)
          dump_mem
          echo "Your information can be found in logread"
          ;;
 memory-monitor-update-config)
          pkill -SIGHUP -o memory-monitor
          echo "Updated memory-monitor configuration"
          ;;
 psi-collector)
          case "$2" in
            start)
              echo "Sending request to start PSI collector..."
              echo "If it succeeds, you will see the output in /persist/memory-monitor/output/psi.txt"
              psi_collector_start
                   ;;
            stop)
              echo "If collector was running, it should be stopped now and the output is in /persist/memory-monitor/output/psi.txt"
              psi_collector_stop
                   ;;
            *) help
               ;;
          esac
          ;;
 verbose) # first lets find our piping process
          PIPE=""
          while [ "$PIPE" = "" ]
          do
              for pid in $(pgrep cat)
              do
                 if [ "$(readlink /proc/"$pid"/fd/0)" = /run/diag.pipe ]
                 then
                     PIPE="$pid"
                 fi
              done
              if [ -z "$PIPE" ]
              then
                  sleep 1
              fi
          done
          # now lets see what to do with it
          case "$2" in
             on) dmesg -n8
                 kill -CONT "$PIPE"
                 ;;
            off) dmesg -n1
                 kill -STOP "$PIPE"
                 ;;
              *) help
                 ;;
          esac
          ;;
 remote-access)
          CONFIGDIR_RW="/tmp/config_rw"
          mkdir $CONFIGDIR_RW
          if eval "$(mount_partlabel "CONFIG" $CONFIGDIR_RW)"; then
              case "$2" in
                on) rm -f $CONFIGDIR_RW/remote_access_disabled
                    eval "$(unmount_partlabel "CONFIG")" && rm -rf $CONFIGDIR_RW
                    echo "Remote access enabled. Please reboot to apply changes."
                    ;;
                off) touch $CONFIGDIR_RW/remote_access_disabled
                     eval "$(unmount_partlabel "CONFIG")" && rm -rf $CONFIGDIR_RW
                     echo "Remote access disabled. Please reboot to apply changes."
                     ;;
                *) eval "$(unmount_partlabel "CONFIG")" && rm -rf $CONFIGDIR_RW
                   help
                   ;;
              esac
          else
              echo "Failed to set the remote access configuration!"
          fi
          ;;
 version)
          v=$(cat /run/eve-release)
          echo "$v"
          ;;
 uuid)
          uuid=$(cat /persist/status/uuid)
          echo "$uuid"
          ;;
 hv)
          type=$(cat /run/eve-hv-type)
          echo "$type"
          ;;
 persist) case "$2" in
               list) list_partitions
                     ;;
             attach) [ -z "$3" ] && help
                     shift 2
                     #fetch current P3 partition
                     curr_p3_dev=$(/sbin/findfs PARTLABEL=P3)
                     [ -z "$curr_p3_dev" ] && echo "Failed to find current P3 device" && exit 1
                     curr_p3_dsk="/dev/"$(lsblk -no pkname "$curr_p3_dev")

                     #Attach must be idempotent
                     [ "$curr_p3_dsk" = "$1" ] && echo "Persist is already on the given disk. Nothing to be done." && exit 0

                     #Clear GPT on new device, and create P3 partition
                     clear_gpt "$1"
                     create_new_p3_part "$1"

                     #check the result. At this point we should have two P3 partitions.
                     #since findfs returns only the first P3, use cgpt to be more specific
                     new_p3_dev=$(/usr/bin/cgpt find -l P3 "$1")
                     new_p3_dsk="/dev/"$(lsblk -no pkname "$new_p3_dev")
                     [ "$new_p3_dsk" != "$1" ] && echo "Failed to attach persist to $1" && exit 1

                     #now rename current partition label
                     echo "Removing P3 label from the old partition $curr_p3_dev"
                     relabel_dev "$p3_old_tag" "$curr_p3_dsk"

                     echo "Done. Attached persist to $1"
                     #print the partition
                     list_partitions
                     ;;
                  *) help
                     ;;
          esac
          ;;
 config) case "$2" in
               mount) mount_partlabel "CONFIG" "$3"
                     ;;
               unmount) unmount_partlabel "CONFIG"
                     ;;
               *) help
                     ;;
          esac
          ;;
       *) help
          ;;
esac
