// Copyright(c) 2024 Zededa, Inc.
// All rights reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: info/edge_node_cluster.proto

package info

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KubeNodeStatus follows Kubernetes Node Conditions
//
//	Refer here: https://pkg.go.dev/k8s.io/api/core/v1#NodeConditionType
type KubeNodeConditionType int32

const (
	KubeNodeConditionType_KUBE_NODE_CONDITION_TYPE_UNSPECIFIED     KubeNodeConditionType = 0
	KubeNodeConditionType_KUBE_NODE_CONDITION_TYPE_READY           KubeNodeConditionType = 1
	KubeNodeConditionType_KUBE_NODE_CONDITION_TYPE_MEMORY_PRESSURE KubeNodeConditionType = 2
	KubeNodeConditionType_KUBE_NODE_CONDITION_TYPE_DISK_PRESSURE   KubeNodeConditionType = 3
	KubeNodeConditionType_KUBE_NODE_CONDITION_TYPE_PID_PRESSURE    KubeNodeConditionType = 4
	KubeNodeConditionType_KUBE_NODE_CONDITION_TYPE_NETWORK_UNAVAIL KubeNodeConditionType = 5
)

// Enum value maps for KubeNodeConditionType.
var (
	KubeNodeConditionType_name = map[int32]string{
		0: "KUBE_NODE_CONDITION_TYPE_UNSPECIFIED",
		1: "KUBE_NODE_CONDITION_TYPE_READY",
		2: "KUBE_NODE_CONDITION_TYPE_MEMORY_PRESSURE",
		3: "KUBE_NODE_CONDITION_TYPE_DISK_PRESSURE",
		4: "KUBE_NODE_CONDITION_TYPE_PID_PRESSURE",
		5: "KUBE_NODE_CONDITION_TYPE_NETWORK_UNAVAIL",
	}
	KubeNodeConditionType_value = map[string]int32{
		"KUBE_NODE_CONDITION_TYPE_UNSPECIFIED":     0,
		"KUBE_NODE_CONDITION_TYPE_READY":           1,
		"KUBE_NODE_CONDITION_TYPE_MEMORY_PRESSURE": 2,
		"KUBE_NODE_CONDITION_TYPE_DISK_PRESSURE":   3,
		"KUBE_NODE_CONDITION_TYPE_PID_PRESSURE":    4,
		"KUBE_NODE_CONDITION_TYPE_NETWORK_UNAVAIL": 5,
	}
)

func (x KubeNodeConditionType) Enum() *KubeNodeConditionType {
	p := new(KubeNodeConditionType)
	*p = x
	return p
}

func (x KubeNodeConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubeNodeConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_info_edge_node_cluster_proto_enumTypes[0].Descriptor()
}

func (KubeNodeConditionType) Type() protoreflect.EnumType {
	return &file_info_edge_node_cluster_proto_enumTypes[0]
}

func (x KubeNodeConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubeNodeConditionType.Descriptor instead.
func (KubeNodeConditionType) EnumDescriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{0}
}

// Cluster Admission status of the eve node
type NodeAdmission int32

const (
	NodeAdmission_NODE_ADMISSION_UNSPECIFIED NodeAdmission = 0
	// Not Clustered is the default state at first boot
	NodeAdmission_NODE_ADMISSION_NOT_CLUSTERED NodeAdmission = 1
	// Leaving can be a long lived state due to draining existing data
	NodeAdmission_NODE_ADMISSION_LEAVING NodeAdmission = 2
	// Joining can be a long lived state if inter-node networking is not operable
	NodeAdmission_NODE_ADMISSION_JOINING NodeAdmission = 3
	// Joined is reached when the node becomes Ready the first time after a request
	// to join the cluster
	NodeAdmission_NODE_ADMISSION_JOINED NodeAdmission = 4
)

// Enum value maps for NodeAdmission.
var (
	NodeAdmission_name = map[int32]string{
		0: "NODE_ADMISSION_UNSPECIFIED",
		1: "NODE_ADMISSION_NOT_CLUSTERED",
		2: "NODE_ADMISSION_LEAVING",
		3: "NODE_ADMISSION_JOINING",
		4: "NODE_ADMISSION_JOINED",
	}
	NodeAdmission_value = map[string]int32{
		"NODE_ADMISSION_UNSPECIFIED":   0,
		"NODE_ADMISSION_NOT_CLUSTERED": 1,
		"NODE_ADMISSION_LEAVING":       2,
		"NODE_ADMISSION_JOINING":       3,
		"NODE_ADMISSION_JOINED":        4,
	}
)

func (x NodeAdmission) Enum() *NodeAdmission {
	p := new(NodeAdmission)
	*p = x
	return p
}

func (x NodeAdmission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeAdmission) Descriptor() protoreflect.EnumDescriptor {
	return file_info_edge_node_cluster_proto_enumTypes[1].Descriptor()
}

func (NodeAdmission) Type() protoreflect.EnumType {
	return &file_info_edge_node_cluster_proto_enumTypes[1]
}

func (x NodeAdmission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeAdmission.Descriptor instead.
func (NodeAdmission) EnumDescriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{1}
}

// StorageHealthStatus is a higher level tracking status to show redundancy/failure-zone level
// and rebuild progress.
type StorageHealthStatus int32

const (
	StorageHealthStatus_STORAGE_HEALTH_STATUS_UNSPECIFIED                                  StorageHealthStatus = 0
	StorageHealthStatus_STORAGE_HEALTH_STATUS_HEALTHY                                      StorageHealthStatus = 1
	StorageHealthStatus_STORAGE_HEALTH_STATUS_DEGRADED_2_REPLICA_AVAILABLE_REPLICATING     StorageHealthStatus = 2
	StorageHealthStatus_STORAGE_HEALTH_STATUS_DEGRADED_2_REPLICA_AVAILABLE_NOT_REPLICATING StorageHealthStatus = 3
	StorageHealthStatus_STORAGE_HEALTH_STATUS_DEGRADED_1_REPLICA_AVAILABLE_REPLICATING     StorageHealthStatus = 4
	StorageHealthStatus_STORAGE_HEALTH_STATUS_DEGRADED_1_REPLICA_AVAILABLE_NOT_REPLICATING StorageHealthStatus = 5
	StorageHealthStatus_STORAGE_HEALTH_STATUS_FAILED                                       StorageHealthStatus = 6
)

// Enum value maps for StorageHealthStatus.
var (
	StorageHealthStatus_name = map[int32]string{
		0: "STORAGE_HEALTH_STATUS_UNSPECIFIED",
		1: "STORAGE_HEALTH_STATUS_HEALTHY",
		2: "STORAGE_HEALTH_STATUS_DEGRADED_2_REPLICA_AVAILABLE_REPLICATING",
		3: "STORAGE_HEALTH_STATUS_DEGRADED_2_REPLICA_AVAILABLE_NOT_REPLICATING",
		4: "STORAGE_HEALTH_STATUS_DEGRADED_1_REPLICA_AVAILABLE_REPLICATING",
		5: "STORAGE_HEALTH_STATUS_DEGRADED_1_REPLICA_AVAILABLE_NOT_REPLICATING",
		6: "STORAGE_HEALTH_STATUS_FAILED",
	}
	StorageHealthStatus_value = map[string]int32{
		"STORAGE_HEALTH_STATUS_UNSPECIFIED":                                  0,
		"STORAGE_HEALTH_STATUS_HEALTHY":                                      1,
		"STORAGE_HEALTH_STATUS_DEGRADED_2_REPLICA_AVAILABLE_REPLICATING":     2,
		"STORAGE_HEALTH_STATUS_DEGRADED_2_REPLICA_AVAILABLE_NOT_REPLICATING": 3,
		"STORAGE_HEALTH_STATUS_DEGRADED_1_REPLICA_AVAILABLE_REPLICATING":     4,
		"STORAGE_HEALTH_STATUS_DEGRADED_1_REPLICA_AVAILABLE_NOT_REPLICATING": 5,
		"STORAGE_HEALTH_STATUS_FAILED":                                       6,
	}
)

func (x StorageHealthStatus) Enum() *StorageHealthStatus {
	p := new(StorageHealthStatus)
	*p = x
	return p
}

func (x StorageHealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageHealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_edge_node_cluster_proto_enumTypes[2].Descriptor()
}

func (StorageHealthStatus) Type() protoreflect.EnumType {
	return &file_info_edge_node_cluster_proto_enumTypes[2]
}

func (x StorageHealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageHealthStatus.Descriptor instead.
func (StorageHealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{2}
}

// StorageVolumeState is the kubernetes 'state' field of a replicated csi-driver volume.
//
//	Refer to: https://github.com/longhorn/longhorn-manager/blob/v1.6.2/k8s/pkg/apis/longhorn/v1beta1/volume.go#L14
type StorageVolumeState int32

const (
	StorageVolumeState_STORAGE_VOLUME_STATE_UNSPECIFIED StorageVolumeState = 0
	StorageVolumeState_STORAGE_VOLUME_STATE_CREATING    StorageVolumeState = 1
	StorageVolumeState_STORAGE_VOLUME_STATE_ATTACHED    StorageVolumeState = 2
	StorageVolumeState_STORAGE_VOLUME_STATE_DETACHED    StorageVolumeState = 3
	StorageVolumeState_STORAGE_VOLUME_STATE_ATTACHING   StorageVolumeState = 4
	StorageVolumeState_STORAGE_VOLUME_STATE_DETACHING   StorageVolumeState = 5
	StorageVolumeState_STORAGE_VOLUME_STATE_DELETING    StorageVolumeState = 6
)

// Enum value maps for StorageVolumeState.
var (
	StorageVolumeState_name = map[int32]string{
		0: "STORAGE_VOLUME_STATE_UNSPECIFIED",
		1: "STORAGE_VOLUME_STATE_CREATING",
		2: "STORAGE_VOLUME_STATE_ATTACHED",
		3: "STORAGE_VOLUME_STATE_DETACHED",
		4: "STORAGE_VOLUME_STATE_ATTACHING",
		5: "STORAGE_VOLUME_STATE_DETACHING",
		6: "STORAGE_VOLUME_STATE_DELETING",
	}
	StorageVolumeState_value = map[string]int32{
		"STORAGE_VOLUME_STATE_UNSPECIFIED": 0,
		"STORAGE_VOLUME_STATE_CREATING":    1,
		"STORAGE_VOLUME_STATE_ATTACHED":    2,
		"STORAGE_VOLUME_STATE_DETACHED":    3,
		"STORAGE_VOLUME_STATE_ATTACHING":   4,
		"STORAGE_VOLUME_STATE_DETACHING":   5,
		"STORAGE_VOLUME_STATE_DELETING":    6,
	}
)

func (x StorageVolumeState) Enum() *StorageVolumeState {
	p := new(StorageVolumeState)
	*p = x
	return p
}

func (x StorageVolumeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageVolumeState) Descriptor() protoreflect.EnumDescriptor {
	return file_info_edge_node_cluster_proto_enumTypes[3].Descriptor()
}

func (StorageVolumeState) Type() protoreflect.EnumType {
	return &file_info_edge_node_cluster_proto_enumTypes[3]
}

func (x StorageVolumeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageVolumeState.Descriptor instead.
func (StorageVolumeState) EnumDescriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{3}
}

// StorageVolumeRobustness is the 'robustness' of a replicated csi-driver volume.
//
//	Refer to: https://github.com/longhorn/longhorn-manager/blob/v1.6.2/k8s/pkg/apis/longhorn/v1beta1/volume.go#L25
type StorageVolumeRobustness int32

const (
	StorageVolumeRobustness_STORAGE_VOLUME_ROBUSTNESS_UNSPECIFIED StorageVolumeRobustness = 0
	StorageVolumeRobustness_STORAGE_VOLUME_ROBUSTNESS_HEALTHY     StorageVolumeRobustness = 1
	StorageVolumeRobustness_STORAGE_VOLUME_ROBUSTNESS_DEGRADED    StorageVolumeRobustness = 2
	StorageVolumeRobustness_STORAGE_VOLUME_ROBUSTNESS_FAULTED     StorageVolumeRobustness = 3
)

// Enum value maps for StorageVolumeRobustness.
var (
	StorageVolumeRobustness_name = map[int32]string{
		0: "STORAGE_VOLUME_ROBUSTNESS_UNSPECIFIED",
		1: "STORAGE_VOLUME_ROBUSTNESS_HEALTHY",
		2: "STORAGE_VOLUME_ROBUSTNESS_DEGRADED",
		3: "STORAGE_VOLUME_ROBUSTNESS_FAULTED",
	}
	StorageVolumeRobustness_value = map[string]int32{
		"STORAGE_VOLUME_ROBUSTNESS_UNSPECIFIED": 0,
		"STORAGE_VOLUME_ROBUSTNESS_HEALTHY":     1,
		"STORAGE_VOLUME_ROBUSTNESS_DEGRADED":    2,
		"STORAGE_VOLUME_ROBUSTNESS_FAULTED":     3,
	}
)

func (x StorageVolumeRobustness) Enum() *StorageVolumeRobustness {
	p := new(StorageVolumeRobustness)
	*p = x
	return p
}

func (x StorageVolumeRobustness) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageVolumeRobustness) Descriptor() protoreflect.EnumDescriptor {
	return file_info_edge_node_cluster_proto_enumTypes[4].Descriptor()
}

func (StorageVolumeRobustness) Type() protoreflect.EnumType {
	return &file_info_edge_node_cluster_proto_enumTypes[4]
}

func (x StorageVolumeRobustness) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageVolumeRobustness.Descriptor instead.
func (StorageVolumeRobustness) EnumDescriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{4}
}

// StorageVolumePVCStatus is the kubernetes 'phase' of a PVC. Listed as status in cli.
//
//	Refer to: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
type StorageVolumePVCStatus int32

const (
	StorageVolumePVCStatus_STORAGE_VOLUME_PVC_STATUS_UNSPECIFIED StorageVolumePVCStatus = 0
	StorageVolumePVCStatus_STORAGE_VOLUME_PVC_STATUS_BOUND       StorageVolumePVCStatus = 1
	StorageVolumePVCStatus_STORAGE_VOLUME_PVC_STATUS_PENDING     StorageVolumePVCStatus = 2 // Accepted but not yet scheduled
	StorageVolumePVCStatus_STORAGE_VOLUME_PVC_STATUS_AVAILABLE   StorageVolumePVCStatus = 3
	StorageVolumePVCStatus_STORAGE_VOLUME_PVC_STATUS_RELEASED    StorageVolumePVCStatus = 4
	StorageVolumePVCStatus_STORAGE_VOLUME_PVC_STATUS_FAILED      StorageVolumePVCStatus = 5
)

// Enum value maps for StorageVolumePVCStatus.
var (
	StorageVolumePVCStatus_name = map[int32]string{
		0: "STORAGE_VOLUME_PVC_STATUS_UNSPECIFIED",
		1: "STORAGE_VOLUME_PVC_STATUS_BOUND",
		2: "STORAGE_VOLUME_PVC_STATUS_PENDING",
		3: "STORAGE_VOLUME_PVC_STATUS_AVAILABLE",
		4: "STORAGE_VOLUME_PVC_STATUS_RELEASED",
		5: "STORAGE_VOLUME_PVC_STATUS_FAILED",
	}
	StorageVolumePVCStatus_value = map[string]int32{
		"STORAGE_VOLUME_PVC_STATUS_UNSPECIFIED": 0,
		"STORAGE_VOLUME_PVC_STATUS_BOUND":       1,
		"STORAGE_VOLUME_PVC_STATUS_PENDING":     2,
		"STORAGE_VOLUME_PVC_STATUS_AVAILABLE":   3,
		"STORAGE_VOLUME_PVC_STATUS_RELEASED":    4,
		"STORAGE_VOLUME_PVC_STATUS_FAILED":      5,
	}
)

func (x StorageVolumePVCStatus) Enum() *StorageVolumePVCStatus {
	p := new(StorageVolumePVCStatus)
	*p = x
	return p
}

func (x StorageVolumePVCStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageVolumePVCStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_edge_node_cluster_proto_enumTypes[5].Descriptor()
}

func (StorageVolumePVCStatus) Type() protoreflect.EnumType {
	return &file_info_edge_node_cluster_proto_enumTypes[5]
}

func (x StorageVolumePVCStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageVolumePVCStatus.Descriptor instead.
func (StorageVolumePVCStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{5}
}

// StorageVolumeReplicaStatus is a higher level status which combines replica and engine
//
//	status to show a simplified view of a replica rebuild state.
type StorageVolumeReplicaStatus int32

const (
	StorageVolumeReplicaStatus_STORAGE_VOLUME_REPLICA_STATUS_UNSPECIFIED StorageVolumeReplicaStatus = 0
	StorageVolumeReplicaStatus_STORAGE_VOLUME_REPLICA_STATUS_REBUILDING  StorageVolumeReplicaStatus = 1
	StorageVolumeReplicaStatus_STORAGE_VOLUME_REPLICA_STATUS_ONLINE      StorageVolumeReplicaStatus = 2
	StorageVolumeReplicaStatus_STORAGE_VOLUME_REPLICA_STATUS_FAILED      StorageVolumeReplicaStatus = 3 // Replacement/Rebuilt replica not yet scheduled.
	StorageVolumeReplicaStatus_STORAGE_VOLUME_REPLICA_STATUS_OFFLINE     StorageVolumeReplicaStatus = 4
	StorageVolumeReplicaStatus_STORAGE_VOLUME_REPLICA_STATUS_STARTING    StorageVolumeReplicaStatus = 5
	StorageVolumeReplicaStatus_STORAGE_VOLUME_REPLICA_STATUS_STOPPING    StorageVolumeReplicaStatus = 6
)

// Enum value maps for StorageVolumeReplicaStatus.
var (
	StorageVolumeReplicaStatus_name = map[int32]string{
		0: "STORAGE_VOLUME_REPLICA_STATUS_UNSPECIFIED",
		1: "STORAGE_VOLUME_REPLICA_STATUS_REBUILDING",
		2: "STORAGE_VOLUME_REPLICA_STATUS_ONLINE",
		3: "STORAGE_VOLUME_REPLICA_STATUS_FAILED",
		4: "STORAGE_VOLUME_REPLICA_STATUS_OFFLINE",
		5: "STORAGE_VOLUME_REPLICA_STATUS_STARTING",
		6: "STORAGE_VOLUME_REPLICA_STATUS_STOPPING",
	}
	StorageVolumeReplicaStatus_value = map[string]int32{
		"STORAGE_VOLUME_REPLICA_STATUS_UNSPECIFIED": 0,
		"STORAGE_VOLUME_REPLICA_STATUS_REBUILDING":  1,
		"STORAGE_VOLUME_REPLICA_STATUS_ONLINE":      2,
		"STORAGE_VOLUME_REPLICA_STATUS_FAILED":      3,
		"STORAGE_VOLUME_REPLICA_STATUS_OFFLINE":     4,
		"STORAGE_VOLUME_REPLICA_STATUS_STARTING":    5,
		"STORAGE_VOLUME_REPLICA_STATUS_STOPPING":    6,
	}
)

func (x StorageVolumeReplicaStatus) Enum() *StorageVolumeReplicaStatus {
	p := new(StorageVolumeReplicaStatus)
	*p = x
	return p
}

func (x StorageVolumeReplicaStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageVolumeReplicaStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_edge_node_cluster_proto_enumTypes[6].Descriptor()
}

func (StorageVolumeReplicaStatus) Type() protoreflect.EnumType {
	return &file_info_edge_node_cluster_proto_enumTypes[6]
}

func (x StorageVolumeReplicaStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageVolumeReplicaStatus.Descriptor instead.
func (StorageVolumeReplicaStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{6}
}

// KubePodStatus is a combination of the kubernetes status:
//
//	PodPhase: https://pkg.go.dev/k8s.io/api/core/v1#PodPhase
//	PodConditionType: https://pkg.go.dev/k8s.io/api/core/v1#PodConditionType
//	ContainerState: https://pkg.go.dev/k8s.io/api/core/v1#ContainerState
type KubePodStatus int32

const (
	KubePodStatus_KUBE_POD_STATUS_UNSPECIFIED        KubePodStatus = 0 // Necessary for proto yetus
	KubePodStatus_KUBE_POD_STATUS_PENDING            KubePodStatus = 1 // PodPhase
	KubePodStatus_KUBE_POD_STATUS_RUNNING            KubePodStatus = 2 // PodPhase
	KubePodStatus_KUBE_POD_STATUS_SUCCEEDED          KubePodStatus = 3 // PodPhase
	KubePodStatus_KUBE_POD_STATUS_CONTAINER_CREATING KubePodStatus = 4 // ContainerState:Waiting Reason:ContainerCreating
	KubePodStatus_KUBE_POD_STATUS_CRASHLOOP_BACKOFF  KubePodStatus = 5 // ContainerState:Waiting Reason:CrashLoopBackoff
	KubePodStatus_KUBE_POD_STATUS_ERROR              KubePodStatus = 6 // ContainerState:Terminated Reason:Error
	KubePodStatus_KUBE_POD_STATUS_EVICTED            KubePodStatus = 7 // PodConditionType:DisruptionTarget
	KubePodStatus_KUBE_POD_STATUS_FAILED             KubePodStatus = 8 // PodPhase
)

// Enum value maps for KubePodStatus.
var (
	KubePodStatus_name = map[int32]string{
		0: "KUBE_POD_STATUS_UNSPECIFIED",
		1: "KUBE_POD_STATUS_PENDING",
		2: "KUBE_POD_STATUS_RUNNING",
		3: "KUBE_POD_STATUS_SUCCEEDED",
		4: "KUBE_POD_STATUS_CONTAINER_CREATING",
		5: "KUBE_POD_STATUS_CRASHLOOP_BACKOFF",
		6: "KUBE_POD_STATUS_ERROR",
		7: "KUBE_POD_STATUS_EVICTED",
		8: "KUBE_POD_STATUS_FAILED",
	}
	KubePodStatus_value = map[string]int32{
		"KUBE_POD_STATUS_UNSPECIFIED":        0,
		"KUBE_POD_STATUS_PENDING":            1,
		"KUBE_POD_STATUS_RUNNING":            2,
		"KUBE_POD_STATUS_SUCCEEDED":          3,
		"KUBE_POD_STATUS_CONTAINER_CREATING": 4,
		"KUBE_POD_STATUS_CRASHLOOP_BACKOFF":  5,
		"KUBE_POD_STATUS_ERROR":              6,
		"KUBE_POD_STATUS_EVICTED":            7,
		"KUBE_POD_STATUS_FAILED":             8,
	}
)

func (x KubePodStatus) Enum() *KubePodStatus {
	p := new(KubePodStatus)
	*p = x
	return p
}

func (x KubePodStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubePodStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_edge_node_cluster_proto_enumTypes[7].Descriptor()
}

func (KubePodStatus) Type() protoreflect.EnumType {
	return &file_info_edge_node_cluster_proto_enumTypes[7]
}

func (x KubePodStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubePodStatus.Descriptor instead.
func (KubePodStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{7}
}

// ServiceStatus denotes a cluster wide
//
//	infrastructure component's health.
//	eg. a daemonset which requires pods on multiple nodes
type ServiceStatus int32

const (
	ServiceStatus_SERVICE_STATUS_UNSPECIFIED ServiceStatus = 0
	ServiceStatus_SERVICE_STATUS_FAILED      ServiceStatus = 1
	ServiceStatus_SERVICE_STATUS_DEGRADED    ServiceStatus = 2
	ServiceStatus_SERVICE_STATUS_HEALTHY     ServiceStatus = 3
)

// Enum value maps for ServiceStatus.
var (
	ServiceStatus_name = map[int32]string{
		0: "SERVICE_STATUS_UNSPECIFIED",
		1: "SERVICE_STATUS_FAILED",
		2: "SERVICE_STATUS_DEGRADED",
		3: "SERVICE_STATUS_HEALTHY",
	}
	ServiceStatus_value = map[string]int32{
		"SERVICE_STATUS_UNSPECIFIED": 0,
		"SERVICE_STATUS_FAILED":      1,
		"SERVICE_STATUS_DEGRADED":    2,
		"SERVICE_STATUS_HEALTHY":     3,
	}
)

func (x ServiceStatus) Enum() *ServiceStatus {
	p := new(ServiceStatus)
	*p = x
	return p
}

func (x ServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_edge_node_cluster_proto_enumTypes[8].Descriptor()
}

func (ServiceStatus) Type() protoreflect.EnumType {
	return &file_info_edge_node_cluster_proto_enumTypes[8]
}

func (x ServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus.Descriptor instead.
func (ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{8}
}

// KubeCompUpdateStatus will track status of each
//
//	KubeComp which will update serially in a cluster.
type KubeCompUpdateStatus int32

const (
	KubeCompUpdateStatus_KUBE_COMP_UPDATE_STATUS_UNSPECIFIED     KubeCompUpdateStatus = 0
	KubeCompUpdateStatus_KUBE_COMP_UPDATE_STATUS_DOWNLOAD        KubeCompUpdateStatus = 1
	KubeCompUpdateStatus_KUBE_COMP_UPDATE_STATUS_DOWNLOAD_FAILED KubeCompUpdateStatus = 2
	KubeCompUpdateStatus_KUBE_COMP_UPDATE_STATUS_IN_PROGRESS     KubeCompUpdateStatus = 3
	KubeCompUpdateStatus_KUBE_COMP_UPDATE_STATUS_FAILED          KubeCompUpdateStatus = 4
	KubeCompUpdateStatus_KUBE_COMP_UPDATE_STATUS_COMPLETED       KubeCompUpdateStatus = 5
)

// Enum value maps for KubeCompUpdateStatus.
var (
	KubeCompUpdateStatus_name = map[int32]string{
		0: "KUBE_COMP_UPDATE_STATUS_UNSPECIFIED",
		1: "KUBE_COMP_UPDATE_STATUS_DOWNLOAD",
		2: "KUBE_COMP_UPDATE_STATUS_DOWNLOAD_FAILED",
		3: "KUBE_COMP_UPDATE_STATUS_IN_PROGRESS",
		4: "KUBE_COMP_UPDATE_STATUS_FAILED",
		5: "KUBE_COMP_UPDATE_STATUS_COMPLETED",
	}
	KubeCompUpdateStatus_value = map[string]int32{
		"KUBE_COMP_UPDATE_STATUS_UNSPECIFIED":     0,
		"KUBE_COMP_UPDATE_STATUS_DOWNLOAD":        1,
		"KUBE_COMP_UPDATE_STATUS_DOWNLOAD_FAILED": 2,
		"KUBE_COMP_UPDATE_STATUS_IN_PROGRESS":     3,
		"KUBE_COMP_UPDATE_STATUS_FAILED":          4,
		"KUBE_COMP_UPDATE_STATUS_COMPLETED":       5,
	}
)

func (x KubeCompUpdateStatus) Enum() *KubeCompUpdateStatus {
	p := new(KubeCompUpdateStatus)
	*p = x
	return p
}

func (x KubeCompUpdateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubeCompUpdateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_edge_node_cluster_proto_enumTypes[9].Descriptor()
}

func (KubeCompUpdateStatus) Type() protoreflect.EnumType {
	return &file_info_edge_node_cluster_proto_enumTypes[9]
}

func (x KubeCompUpdateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubeCompUpdateStatus.Descriptor instead.
func (KubeCompUpdateStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{9}
}

// KubeComp is a component installed in eve after usb install.
//
//	These are provided to show more detail on cluster update progress.
type KubeComp int32

const (
	KubeComp_KUBE_COMP_UNSPECIFIED KubeComp = 0
	KubeComp_KUBE_COMP_CONTAINERD  KubeComp = 1 //every node will publish
	KubeComp_KUBE_COMP_K3S         KubeComp = 2 // every node will publish
	KubeComp_KUBE_COMP_MULTUS      KubeComp = 3 // Only the first node to update eve-os will publish the remaining here and below
	KubeComp_KUBE_COMP_KUBEVIRT    KubeComp = 4
	KubeComp_KUBE_COMP_CDI         KubeComp = 5
	KubeComp_KUBE_COMP_LONGHORN    KubeComp = 6
)

// Enum value maps for KubeComp.
var (
	KubeComp_name = map[int32]string{
		0: "KUBE_COMP_UNSPECIFIED",
		1: "KUBE_COMP_CONTAINERD",
		2: "KUBE_COMP_K3S",
		3: "KUBE_COMP_MULTUS",
		4: "KUBE_COMP_KUBEVIRT",
		5: "KUBE_COMP_CDI",
		6: "KUBE_COMP_LONGHORN",
	}
	KubeComp_value = map[string]int32{
		"KUBE_COMP_UNSPECIFIED": 0,
		"KUBE_COMP_CONTAINERD":  1,
		"KUBE_COMP_K3S":         2,
		"KUBE_COMP_MULTUS":      3,
		"KUBE_COMP_KUBEVIRT":    4,
		"KUBE_COMP_CDI":         5,
		"KUBE_COMP_LONGHORN":    6,
	}
)

func (x KubeComp) Enum() *KubeComp {
	p := new(KubeComp)
	*p = x
	return p
}

func (x KubeComp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubeComp) Descriptor() protoreflect.EnumDescriptor {
	return file_info_edge_node_cluster_proto_enumTypes[10].Descriptor()
}

func (KubeComp) Type() protoreflect.EnumType {
	return &file_info_edge_node_cluster_proto_enumTypes[10]
}

func (x KubeComp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubeComp.Descriptor instead.
func (KubeComp) EnumDescriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{10}
}

// KubeVMIStatus is the VirtualMachineInstancePhase
// Refer to: https://pkg.go.dev/kubevirt.io/api/core/v1#VirtualMachineInstancePhase
type KubeVMIStatus int32

const (
	KubeVMIStatus_KUBE_VMI_STATUS_UNSPECIFIED KubeVMIStatus = 0
	KubeVMIStatus_KUBE_VMI_STATUS_PENDING     KubeVMIStatus = 1
	KubeVMIStatus_KUBE_VMI_STATUS_SCHEDULING  KubeVMIStatus = 2
	KubeVMIStatus_KUBE_VMI_STATUS_SCHEDULED   KubeVMIStatus = 3
	KubeVMIStatus_KUBE_VMI_STATUS_RUNNING     KubeVMIStatus = 4
	KubeVMIStatus_KUBE_VMI_STATUS_SUCCEEDED   KubeVMIStatus = 5
	KubeVMIStatus_KUBE_VMI_STATUS_FAILED      KubeVMIStatus = 6
	KubeVMIStatus_KUBE_VMI_STATUS_UNKNOWN     KubeVMIStatus = 7
)

// Enum value maps for KubeVMIStatus.
var (
	KubeVMIStatus_name = map[int32]string{
		0: "KUBE_VMI_STATUS_UNSPECIFIED",
		1: "KUBE_VMI_STATUS_PENDING",
		2: "KUBE_VMI_STATUS_SCHEDULING",
		3: "KUBE_VMI_STATUS_SCHEDULED",
		4: "KUBE_VMI_STATUS_RUNNING",
		5: "KUBE_VMI_STATUS_SUCCEEDED",
		6: "KUBE_VMI_STATUS_FAILED",
		7: "KUBE_VMI_STATUS_UNKNOWN",
	}
	KubeVMIStatus_value = map[string]int32{
		"KUBE_VMI_STATUS_UNSPECIFIED": 0,
		"KUBE_VMI_STATUS_PENDING":     1,
		"KUBE_VMI_STATUS_SCHEDULING":  2,
		"KUBE_VMI_STATUS_SCHEDULED":   3,
		"KUBE_VMI_STATUS_RUNNING":     4,
		"KUBE_VMI_STATUS_SUCCEEDED":   5,
		"KUBE_VMI_STATUS_FAILED":      6,
		"KUBE_VMI_STATUS_UNKNOWN":     7,
	}
)

func (x KubeVMIStatus) Enum() *KubeVMIStatus {
	p := new(KubeVMIStatus)
	*p = x
	return p
}

func (x KubeVMIStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubeVMIStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_edge_node_cluster_proto_enumTypes[11].Descriptor()
}

func (KubeVMIStatus) Type() protoreflect.EnumType {
	return &file_info_edge_node_cluster_proto_enumTypes[11]
}

func (x KubeVMIStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubeVMIStatus.Descriptor instead.
func (KubeVMIStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{11}
}

type KubeNodeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the condition
	Type KubeNodeConditionType `protobuf:"varint,1,opt,name=type,proto3,enum=org.lfedge.eve.info.KubeNodeConditionType" json:"type,omitempty"`
	// Condition state
	Set bool `protobuf:"varint,2,opt,name=set,proto3" json:"set,omitempty"`
	// last_transition_time is the last time the Condition changed
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
}

func (x *KubeNodeCondition) Reset() {
	*x = KubeNodeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_edge_node_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeNodeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeNodeCondition) ProtoMessage() {}

func (x *KubeNodeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_info_edge_node_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeNodeCondition.ProtoReflect.Descriptor instead.
func (*KubeNodeCondition) Descriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *KubeNodeCondition) GetType() KubeNodeConditionType {
	if x != nil {
		return x.Type
	}
	return KubeNodeConditionType_KUBE_NODE_CONDITION_TYPE_UNSPECIFIED
}

func (x *KubeNodeCondition) GetSet() bool {
	if x != nil {
		return x.Set
	}
	return false
}

func (x *KubeNodeCondition) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

type KubeNodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the node, will match device name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Status of the node
	Conditions []*KubeNodeCondition `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// Role of the node is server or not
	RoleServer bool `protobuf:"varint,3,opt,name=role_server,json=roleServer,proto3" json:"role_server,omitempty"`
	// Creation Time of the node in the cluster
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// Version of the API Server running on the node
	ApiServerSersion string `protobuf:"bytes,5,opt,name=api_server_sersion,json=apiServerSersion,proto3" json:"api_server_sersion,omitempty"`
	// Internal IP address of the node
	InternalIp  string `protobuf:"bytes,6,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	Schedulable bool   `protobuf:"varint,7,opt,name=schedulable,proto3" json:"schedulable,omitempty"`
	// Admission State of the local node in a cluster
	AdmissionStatus NodeAdmission `protobuf:"varint,8,opt,name=admission_status,json=admissionStatus,proto3,enum=org.lfedge.eve.info.NodeAdmission" json:"admission_status,omitempty"`
	// Id of the eve node matching config.EdgeDevConfig.id
	NodeId string `protobuf:"bytes,9,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *KubeNodeInfo) Reset() {
	*x = KubeNodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_edge_node_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeNodeInfo) ProtoMessage() {}

func (x *KubeNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_edge_node_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeNodeInfo.ProtoReflect.Descriptor instead.
func (*KubeNodeInfo) Descriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *KubeNodeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubeNodeInfo) GetConditions() []*KubeNodeCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *KubeNodeInfo) GetRoleServer() bool {
	if x != nil {
		return x.RoleServer
	}
	return false
}

func (x *KubeNodeInfo) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *KubeNodeInfo) GetApiServerSersion() string {
	if x != nil {
		return x.ApiServerSersion
	}
	return ""
}

func (x *KubeNodeInfo) GetInternalIp() string {
	if x != nil {
		return x.InternalIp
	}
	return ""
}

func (x *KubeNodeInfo) GetSchedulable() bool {
	if x != nil {
		return x.Schedulable
	}
	return false
}

func (x *KubeNodeInfo) GetAdmissionStatus() NodeAdmission {
	if x != nil {
		return x.AdmissionStatus
	}
	return NodeAdmission_NODE_ADMISSION_UNSPECIFIED
}

func (x *KubeNodeInfo) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type KubePodNameSpaceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the namespace
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Number of pods in the namespace
	PodCount uint32 `protobuf:"varint,2,opt,name=pod_count,json=podCount,proto3" json:"pod_count,omitempty"`
	// Number of pods in the namespace that are running
	PodRunningCount uint32 `protobuf:"varint,3,opt,name=pod_running_count,json=podRunningCount,proto3" json:"pod_running_count,omitempty"`
	// Number of pods in the namespace that are pending
	PodPendingCount uint32 `protobuf:"varint,4,opt,name=pod_pending_count,json=podPendingCount,proto3" json:"pod_pending_count,omitempty"`
	// Number of pods in the namespace that are failed
	PodFailedCount uint32 `protobuf:"varint,5,opt,name=pod_failed_count,json=podFailedCount,proto3" json:"pod_failed_count,omitempty"`
	// Number of pods in the namespace that are succeeded
	PodSucceededCount uint32 `protobuf:"varint,6,opt,name=pod_succeeded_count,json=podSucceededCount,proto3" json:"pod_succeeded_count,omitempty"`
}

func (x *KubePodNameSpaceInfo) Reset() {
	*x = KubePodNameSpaceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_edge_node_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubePodNameSpaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubePodNameSpaceInfo) ProtoMessage() {}

func (x *KubePodNameSpaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_edge_node_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubePodNameSpaceInfo.ProtoReflect.Descriptor instead.
func (*KubePodNameSpaceInfo) Descriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *KubePodNameSpaceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubePodNameSpaceInfo) GetPodCount() uint32 {
	if x != nil {
		return x.PodCount
	}
	return 0
}

func (x *KubePodNameSpaceInfo) GetPodRunningCount() uint32 {
	if x != nil {
		return x.PodRunningCount
	}
	return 0
}

func (x *KubePodNameSpaceInfo) GetPodPendingCount() uint32 {
	if x != nil {
		return x.PodPendingCount
	}
	return 0
}

func (x *KubePodNameSpaceInfo) GetPodFailedCount() uint32 {
	if x != nil {
		return x.PodFailedCount
	}
	return 0
}

func (x *KubePodNameSpaceInfo) GetPodSucceededCount() uint32 {
	if x != nil {
		return x.PodSucceededCount
	}
	return 0
}

type KubeEVEAppPodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the EVE application
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Application Status
	Status KubePodStatus `protobuf:"varint,2,opt,name=status,proto3,enum=org.lfedge.eve.info.KubePodStatus" json:"status,omitempty"`
	// Restart count of the application
	RestartCount uint32 `protobuf:"varint,3,opt,name=restart_count,json=restartCount,proto3" json:"restart_count,omitempty"`
	// Restart time of the application
	RestartTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=restart_timestamp,json=restartTimestamp,proto3" json:"restart_timestamp,omitempty"`
	// Creation Time of the application
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// IP address of the application, on cni0 interface
	IpAddress string `protobuf:"bytes,6,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Node name on which the application is running
	NodeName string `protobuf:"bytes,7,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *KubeEVEAppPodInfo) Reset() {
	*x = KubeEVEAppPodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_edge_node_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeEVEAppPodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeEVEAppPodInfo) ProtoMessage() {}

func (x *KubeEVEAppPodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_edge_node_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeEVEAppPodInfo.ProtoReflect.Descriptor instead.
func (*KubeEVEAppPodInfo) Descriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *KubeEVEAppPodInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubeEVEAppPodInfo) GetStatus() KubePodStatus {
	if x != nil {
		return x.Status
	}
	return KubePodStatus_KUBE_POD_STATUS_UNSPECIFIED
}

func (x *KubeEVEAppPodInfo) GetRestartCount() uint32 {
	if x != nil {
		return x.RestartCount
	}
	return 0
}

func (x *KubeEVEAppPodInfo) GetRestartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.RestartTimestamp
	}
	return nil
}

func (x *KubeEVEAppPodInfo) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *KubeEVEAppPodInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *KubeEVEAppPodInfo) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type KubeVolumeReplicaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the volume replica
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Node replica resides on, will match node name
	OwnerNode string `protobuf:"bytes,2,opt,name=owner_node,json=ownerNode,proto3" json:"owner_node,omitempty"`
	// Rebuild progress of the volume replica
	RebuildProgressPercentage uint32 `protobuf:"varint,3,opt,name=rebuild_progress_percentage,json=rebuildProgressPercentage,proto3" json:"rebuild_progress_percentage,omitempty"`
	// Replica status
	Status StorageVolumeReplicaStatus `protobuf:"varint,4,opt,name=status,proto3,enum=org.lfedge.eve.info.StorageVolumeReplicaStatus" json:"status,omitempty"`
}

func (x *KubeVolumeReplicaInfo) Reset() {
	*x = KubeVolumeReplicaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_edge_node_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeVolumeReplicaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeVolumeReplicaInfo) ProtoMessage() {}

func (x *KubeVolumeReplicaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_edge_node_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeVolumeReplicaInfo.ProtoReflect.Descriptor instead.
func (*KubeVolumeReplicaInfo) Descriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *KubeVolumeReplicaInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubeVolumeReplicaInfo) GetOwnerNode() string {
	if x != nil {
		return x.OwnerNode
	}
	return ""
}

func (x *KubeVolumeReplicaInfo) GetRebuildProgressPercentage() uint32 {
	if x != nil {
		return x.RebuildProgressPercentage
	}
	return 0
}

func (x *KubeVolumeReplicaInfo) GetStatus() StorageVolumeReplicaStatus {
	if x != nil {
		return x.Status
	}
	return StorageVolumeReplicaStatus_STORAGE_VOLUME_REPLICA_STATUS_UNSPECIFIED
}

type KubeVolumeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the volume
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Status of the volume attachment
	State StorageVolumeState `protobuf:"varint,2,opt,name=state,proto3,enum=org.lfedge.eve.info.StorageVolumeState" json:"state,omitempty"`
	// Robustness of the volume
	Robustness StorageVolumeRobustness `protobuf:"varint,3,opt,name=robustness,proto3,enum=org.lfedge.eve.info.StorageVolumeRobustness" json:"robustness,omitempty"`
	// Creation Time of the volume in the cluster
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// Provisioned size of the volume in bytes
	ProvisionedBytes uint64 `protobuf:"varint,5,opt,name=provisioned_bytes,json=provisionedBytes,proto3" json:"provisioned_bytes,omitempty"`
	// Allocated size of the volume in bytes
	AllocatedBytes uint64 `protobuf:"varint,6,opt,name=allocated_bytes,json=allocatedBytes,proto3" json:"allocated_bytes,omitempty"`
	// PV/PVC status of the volume
	PvcStatus StorageVolumePVCStatus `protobuf:"varint,7,opt,name=pvc_status,json=pvcStatus,proto3,enum=org.lfedge.eve.info.StorageVolumePVCStatus" json:"pvc_status,omitempty"`
	// Replicas of the volume
	Replica []*KubeVolumeReplicaInfo `protobuf:"bytes,8,rep,name=replica,proto3" json:"replica,omitempty"`
	// Robustness substate of the replication status of the volume
	RobustnessSubstate StorageHealthStatus `protobuf:"varint,9,opt,name=robustness_substate,json=robustnessSubstate,proto3,enum=org.lfedge.eve.info.StorageHealthStatus" json:"robustness_substate,omitempty"`
	// Id of the eve volume info.ZInfoVolume.uuid
	VolumeId string `protobuf:"bytes,10,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
}

func (x *KubeVolumeInfo) Reset() {
	*x = KubeVolumeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_edge_node_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeVolumeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeVolumeInfo) ProtoMessage() {}

func (x *KubeVolumeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_edge_node_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeVolumeInfo.ProtoReflect.Descriptor instead.
func (*KubeVolumeInfo) Descriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *KubeVolumeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubeVolumeInfo) GetState() StorageVolumeState {
	if x != nil {
		return x.State
	}
	return StorageVolumeState_STORAGE_VOLUME_STATE_UNSPECIFIED
}

func (x *KubeVolumeInfo) GetRobustness() StorageVolumeRobustness {
	if x != nil {
		return x.Robustness
	}
	return StorageVolumeRobustness_STORAGE_VOLUME_ROBUSTNESS_UNSPECIFIED
}

func (x *KubeVolumeInfo) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *KubeVolumeInfo) GetProvisionedBytes() uint64 {
	if x != nil {
		return x.ProvisionedBytes
	}
	return 0
}

func (x *KubeVolumeInfo) GetAllocatedBytes() uint64 {
	if x != nil {
		return x.AllocatedBytes
	}
	return 0
}

func (x *KubeVolumeInfo) GetPvcStatus() StorageVolumePVCStatus {
	if x != nil {
		return x.PvcStatus
	}
	return StorageVolumePVCStatus_STORAGE_VOLUME_PVC_STATUS_UNSPECIFIED
}

func (x *KubeVolumeInfo) GetReplica() []*KubeVolumeReplicaInfo {
	if x != nil {
		return x.Replica
	}
	return nil
}

func (x *KubeVolumeInfo) GetRobustnessSubstate() StorageHealthStatus {
	if x != nil {
		return x.RobustnessSubstate
	}
	return StorageHealthStatus_STORAGE_HEALTH_STATUS_UNSPECIFIED
}

func (x *KubeVolumeInfo) GetVolumeId() string {
	if x != nil {
		return x.VolumeId
	}
	return ""
}

type KubeStorageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Health of the distributes storage services
	Health ServiceStatus `protobuf:"varint,1,opt,name=health,proto3,enum=org.lfedge.eve.info.ServiceStatus" json:"health,omitempty"`
	// Time of the most recent health status transition
	TransitionTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=transition_time,json=transitionTime,proto3" json:"transition_time,omitempty"`
	// Status of all the volumes in Longhorn
	Volumes []*KubeVolumeInfo `protobuf:"bytes,3,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *KubeStorageInfo) Reset() {
	*x = KubeStorageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_edge_node_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeStorageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeStorageInfo) ProtoMessage() {}

func (x *KubeStorageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_edge_node_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeStorageInfo.ProtoReflect.Descriptor instead.
func (*KubeStorageInfo) Descriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *KubeStorageInfo) GetHealth() ServiceStatus {
	if x != nil {
		return x.Health
	}
	return ServiceStatus_SERVICE_STATUS_UNSPECIFIED
}

func (x *KubeStorageInfo) GetTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransitionTime
	}
	return nil
}

func (x *KubeStorageInfo) GetVolumes() []*KubeVolumeInfo {
	if x != nil {
		return x.Volumes
	}
	return nil
}

// KubeVMIInfo is the VMI status of eve VM apps
type KubeVMIInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the VirtualMachineInstance
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Status (VirtualMachineInstance.Status.Phase)
	Status KubeVMIStatus `protobuf:"varint,2,opt,name=status,proto3,enum=org.lfedge.eve.info.KubeVMIStatus" json:"status,omitempty"`
	// Creation Time of the VirtualMachineInstance
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// LastTransitionTime is the last time is_ready changed
	LastTransitionTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
	// IsReady is true if the VMI has a Ready Condition which is true
	IsReady bool `protobuf:"varint,5,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
	// NodeName is the current node (kubernetes.io/hostname) the VMI is running on
	NodeName string `protobuf:"bytes,6,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *KubeVMIInfo) Reset() {
	*x = KubeVMIInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_edge_node_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeVMIInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeVMIInfo) ProtoMessage() {}

func (x *KubeVMIInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_edge_node_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeVMIInfo.ProtoReflect.Descriptor instead.
func (*KubeVMIInfo) Descriptor() ([]byte, []int) {
	return file_info_edge_node_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *KubeVMIInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubeVMIInfo) GetStatus() KubeVMIStatus {
	if x != nil {
		return x.Status
	}
	return KubeVMIStatus_KUBE_VMI_STATUS_UNSPECIFIED
}

func (x *KubeVMIInfo) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *KubeVMIInfo) GetLastTransitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *KubeVMIInfo) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *KubeVMIInfo) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

var File_info_edge_node_cluster_proto protoreflect.FileDescriptor

var file_info_edge_node_cluster_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x4b, 0x75, 0x62, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c,
	0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x4c, 0x0a, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xaf, 0x03, 0x0a, 0x0c, 0x4b,
	0x75, 0x62, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x46, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x6f,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xf9, 0x01, 0x0a,
	0x14, 0x4b, 0x75, 0x62, 0x65, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x64, 0x5f, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x70, 0x6f, 0x64, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x64, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70,
	0x6f, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x6f, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6f, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x64, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x6f, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd8, 0x02, 0x0a, 0x11, 0x4b, 0x75, 0x62,
	0x65, 0x45, 0x56, 0x45, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x50, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x4b, 0x75, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x3e, 0x0a, 0x1b, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdc, 0x04, 0x0a, 0x0e, 0x4b, 0x75,
	0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4c, 0x0a, 0x0a, 0x72, 0x6f, 0x62, 0x75, 0x73, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x62, 0x75, 0x73, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x0a, 0x72, 0x6f, 0x62, 0x75, 0x73, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a,
	0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4a,
	0x0a, 0x0a, 0x70, 0x76, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x56, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x09, 0x70, 0x76, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x12, 0x59, 0x0a, 0x13, 0x72, 0x6f, 0x62, 0x75, 0x73, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x72, 0x6f, 0x62, 0x75, 0x73, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x4b, 0x75, 0x62,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0xa4, 0x02, 0x0a,
	0x0b, 0x4b, 0x75, 0x62, 0x65, 0x56, 0x4d, 0x49, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x56, 0x4d, 0x49, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x2a, 0x98, 0x02, 0x0a, 0x15, 0x4b, 0x75, 0x62, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x24, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4b, 0x55, 0x42, 0x45, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x4b,
	0x55, 0x42, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x55, 0x42,
	0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x10, 0x04,
	0x12, 0x2c, 0x0a, 0x28, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x2a, 0xa4,
	0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4a, 0x4f, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x99, 0x03, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a,
	0x21, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x45,
	0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01, 0x12, 0x42, 0x0a, 0x3e, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x5f, 0x32, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x46, 0x0a, 0x42, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x5f, 0x32, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x42, 0x0a, 0x3e, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x48,
	0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x44, 0x5f, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x46, 0x0a, 0x42, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x5f, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x06, 0x2a, 0x8e, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x1d, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c,
	0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x2a, 0xba, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x62, 0x75, 0x73, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x29,
	0x0a, 0x25, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45,
	0x5f, 0x52, 0x4f, 0x42, 0x55, 0x53, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x4f, 0x42, 0x55,
	0x53, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01,
	0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55,
	0x4d, 0x45, 0x5f, 0x52, 0x4f, 0x42, 0x55, 0x53, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x4f, 0x42, 0x55, 0x53,
	0x54, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0x86, 0x02, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x50, 0x56, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x56, 0x43,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x56, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x56, 0x43,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c,
	0x55, 0x4d, 0x45, 0x5f, 0x50, 0x56, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x56, 0x43,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f,
	0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x50, 0x56, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xd0, 0x02, 0x0a, 0x1a, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x28,
	0x0a, 0x24, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56,
	0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12,
	0x2a, 0x0a, 0x26, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x2a, 0xac, 0x02, 0x0a, 0x0d,
	0x4b, 0x75, 0x62, 0x65, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x1b, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4b,
	0x55, 0x42, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4b, 0x55, 0x42, 0x45,
	0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x55, 0x42, 0x45, 0x5f,
	0x50, 0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x25, 0x0a, 0x21, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x4f, 0x46, 0x46, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x50,
	0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x06, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1a,
	0x0a, 0x16, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x50, 0x4f, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x2a, 0x83, 0x01, 0x0a, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x03,
	0x2a, 0x86, 0x02, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x4b, 0x55, 0x42,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x55, 0x42, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x22,
	0x0a, 0x1e, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xab, 0x01, 0x0a, 0x08, 0x4b, 0x75,
	0x62, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4b,
	0x55, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x4b, 0x33, 0x53, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x55, 0x53, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x56, 0x49, 0x52, 0x54, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x43, 0x44, 0x49, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x4c, 0x4f, 0x4e,
	0x47, 0x48, 0x4f, 0x52, 0x4e, 0x10, 0x06, 0x2a, 0x81, 0x02, 0x0a, 0x0d, 0x4b, 0x75, 0x62, 0x65,
	0x56, 0x4d, 0x49, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x55, 0x42,
	0x45, 0x5f, 0x56, 0x4d, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x55,
	0x42, 0x45, 0x5f, 0x56, 0x4d, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x55, 0x42, 0x45, 0x5f,
	0x56, 0x4d, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4b, 0x55, 0x42, 0x45, 0x5f,
	0x56, 0x4d, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x56,
	0x4d, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x56, 0x4d, 0x49, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x56, 0x4d, 0x49, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1b,
	0x0a, 0x17, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x56, 0x4d, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x42, 0x39, 0x0a, 0x13, 0x6f,
	0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c,
	0x66, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x6f, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_info_edge_node_cluster_proto_rawDescOnce sync.Once
	file_info_edge_node_cluster_proto_rawDescData = file_info_edge_node_cluster_proto_rawDesc
)

func file_info_edge_node_cluster_proto_rawDescGZIP() []byte {
	file_info_edge_node_cluster_proto_rawDescOnce.Do(func() {
		file_info_edge_node_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_info_edge_node_cluster_proto_rawDescData)
	})
	return file_info_edge_node_cluster_proto_rawDescData
}

var file_info_edge_node_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_info_edge_node_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_info_edge_node_cluster_proto_goTypes = []interface{}{
	(KubeNodeConditionType)(0),      // 0: org.lfedge.eve.info.KubeNodeConditionType
	(NodeAdmission)(0),              // 1: org.lfedge.eve.info.NodeAdmission
	(StorageHealthStatus)(0),        // 2: org.lfedge.eve.info.StorageHealthStatus
	(StorageVolumeState)(0),         // 3: org.lfedge.eve.info.StorageVolumeState
	(StorageVolumeRobustness)(0),    // 4: org.lfedge.eve.info.StorageVolumeRobustness
	(StorageVolumePVCStatus)(0),     // 5: org.lfedge.eve.info.StorageVolumePVCStatus
	(StorageVolumeReplicaStatus)(0), // 6: org.lfedge.eve.info.StorageVolumeReplicaStatus
	(KubePodStatus)(0),              // 7: org.lfedge.eve.info.KubePodStatus
	(ServiceStatus)(0),              // 8: org.lfedge.eve.info.ServiceStatus
	(KubeCompUpdateStatus)(0),       // 9: org.lfedge.eve.info.KubeCompUpdateStatus
	(KubeComp)(0),                   // 10: org.lfedge.eve.info.KubeComp
	(KubeVMIStatus)(0),              // 11: org.lfedge.eve.info.KubeVMIStatus
	(*KubeNodeCondition)(nil),       // 12: org.lfedge.eve.info.KubeNodeCondition
	(*KubeNodeInfo)(nil),            // 13: org.lfedge.eve.info.KubeNodeInfo
	(*KubePodNameSpaceInfo)(nil),    // 14: org.lfedge.eve.info.KubePodNameSpaceInfo
	(*KubeEVEAppPodInfo)(nil),       // 15: org.lfedge.eve.info.KubeEVEAppPodInfo
	(*KubeVolumeReplicaInfo)(nil),   // 16: org.lfedge.eve.info.KubeVolumeReplicaInfo
	(*KubeVolumeInfo)(nil),          // 17: org.lfedge.eve.info.KubeVolumeInfo
	(*KubeStorageInfo)(nil),         // 18: org.lfedge.eve.info.KubeStorageInfo
	(*KubeVMIInfo)(nil),             // 19: org.lfedge.eve.info.KubeVMIInfo
	(*timestamppb.Timestamp)(nil),   // 20: google.protobuf.Timestamp
}
var file_info_edge_node_cluster_proto_depIdxs = []int32{
	0,  // 0: org.lfedge.eve.info.KubeNodeCondition.type:type_name -> org.lfedge.eve.info.KubeNodeConditionType
	20, // 1: org.lfedge.eve.info.KubeNodeCondition.last_transition_time:type_name -> google.protobuf.Timestamp
	12, // 2: org.lfedge.eve.info.KubeNodeInfo.conditions:type_name -> org.lfedge.eve.info.KubeNodeCondition
	20, // 3: org.lfedge.eve.info.KubeNodeInfo.creation_timestamp:type_name -> google.protobuf.Timestamp
	1,  // 4: org.lfedge.eve.info.KubeNodeInfo.admission_status:type_name -> org.lfedge.eve.info.NodeAdmission
	7,  // 5: org.lfedge.eve.info.KubeEVEAppPodInfo.status:type_name -> org.lfedge.eve.info.KubePodStatus
	20, // 6: org.lfedge.eve.info.KubeEVEAppPodInfo.restart_timestamp:type_name -> google.protobuf.Timestamp
	20, // 7: org.lfedge.eve.info.KubeEVEAppPodInfo.creation_timestamp:type_name -> google.protobuf.Timestamp
	6,  // 8: org.lfedge.eve.info.KubeVolumeReplicaInfo.status:type_name -> org.lfedge.eve.info.StorageVolumeReplicaStatus
	3,  // 9: org.lfedge.eve.info.KubeVolumeInfo.state:type_name -> org.lfedge.eve.info.StorageVolumeState
	4,  // 10: org.lfedge.eve.info.KubeVolumeInfo.robustness:type_name -> org.lfedge.eve.info.StorageVolumeRobustness
	20, // 11: org.lfedge.eve.info.KubeVolumeInfo.creation_timestamp:type_name -> google.protobuf.Timestamp
	5,  // 12: org.lfedge.eve.info.KubeVolumeInfo.pvc_status:type_name -> org.lfedge.eve.info.StorageVolumePVCStatus
	16, // 13: org.lfedge.eve.info.KubeVolumeInfo.replica:type_name -> org.lfedge.eve.info.KubeVolumeReplicaInfo
	2,  // 14: org.lfedge.eve.info.KubeVolumeInfo.robustness_substate:type_name -> org.lfedge.eve.info.StorageHealthStatus
	8,  // 15: org.lfedge.eve.info.KubeStorageInfo.health:type_name -> org.lfedge.eve.info.ServiceStatus
	20, // 16: org.lfedge.eve.info.KubeStorageInfo.transition_time:type_name -> google.protobuf.Timestamp
	17, // 17: org.lfedge.eve.info.KubeStorageInfo.volumes:type_name -> org.lfedge.eve.info.KubeVolumeInfo
	11, // 18: org.lfedge.eve.info.KubeVMIInfo.status:type_name -> org.lfedge.eve.info.KubeVMIStatus
	20, // 19: org.lfedge.eve.info.KubeVMIInfo.creation_time:type_name -> google.protobuf.Timestamp
	20, // 20: org.lfedge.eve.info.KubeVMIInfo.last_transition_time:type_name -> google.protobuf.Timestamp
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_info_edge_node_cluster_proto_init() }
func file_info_edge_node_cluster_proto_init() {
	if File_info_edge_node_cluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_info_edge_node_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeNodeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_edge_node_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeNodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_edge_node_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubePodNameSpaceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_edge_node_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeEVEAppPodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_edge_node_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeVolumeReplicaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_edge_node_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeVolumeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_edge_node_cluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeStorageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_edge_node_cluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeVMIInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_info_edge_node_cluster_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_info_edge_node_cluster_proto_goTypes,
		DependencyIndexes: file_info_edge_node_cluster_proto_depIdxs,
		EnumInfos:         file_info_edge_node_cluster_proto_enumTypes,
		MessageInfos:      file_info_edge_node_cluster_proto_msgTypes,
	}.Build()
	File_info_edge_node_cluster_proto = out.File
	file_info_edge_node_cluster_proto_rawDesc = nil
	file_info_edge_node_cluster_proto_goTypes = nil
	file_info_edge_node_cluster_proto_depIdxs = nil
}
