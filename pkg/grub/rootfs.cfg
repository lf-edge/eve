# Initiating EVE boot sequence
#
# This GRUB configuration file gets evaluated in 2 different contexts:
#    1. by a GRUB sitting next to it (in one of the EVE rootfs images)
#    2. as a GRUB's configfile argument of an external GRUB
# Either way, the goal of this file is to setup a few variables
# that would describe how to load at least a Hypervisor and/or Dom0
# (both of which are expected to reside in a rootfs next to each other).
#
# In addition to that, this configuration will also discover how to
# load required initramfs and devicetree files (the later only useful
# for ARM architecture).
#
# All of this is accomplished by probing the environment and recording
# our findings in a set of variables that get exported from this context
# or could be used directly by the default boot menuentry. A second menu
# entry allows for further customization of the same variables and happens
# to be a simple UI sugar on top of running GRUB's 'set' command explicitly.
#
# Finally, further customization of the same variables is possible if we
# detect either grub-hv.cfg next to whether this configuration came from OR
# we detect grub.cfg file in the CONFIG EVE partition. Both of these files
# will be 'source'd in sequence and they can provide final overrides for any
# kind of settings.
#
# Output variables (can NOT be longer than 20 characters)
#  load_hv_cmd          GRUB command to load a hypervisor
#  load_dom0_cmd        GRUB command to load Dom0
#  load_initrd_cmd      GRUB command to load initrd/initrootfs
#  load_devicetree_cmd  GRUB command to load a devicetree DTB file (ARM only)
#
#  hv                   hypervisor filename (rooted at either '/' or (XXX))
#  dom0                 Dom0 kernel filename (rooted at either '/' or (XXX))
#  initrd               initrd/initrootfs filename (rooted at either '/' or (XXX))
#  devicetree           devicetree filename (rooted at either '/' or (XXX))
#
#  hv_console           settings for having a viable hypervisor console output
#  hv_platform_tweaks   any kind of platform specific (hardware/etc.) hypervisor settings
#  hv_dom0_mem_settings Dom0 RAM settings (size, etc.)
#  hv_dom0_cpu_settings Dom0 CPU settings (how many cores are available, etc.)
#  hv_eve_mem_settings  EVE services RAM settings (Should be <= hv_dom0_mem_settings)
#  hv_eve_cpu_settings  EVE services CPU settings (Should be <= hv_dom0_cpu_settings)
#  hv_ctrd_mem_settings Containerd RAM settings (Should be <= hv_dom0_mem_settings)
#  hv_ctrd_cpu_settings Containerd CPU settings (Should be <= hv_dom0_cpu_settings)
#  hv_watchdog_timer    Sets EVE watchdog timer to monitor services
#  hv_extra_args        any additional hypervisor settings
#
#  dom0_console         settings for having a viable Dom0 console output
#  dom0_rootfs          pointer to a root filesystem we expect Dom0 to use
#  dom0_platform_tweaks any kind of platform specific (hardware/etc.) Dom0 settings
#  dom0_flavor_tweaks   any kind of flavor specific (kvm/xen) Dom0 settings
#  dom0_cmdline         additional static Dom0 settings (see linuxkit_cmdline below)
#  dom0_extra_args      additional dynamic Dom0 settings
#
# Note that when using override config files (either grub-hv.cfg or CONFIG/grub.cfg)
# it only makes sense to override the above output variables. Tweaking input and private
# variables (described below) will have absolutely 0 effect. The reverse is true for
# when this configfile is evaluated in the outside context. There you can only rely
# on setting input variables to affect behavior (and yes this is by design to limit
# what kind of control external context will have over this config file).
#
# Input variables (can NOT be longer than 20 characters)
#  eve_flavor           can set to be either xen, kvm or kubevirt to indicated required boot sequence
#  rootfs_root          name of a rootfilesystem recognizable by Dom0, if not set in the
#                       outer context, the default value will be dynamically discovered
#                       by running a partprobe command with an EVE rootfs UUID.
#  rootfs_title_suffix  a string that will be displayed as a suffix in the boot menu title
#  do_extra_submenus    name of a grub function -- if defined will be called to generate
#                       additional submenus in the Settings menu
#  dom0_extra_args      output variable with an initial value taken from the input
#  initrd               output variable with an initial value taken from the input

# Kernel behaviour on panic: seconds before rebooting
set panic_timeout="panic=120"

# Tweaking behaviour of GRUB itself (can be further tweaked by override settings)
# Note on gfxpayload: on most EFI platforms, setting gfxpayload is actually detrimental
# however, on BIOS platforms and weird archictetures make sure to experiment with it
# starting from: set gfxpayload=text
set timeout=5
set default=0
set pager=1

# the following variables are considered to be private and are not expected to be touched
set grub_virt=
set rootfs_title=EVE

function set_global {
   set $1="$2"
   export $1
}

function do_if_args {
   if [ -n "$2" ]; then
      "$@"
   fi
}

function set_to_existing_file {
  if [ -f "$2" ]; then
     set_global "$1" "$2"
  fi
}

function set_grub_virt {
   if [ "$arch" == "riscv64"]; then
     set_global grub_virt qemu
   else
      smbios -t 1 -s 0 --set smb_vendor
      if [ "$smb_vendor" == QEMU ]; then
         set_global grub_virt qemu
      elif [ "$smb_vendor" == Google ]; then
         set_global grub_virt qemu
      else
         set_global grub_virt baremetal
      fi
   fi
}

function set_rootfs_root {
   if [ -z "$rootfs_root" ]; then
      probe -s root_type --fs $root # do NOT try to probe netfs for part-uuid; grub crashes
      if [ "$root_type" != "netfs" ]; then
         measurefs $root --pcr 13
         probe --set partuuid --part-uuid $root
         set_global rootfs_root "PARTUUID=$partuuid"
      fi
   fi
}

function set_config_overrides {
  set self_dev="$cmddevice"
  if [ -z "$self_dev" ]; then
     set self_dev="$root"
  fi
  regexp --set self_drive "^([^,]*,)gpt" "$self_dev"
  if [ -n "$self_drive" ]; then
     search.part_label CONFIG config_part "$self_drive"
     if [ -n "$config_part" ]; then
        set_to_existing_file config_grub_cfg "($config_part)/grub.cfg"
        if [ "$grub_virt" != qemu ]; then
           set_to_existing_file devicetree "($config_part)/eve.dtb"
        fi
     fi
  fi
}

function set_rootfs_title {
   cat -s rootfs_title ($root)/etc/eve-release
}

function set_generic {
   set_global hv_dom0_cpu_settings "dom0_max_vcpus=1 dom0_vcpus_pin"
   set_global hv_eve_cpu_settings "eve_max_vcpus=1"
   #temporarily increase memory settings for kubevirt
   if [ "$eve_flavor" = "kubevirt" ]; then
      set_global hv_dom0_mem_settings "dom0_mem=6400M,max:8000M"
      set_global hv_eve_mem_settings "eve_mem=5200M,max:6500M"
      set_global hv_ctrd_mem_settings "ctrd_mem=3200M,max:4000M"
   else
      set_global hv_dom0_mem_settings "dom0_mem=640M,max:800M"
      set_global hv_eve_mem_settings "eve_mem=520M,max:650M"
      set_global hv_ctrd_mem_settings "ctrd_mem=320M,max:400M"
   fi
   set_global hv_ctrd_cpu_settings "ctrd_max_vcpus=1"
   set_global hv_platform_tweaks "smt=false"
   set_global hv_watchdog_timer "change=500"
   set_global hv_extra_args "$hv_extra_args"

   set_global dom0 /boot/kernel
   set_global dom0_rootfs "root=$rootfs_root"
   set_global dom0_cmdline "$linuxkit_cmdline $panic_timeout rfkill.default_state=0 split_lock_detect=off"
}

function set_x86_64 {
   set_global load_hv_cmd multiboot2
   set_global load_dom0_cmd module2
   set_global load_initrd_cmd module2
   set_global hv /boot/xen.gz
}

function set_x86_64_baremetal {
   set_generic
   set_x86_64
   set_global hv_console "console=vga"
   set_global hv_platform_tweaks "$hv_platform_tweaks efi=attr=uc"
   set_global dom0_platform_tweaks " "
   set_global dom0_console "console=tty0"

   # experimental feature where we're trying to provide workarounds based
   # on well known vendor/product pairs from SMBIOS. This may appear harmless
   # but we need to make sure that we don't see coredumps on weird SMBIOS
   # implementations
   smbios -t 1 -s 0 --set smb_vendor
   if [ "$smb_vendor" = "HPE" ]; then
      smbios -t 1 -s 5 --set smb_product
      if [ "$smb_product" = "ProLiant DL360 Gen10" -o "$smb_product" = "ProLiant m750 Server Blade" ]; then
         set_global hv_platform_tweaks "$hv_platform_tweaks cmos-rtc-probe=1"
      fi
      # On m750 BAR registers are not correctly reassigned by Linux
      # if there are devices with 64bit BARs. Using UEFI assignments
      if regexp -- "m750" "$smb_product"; then
         set_global dom0_platform_tweaks "$dom0_platform_tweaks pci=realloc=off"
      fi
   fi
   if [ "$smb_vendor" = "Kontron America" ]; then
      smbios -t 1 -s 5 --set smb_product
      # switch ttyXRUSB2/3 to RS485 Half-Duplex mode
      if regexp -- "Agora Gateway" "$smb_product"; then
         set_global dom0_platform_tweaks "$dom0_platform_tweaks xr_usb_serial_common.mode=2h,3h"
      fi
   fi
   if [ "$smb_vendor" = "SIEMENS AG" ]; then
      smbios -t 1 -s 5 --set smb_product
      if [ "$smb_product" = "SIMATIC IPC227G" ]; then
         set_global dom0_platform_tweaks "$dom0_platform_tweaks modprobe.blacklist=wdat_wdt"
      fi
   fi
   set_global ucode /boot/ucode.img
}

function set_x86_64_qemu {
   set_generic
   set_x86_64
   set_global hv_console "console=com1"
   set_global hv_platform_tweaks "$hv_platform_tweaks clocksource=pit"
   set_global dom0_platform_tweaks "clocksource=tsc clocksource_failover=xen"
   set_global dom0_console "console=ttyS0 console=hvc0"
}

function set_arm64 {
   set_global load_hv_cmd xen_hypervisor
   set_global load_dom0_cmd xen_module
   set_global load_initrd_cmd xen_module
   set_global load_devicetree_cmd devicetree
   set_global hv /boot/xen.efi
   set_global hv_console "console=dtuart sync_console"
   set_global hv_platform_tweaks " "
   set_global dom0_console "console=tty0 console=ttyS0,115200 console=hvc0"
}

function set_arm64_baremetal {
   set_generic
   set_arm64
   set_global dom0_platform_tweaks " "

   # experimental feature where we're trying to find known device trees on ARM
   # note that we would rather rely on UEFI providing device tree information,
   # but sometimes this can be useful and besides it is only triggered on well
   # known IDs of products below:
   smbios -t 1 -s 0 --set smb_vendor
   if [ "$smb_vendor" = "nvidia" ]; then
      smbios -t 1 -s 5 --set smb_product
      if [ "$smb_product" = "p3450-0000" ]; then
         set_to_existing_file devicetree /boot/dtb/nvidia/tegra210-p3450-0000.dtb
      fi
   fi
   if [ "$smb_vendor" = "raspberrypi" ]; then
      smbios -t 1 -s 5 --set smb_product
      if [ "$smb_product" = "rpi" ]; then
         set_to_existing_file devicetree /boot/dtb/broadcom/bcm2711-rpi-4-b.dtb
      elif [ "$smb_product" = "uno-220" ]; then
         set_to_existing_file devicetree /boot/dtb/broadcom/raspberrypi-uno-220.dtb
      fi
   fi
   if [ "$smb_vendor" = "Huawei" ]; then
      smbios -t 1 -s 5 --set smb_product
      # turns out smb_product contains non-printable characters
      # this makes grepping for XR320 our best option
      if regexp -- "XR320" "$smb_product"; then
         set_global dom0_console "console=ttyAMA0,115200n8"
         set_global dom0_platform_tweaks "pcie_aspm=off pci=pcie_bus_perf"
      fi
   fi
   if [ "$smb_vendor" = "rockchip" ]; then
      smbios -t 1 -s 5 --set smb_product
      if [ "$smb_product" = "evb_rk3399" ]; then
         set_to_existing_file devicetree /boot/dtb/rockchip/rockchip-evb_rk3399.dtb
         set_global dom0_console "console=ttyS2 console=ttyS2,115200n8"
         set_global dom0_platform_tweaks "video=HDMI-A-1 coherent_pool=1M drm.debug=0x04"
      fi
   fi
   if [ "$smb_vendor" = "fsl" ]; then
      smbios -t 1 -s 5 --set smb_product
      if [ "$smb_product" = "imx8mq-evk" ]; then
         set_to_existing_file devicetree /boot/dtb/freescale/imx8mq-evk.dtb
         set_global dom0_console "console=ttymxc0,115200 earlycon=ec_imx6q,0x30860000,115200"
      fi
   fi
   if [ "$smb_vendor" = "phytec" ]; then
      smbios -t 1 -s 5 --set smb_product
      if [ "$smb_product" = "pollux" ]; then
         set_to_existing_file devicetree /boot/dtb/freescale/imx8mp-phyboard-pollux-rdk.dtb
         set_global dom0_console "console=tty0 console=hvc0 console=ttymxc0,115200 earlycon=ec_imx6q,0x30860000,115200"
      fi
   fi
   if [ "$smb_vendor" = "advantech" ]; then
      smbios -t 1 -s 5 --set smb_product
      if [ "$smb_product" = "imx8mp_rsb3720a1" ]; then
         set_to_existing_file devicetree /boot/dtb/freescale/imx8mp-rsb3720-a1.dtb
         set_global dom0_console "console=tty0 console=hvc0 console=ttymxc2,115200 earlycon=ec_imx6q,0x30880000,115200"
      fi
   fi
   # Nvidia's Jetson Xavier NX developer kit (variant identified by the Asset-Tag)
   smbios -t 1 -s 5 --set smb_product
   if [ "$smb_product" = "NVIDIA Jetson Xavier NX Developer Kit" ]; then
      set_global dom0_platform_tweaks "fbcon=map:0 eve_install_disk=nvme0n1"
      smbios -t 3 -s 8 --set asset_tag
      if regexp -- "699-.?3668-0001-.*" "$asset_tag"; then
          if regexp -- "699-13668-0001-.*" "$asset_tag"; then
              set_to_existing_file devicetree /boot/dtb/nvidia/tegra194-siemens-ipc520a.dtb
              set_global dom0_console "console=tty0 earlycon=tty0"
              set_global dom0_platform_tweaks "fbcon=map:0 video=efifb:off pci=noaer usbcore.warm_reset_workaround=1 eve_nuke_disks=mmcblk0 eve_install_disk=nvme0n1"
          else
              set_to_existing_file devicetree /boot/dtb/nvidia/tegra194-p3668-0001-p3509-0000.dtb
              set_global dom0_console "console=tty0 earlycon=tty0"
              set_global dom0_platform_tweaks "video=efifb:off"
          fi
      else
          set_to_existing_file devicetree /boot/dtb/nvidia/tegra194-p3668-0000-p3509-0000.dtb
          set_global dom0_console "console=ttyTCU0,115200 console=tty0 earlycon=ttyTCU0,115200"
          set_global dom0_platform_tweaks "video=efifb:off"
      fi
   fi
   # Lenovo ThinkEdge SE70 (Jetson Xavier NX platform)
   if [ "$smb_product" = "ThinkEdge SE70 (NVIDIA Jetson Xavier NX)" ]; then
      set_to_existing_file devicetree /boot/dtb/nvidia/tegra194-p3668-0001-p3509-0000-lenovo-se70.dtb
      set_global dom0_console "console=tty0 earlycon=tty0"
      set_global dom0_platform_tweaks "fbcon=map:0 eve_nuke_disks=mmcblk0 eve_install_disk=nvme0n1 video=efifb:off"
   fi
   # Jetson Orin Nano Developer Kit
   if [ "$smb_product" = "NVIDIA Orin Nano Developer Kit" ]; then
      set_to_existing_file devicetree /boot/dtb/nvidia/tegra234-p3767-0003-p3768-0000-a0.dtb
      set_global dom0_console "console=ttyAMA0,115200 console=tty0 console=ttyTCU0,115200 earlycon=ttyTCU0,115200"
      set_global dom0_platform_tweaks "fbcon=map:0 video=efifb:off nospectre_bhb"
   fi
}

function set_arm64_qemu {
   set_generic
   set_arm64
   set_global dom0_console "$dom0_console console=ttyAMA0"
   set_global dom0_platform_tweaks "hmp-unsafe=true"
   # if running under QEMU, make sure to check dynamic partition for device trees
   search.fs_label QEMU_DTB qemu_part
   set_to_existing_file devicetree "($qemu_part)/eve.dtb"
}

function set_riscv64 {
   set_global load_hv_cmd mini_hypervisor
   set_global load_dom0_cmd mini_module
   set_global load_initrd_cmd mini_module
   set_global load_devicetree_cmd devicetree
   set_global hv /boot/mini.efi
   set_global hv_console "console=dtuart sync_console"
   set_global hv_platform_tweaks " "
   set_global dom0_console "console=tty0 console=ttyS0,115200 console=hvc0"
}

function set_riscv64_baremetal {
   set_generic
   set_riscv64
   set_global dom0_platform_tweaks " "
}

function set_riscv64_qemu {
   set_generic
   set_riscv64
   set_global dom0_console "$dom0_console console=ttyAMA0"
   set_global dom0_platform_tweaks "hmp-unsafe=true"
   # if running under QEMU, make sure to check dynamic partition for device trees
   search.fs_label QEMU_DTB qemu_part
   set_to_existing_file devicetree "($qemu_part)/eve.dtb"
}

function set_kvm_boot {
   set_global load_hv_cmd true
   set_global load_dom0_cmd linux
   set_global load_initrd_cmd initrd
   set_global dom0_flavor_tweaks "pcie_acs_override=downstream,multifunction"
   if [ "$arch" = "x86_64" ]; then
      set_global dom0_flavor_tweaks "$dom0_flavor_tweaks crashkernel=2G-16G:128M,16G-128G:256M,128G-:512M"
   fi
   # this may strike readers as circular, but it really isn't
   # the reason we have to also set eve_flavor to kvm here is
   # that it used to be that set_kvm_boot was a sanctioned way
   # to flip to KVM boot sequence. IOW, it used to be an elaborate
   # way to setup the value of eve_flavor and we need to keep it
   # like that for now.
   set_global eve_flavor kvm
}

function set_xen_boot {
   set_global dom0_flavor_tweaks " "
   # see the set_global eve_flavor kvm comment in set_kvm_boot
   set_global eve_flavor xen
}

function set_kubevirt_boot {
   set_global load_hv_cmd true
   set_global load_dom0_cmd linux
   set_global load_initrd_cmd initrd
   set_global dom0_flavor_tweaks "pcie_acs_override=downstream,multifunction"
   if [ "$arch" = "x86_64" ]; then
      set_global dom0_flavor_tweaks "$dom0_flavor_tweaks crashkernel=2G-16G:128M,16G-128G:256M,128G-:512M"
   fi
   # see the set_global eve_flavor kvm comment in set_kvm_boot
   set_global eve_flavor kubevirt
}

function set_eve_flavor {
   # don't overwrite as the XEN installer still uses KVM (and sets it explicitly)
   if [ "$eve_flavor" = "" ] ; then
       cat -s eve_flavor ($root)/etc/eve-hv-type
   fi
}

function set_getty {
      set_global dom0_extra_args "$dom0_extra_args getty"
}

function set_isolcpus {
   # the 'inverse' is our own flag, see details here:
   # https://github.com/lf-edge/eve-kernel/pull/90
   set_global dom0_extra_args "$dom0_extra_args isolcpus=inverse,0 nohz_full=inverse,0"
}

set arch=${grub_cpu}
if [ "$arch" = "i386" ]; then
   # grub CPU i386 means we are running in legacy BIOS mode
   # but we can still use configuration from x86_64
   arch=x86_64
fi

# if we have include files, include them
set grubinclude="($root)/EFI/BOOT/grub_include.cfg"
if [ -f ${grubinclude} ]; then
   echo "Including ${grubinclude}"
   configfile ${grubinclude}
fi

if [ -f ($root)/boot/cmdline ]; then
   echo "Setting linuxkit_cmdline from ($root)/boot/cmdline"
   cat -s linuxkit_cmdline ($root)/boot/cmdline
fi

set_grub_virt
set_rootfs_root
set_rootfs_title
set_eve_flavor
set_${arch}_${grub_virt}

# now set a few override file names (if files exist)
set_config_overrides
set_to_existing_file efi_grub_cfg "/EFI/BOOT/grub-hv.cfg"

# setup bootflow per EVE's flavor
set_${eve_flavor}_boot

# process the overrides
do_if_args source $efi_grub_cfg
do_if_args source $config_grub_cfg

menuentry "Boot ${rootfs_title}${rootfs_title_suffix}" {
     $load_hv_cmd $hv $hv_console $hv_platform_tweaks $hv_dom0_mem_settings $hv_dom0_cpu_settings $hv_extra_args
     $load_dom0_cmd $dom0 $dom0_console $dom0_rootfs $hv_dom0_mem_settings $hv_dom0_cpu_settings $hv_eve_mem_settings $hv_eve_cpu_settings $hv_ctrd_mem_settings $hv_ctrd_cpu_settings $hv_watchdog_timer $dom0_platform_tweaks $dom0_flavor_tweaks $dom0_cmdline $dom0_extra_args
     do_if_args $load_devicetree_cmd $devicetree
     # ucode initrd image must be the first!
     do_if_args $load_initrd_cmd $ucode
     do_if_args $load_initrd_cmd $initrd
}

submenu 'Set Boot Options' {
   menuentry 'force serial console on x86/baremetal com1' {
      set_global hv_console "com1=115200,8n1 console=com1"
      set_global dom0_console "console=hvc0"
   }

   menuentry 'set x86/baremetal boot options' {
      set_x86_64_baremetal
   }

   menuentry 'set x86/qemu boot options' {
      set_x86_64_qemu
   }

   menuentry 'set ARM/baremetal boot options' {
      set_arm64_baremetal
   }

   menuentry 'set ARM/qemu boot options' {
      set_arm64_qemu
   }

   menuentry 'set RISCV/baremetal boot options' {
      set_riscv64_baremetal
   }

   menuentry 'set RISCV/qemu boot options' {
      set_riscv64_qemu
   }

   menuentry 'skip hypervisor booting' {
      set_kvm_boot
   }

   menuentry 'enable getty' {
      set_getty
   }

   menuentry 'isolate CPU0 (only for PREEMPT_RT)' {
      set_isolcpus
   }

   menuentry 'unset dom0_extra_args' {
      set_global dom0_extra_args " "
   }

   menuentry 'show boot options' {
      set_global zboot1 "$load_hv_cmd $hv $hv_console $hv_platform_tweaks $hv_dom0_mem_settings $hv_dom0_cpu_settings $hv_extra_args"
      set_global zboot2 "$load_dom0_cmd $dom0 $dom0_console $dom0_rootfs $hv_dom0_mem_settings $hv_dom0_cpu_settings $hv_eve_mem_settings $hv_eve_cpu_settings $hv_ctrd_mem_settings $hv_ctrd_cpu_settings $hv_watchdog_timer $dom0_platform_tweaks $dom0_flavor_tweaks $dom0_cmdline $dom0_extra_args"
      set_global zboot3 "do_if_args $load_devicetree_cmd $devicetree"
      set_global zboot4 "do_if_args $load_initrd_cmd $initrd"
   }

   if [ -n "$do_extra_submenus" ]; then
      $do_extra_submenus
   fi
}
