// Copyright(c) 2025 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: metrics/nestedappruntimemetrics.proto

package metrics

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FsUsedMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allocated and Written MB of the filesystem
	UsedMb float64 `protobuf:"fixed64,1,opt,name=used_mb,json=usedMb,proto3" json:"used_mb,omitempty"`
	// Allocated space.  eg. thinly allocated, sparse files MB not yet written
	AllocatedMb float64 `protobuf:"fixed64,2,opt,name=allocated_mb,json=allocatedMb,proto3" json:"allocated_mb,omitempty"`
}

func (x *FsUsedMetric) Reset() {
	*x = FsUsedMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_nestedappruntimemetrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FsUsedMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FsUsedMetric) ProtoMessage() {}

func (x *FsUsedMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_nestedappruntimemetrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FsUsedMetric.ProtoReflect.Descriptor instead.
func (*FsUsedMetric) Descriptor() ([]byte, []int) {
	return file_metrics_nestedappruntimemetrics_proto_rawDescGZIP(), []int{0}
}

func (x *FsUsedMetric) GetUsedMb() float64 {
	if x != nil {
		return x.UsedMb
	}
	return 0
}

func (x *FsUsedMetric) GetAllocatedMb() float64 {
	if x != nil {
		return x.AllocatedMb
	}
	return 0
}

// NestedAppRuntimeDiskMetric object to serve as a metric for
// a runtime's persistent filesystem shared by many child nested app instances.
// A single NestedAppRuntimeDiskMetric will be returned from
// GET /api/v1/storagemetrics/runtime for each app instance where
// AppInstanceConfig.runtime_type!=APP_RUNTIME_TYPE_UNSPECIFIED
type NestedAppRuntimeDiskMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the runtime app instance
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Total size of the persistent filesystem attached to the runtime.
	TotalMb float64 `protobuf:"fixed64,2,opt,name=total_mb,json=totalMb,proto3" json:"total_mb,omitempty"`
	// Allocated and Written MB of the filesystem.  dependent used + runtime overhead.
	UsedMb float64 `protobuf:"fixed64,3,opt,name=used_mb,json=usedMb,proto3" json:"used_mb,omitempty"`
	// Allocated space.  eg. thinly allocated, sparse files MB not yet written. dependent allocated + runtime overhead.
	AllocatedMb float64 `protobuf:"fixed64,4,opt,name=allocated_mb,json=allocatedMb,proto3" json:"allocated_mb,omitempty"`
	// Key is a nested app instance id running on the runtime.
	// FsUsedMetric will contain the combined filesystem usage of all
	// containers which are associated with a nested app.
	// eg. APP_RUNTIME_TYPE_DOCKER may deploy a nested app which
	// provisions multiple volumes as sub directories of the persistent
	// filesystem in the runtime.
	// This space will also include any persistent filesystem space
	// used by container images associated with the nested app.
	DependentSpaceMb map[string]*FsUsedMetric `protobuf:"bytes,5,rep,name=dependent_space_mb,json=dependentSpaceMb,proto3" json:"dependent_space_mb,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NestedAppRuntimeDiskMetric) Reset() {
	*x = NestedAppRuntimeDiskMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_nestedappruntimemetrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedAppRuntimeDiskMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedAppRuntimeDiskMetric) ProtoMessage() {}

func (x *NestedAppRuntimeDiskMetric) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_nestedappruntimemetrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedAppRuntimeDiskMetric.ProtoReflect.Descriptor instead.
func (*NestedAppRuntimeDiskMetric) Descriptor() ([]byte, []int) {
	return file_metrics_nestedappruntimemetrics_proto_rawDescGZIP(), []int{1}
}

func (x *NestedAppRuntimeDiskMetric) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *NestedAppRuntimeDiskMetric) GetTotalMb() float64 {
	if x != nil {
		return x.TotalMb
	}
	return 0
}

func (x *NestedAppRuntimeDiskMetric) GetUsedMb() float64 {
	if x != nil {
		return x.UsedMb
	}
	return 0
}

func (x *NestedAppRuntimeDiskMetric) GetAllocatedMb() float64 {
	if x != nil {
		return x.AllocatedMb
	}
	return 0
}

func (x *NestedAppRuntimeDiskMetric) GetDependentSpaceMb() map[string]*FsUsedMetric {
	if x != nil {
		return x.DependentSpaceMb
	}
	return nil
}

var File_metrics_nestedappruntimemetrics_proto protoreflect.FileDescriptor

var file_metrics_nestedappruntimemetrics_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x61, 0x70, 0x70, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22,
	0x4a, 0x0a, 0x0c, 0x46, 0x73, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x62, 0x22, 0xea, 0x02, 0x0a, 0x1a,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x64,
	0x4d, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x62, 0x12, 0x76, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x41, 0x70, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x4d, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x62, 0x1a, 0x69, 0x0a,
	0x15, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4d,
	0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x46, 0x73, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x3f, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x2e,
	0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c,
	0x66, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_metrics_nestedappruntimemetrics_proto_rawDescOnce sync.Once
	file_metrics_nestedappruntimemetrics_proto_rawDescData = file_metrics_nestedappruntimemetrics_proto_rawDesc
)

func file_metrics_nestedappruntimemetrics_proto_rawDescGZIP() []byte {
	file_metrics_nestedappruntimemetrics_proto_rawDescOnce.Do(func() {
		file_metrics_nestedappruntimemetrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_metrics_nestedappruntimemetrics_proto_rawDescData)
	})
	return file_metrics_nestedappruntimemetrics_proto_rawDescData
}

var file_metrics_nestedappruntimemetrics_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_metrics_nestedappruntimemetrics_proto_goTypes = []interface{}{
	(*FsUsedMetric)(nil),               // 0: org.lfedge.eve.metrics.FsUsedMetric
	(*NestedAppRuntimeDiskMetric)(nil), // 1: org.lfedge.eve.metrics.NestedAppRuntimeDiskMetric
	nil,                                // 2: org.lfedge.eve.metrics.NestedAppRuntimeDiskMetric.DependentSpaceMbEntry
}
var file_metrics_nestedappruntimemetrics_proto_depIdxs = []int32{
	2, // 0: org.lfedge.eve.metrics.NestedAppRuntimeDiskMetric.dependent_space_mb:type_name -> org.lfedge.eve.metrics.NestedAppRuntimeDiskMetric.DependentSpaceMbEntry
	0, // 1: org.lfedge.eve.metrics.NestedAppRuntimeDiskMetric.DependentSpaceMbEntry.value:type_name -> org.lfedge.eve.metrics.FsUsedMetric
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_metrics_nestedappruntimemetrics_proto_init() }
func file_metrics_nestedappruntimemetrics_proto_init() {
	if File_metrics_nestedappruntimemetrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metrics_nestedappruntimemetrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FsUsedMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_nestedappruntimemetrics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedAppRuntimeDiskMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metrics_nestedappruntimemetrics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metrics_nestedappruntimemetrics_proto_goTypes,
		DependencyIndexes: file_metrics_nestedappruntimemetrics_proto_depIdxs,
		MessageInfos:      file_metrics_nestedappruntimemetrics_proto_msgTypes,
	}.Build()
	File_metrics_nestedappruntimemetrics_proto = out.File
	file_metrics_nestedappruntimemetrics_proto_rawDesc = nil
	file_metrics_nestedappruntimemetrics_proto_goTypes = nil
	file_metrics_nestedappruntimemetrics_proto_depIdxs = nil
}
