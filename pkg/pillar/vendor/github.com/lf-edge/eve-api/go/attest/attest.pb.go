// Copyright(c) 2020 Zededa, Inc.
// All rights reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: attest/attest.proto

package attest

import (
	certs "github.com/lf-edge/eve-api/go/certs"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ZAttestReqType int32

const (
	ZAttestReqType_ATTEST_REQ_NONE              ZAttestReqType = 0
	ZAttestReqType_ATTEST_REQ_CERT              ZAttestReqType = 1 //EVE X.509 certificates
	ZAttestReqType_ATTEST_REQ_NONCE             ZAttestReqType = 2 //nonce request to Controller
	ZAttestReqType_ATTEST_REQ_QUOTE             ZAttestReqType = 3 //quote msg
	ZAttestReqType_Z_ATTEST_REQ_TYPE_STORE_KEYS ZAttestReqType = 4 //to store device keys in Controller
)

// Enum value maps for ZAttestReqType.
var (
	ZAttestReqType_name = map[int32]string{
		0: "ATTEST_REQ_NONE",
		1: "ATTEST_REQ_CERT",
		2: "ATTEST_REQ_NONCE",
		3: "ATTEST_REQ_QUOTE",
		4: "Z_ATTEST_REQ_TYPE_STORE_KEYS",
	}
	ZAttestReqType_value = map[string]int32{
		"ATTEST_REQ_NONE":              0,
		"ATTEST_REQ_CERT":              1,
		"ATTEST_REQ_NONCE":             2,
		"ATTEST_REQ_QUOTE":             3,
		"Z_ATTEST_REQ_TYPE_STORE_KEYS": 4,
	}
)

func (x ZAttestReqType) Enum() *ZAttestReqType {
	p := new(ZAttestReqType)
	*p = x
	return p
}

func (x ZAttestReqType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZAttestReqType) Descriptor() protoreflect.EnumDescriptor {
	return file_attest_attest_proto_enumTypes[0].Descriptor()
}

func (ZAttestReqType) Type() protoreflect.EnumType {
	return &file_attest_attest_proto_enumTypes[0]
}

func (x ZAttestReqType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZAttestReqType.Descriptor instead.
func (ZAttestReqType) EnumDescriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{0}
}

type ZAttestRespType int32

const (
	ZAttestRespType_ATTEST_RESP_NONE              ZAttestRespType = 0
	ZAttestRespType_ATTEST_RESP_CERT              ZAttestRespType = 1 //response to cert msg
	ZAttestRespType_ATTEST_RESP_NONCE             ZAttestRespType = 2 //response to quote request
	ZAttestRespType_ATTEST_RESP_QUOTE_RESP        ZAttestRespType = 3 //response to quote msg
	ZAttestRespType_Z_ATTEST_RESP_TYPE_STORE_KEYS ZAttestRespType = 4 //response to Z_ATTEST_REQ_TYPE_STORE_KEYS
)

// Enum value maps for ZAttestRespType.
var (
	ZAttestRespType_name = map[int32]string{
		0: "ATTEST_RESP_NONE",
		1: "ATTEST_RESP_CERT",
		2: "ATTEST_RESP_NONCE",
		3: "ATTEST_RESP_QUOTE_RESP",
		4: "Z_ATTEST_RESP_TYPE_STORE_KEYS",
	}
	ZAttestRespType_value = map[string]int32{
		"ATTEST_RESP_NONE":              0,
		"ATTEST_RESP_CERT":              1,
		"ATTEST_RESP_NONCE":             2,
		"ATTEST_RESP_QUOTE_RESP":        3,
		"Z_ATTEST_RESP_TYPE_STORE_KEYS": 4,
	}
)

func (x ZAttestRespType) Enum() *ZAttestRespType {
	p := new(ZAttestRespType)
	*p = x
	return p
}

func (x ZAttestRespType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZAttestRespType) Descriptor() protoreflect.EnumDescriptor {
	return file_attest_attest_proto_enumTypes[1].Descriptor()
}

func (ZAttestRespType) Type() protoreflect.EnumType {
	return &file_attest_attest_proto_enumTypes[1]
}

func (x ZAttestRespType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZAttestRespType.Descriptor instead.
func (ZAttestRespType) EnumDescriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{1}
}

// Hash algo used in digests, and PCR Extend operations
type TpmHashAlgo int32

const (
	TpmHashAlgo_TPM_HASH_ALGO_INVALID TpmHashAlgo = 0
	TpmHashAlgo_TPM_HASH_ALGO_SHA1    TpmHashAlgo = 1
	TpmHashAlgo_TPM_HASH_ALGO_SHA256  TpmHashAlgo = 2
	TpmHashAlgo_TPM_HASH_ALGO_SHA512  TpmHashAlgo = 3
)

// Enum value maps for TpmHashAlgo.
var (
	TpmHashAlgo_name = map[int32]string{
		0: "TPM_HASH_ALGO_INVALID",
		1: "TPM_HASH_ALGO_SHA1",
		2: "TPM_HASH_ALGO_SHA256",
		3: "TPM_HASH_ALGO_SHA512",
	}
	TpmHashAlgo_value = map[string]int32{
		"TPM_HASH_ALGO_INVALID": 0,
		"TPM_HASH_ALGO_SHA1":    1,
		"TPM_HASH_ALGO_SHA256":  2,
		"TPM_HASH_ALGO_SHA512":  3,
	}
)

func (x TpmHashAlgo) Enum() *TpmHashAlgo {
	p := new(TpmHashAlgo)
	*p = x
	return p
}

func (x TpmHashAlgo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TpmHashAlgo) Descriptor() protoreflect.EnumDescriptor {
	return file_attest_attest_proto_enumTypes[2].Descriptor()
}

func (TpmHashAlgo) Type() protoreflect.EnumType {
	return &file_attest_attest_proto_enumTypes[2]
}

func (x TpmHashAlgo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TpmHashAlgo.Descriptor instead.
func (TpmHashAlgo) EnumDescriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{2}
}

type AttestGPSInput int32

const (
	AttestGPSInput_ATTEST_GPS_INPUT_INVALID AttestGPSInput = 0
	AttestGPSInput_ATTEST_GPS_INPUT_PRESENT AttestGPSInput = 1 //GPS Coordinates are available
	AttestGPSInput_ATTEST_GPS_INPUT_ABSENT  AttestGPSInput = 2 //GPS Coordinates are not available/reliable
)

// Enum value maps for AttestGPSInput.
var (
	AttestGPSInput_name = map[int32]string{
		0: "ATTEST_GPS_INPUT_INVALID",
		1: "ATTEST_GPS_INPUT_PRESENT",
		2: "ATTEST_GPS_INPUT_ABSENT",
	}
	AttestGPSInput_value = map[string]int32{
		"ATTEST_GPS_INPUT_INVALID": 0,
		"ATTEST_GPS_INPUT_PRESENT": 1,
		"ATTEST_GPS_INPUT_ABSENT":  2,
	}
)

func (x AttestGPSInput) Enum() *AttestGPSInput {
	p := new(AttestGPSInput)
	*p = x
	return p
}

func (x AttestGPSInput) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttestGPSInput) Descriptor() protoreflect.EnumDescriptor {
	return file_attest_attest_proto_enumTypes[3].Descriptor()
}

func (AttestGPSInput) Type() protoreflect.EnumType {
	return &file_attest_attest_proto_enumTypes[3]
}

func (x AttestGPSInput) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttestGPSInput.Descriptor instead.
func (AttestGPSInput) EnumDescriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{3}
}

type AttestVersionType int32

const (
	AttestVersionType_ATTEST_VERSION_TYPE_INVALID  AttestVersionType = 0
	AttestVersionType_ATTEST_VERSION_TYPE_EVE      AttestVersionType = 1 // BaseOS version
	AttestVersionType_ATTEST_VERSION_TYPE_FIRMWARE AttestVersionType = 2 // Firmware version (e.g. UEFI)
)

// Enum value maps for AttestVersionType.
var (
	AttestVersionType_name = map[int32]string{
		0: "ATTEST_VERSION_TYPE_INVALID",
		1: "ATTEST_VERSION_TYPE_EVE",
		2: "ATTEST_VERSION_TYPE_FIRMWARE",
	}
	AttestVersionType_value = map[string]int32{
		"ATTEST_VERSION_TYPE_INVALID":  0,
		"ATTEST_VERSION_TYPE_EVE":      1,
		"ATTEST_VERSION_TYPE_FIRMWARE": 2,
	}
)

func (x AttestVersionType) Enum() *AttestVersionType {
	p := new(AttestVersionType)
	*p = x
	return p
}

func (x AttestVersionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttestVersionType) Descriptor() protoreflect.EnumDescriptor {
	return file_attest_attest_proto_enumTypes[4].Descriptor()
}

func (AttestVersionType) Type() protoreflect.EnumType {
	return &file_attest_attest_proto_enumTypes[4]
}

func (x AttestVersionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttestVersionType.Descriptor instead.
func (AttestVersionType) EnumDescriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{4}
}

type ZAttestResponseCode int32

const (
	ZAttestResponseCode_Z_ATTEST_RESPONSE_CODE_INVALID        ZAttestResponseCode = 0
	ZAttestResponseCode_Z_ATTEST_RESPONSE_CODE_SUCCESS        ZAttestResponseCode = 1 //Attestation successful
	ZAttestResponseCode_Z_ATTEST_RESPONSE_CODE_NONCE_MISMATCH ZAttestResponseCode = 2 //Attestation failed due to nonce mismatch
	ZAttestResponseCode_Z_ATTEST_RESPONSE_CODE_NO_CERT_FOUND  ZAttestResponseCode = 3 //There was no attestation certificate in Controller to validate attestation quote
	ZAttestResponseCode_Z_ATTEST_RESPONSE_CODE_QUOTE_FAILED   ZAttestResponseCode = 4 //Attestation failed due to quote mismatch
)

// Enum value maps for ZAttestResponseCode.
var (
	ZAttestResponseCode_name = map[int32]string{
		0: "Z_ATTEST_RESPONSE_CODE_INVALID",
		1: "Z_ATTEST_RESPONSE_CODE_SUCCESS",
		2: "Z_ATTEST_RESPONSE_CODE_NONCE_MISMATCH",
		3: "Z_ATTEST_RESPONSE_CODE_NO_CERT_FOUND",
		4: "Z_ATTEST_RESPONSE_CODE_QUOTE_FAILED",
	}
	ZAttestResponseCode_value = map[string]int32{
		"Z_ATTEST_RESPONSE_CODE_INVALID":        0,
		"Z_ATTEST_RESPONSE_CODE_SUCCESS":        1,
		"Z_ATTEST_RESPONSE_CODE_NONCE_MISMATCH": 2,
		"Z_ATTEST_RESPONSE_CODE_NO_CERT_FOUND":  3,
		"Z_ATTEST_RESPONSE_CODE_QUOTE_FAILED":   4,
	}
)

func (x ZAttestResponseCode) Enum() *ZAttestResponseCode {
	p := new(ZAttestResponseCode)
	*p = x
	return p
}

func (x ZAttestResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZAttestResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_attest_attest_proto_enumTypes[5].Descriptor()
}

func (ZAttestResponseCode) Type() protoreflect.EnumType {
	return &file_attest_attest_proto_enumTypes[5]
}

func (x ZAttestResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZAttestResponseCode.Descriptor instead.
func (ZAttestResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{5}
}

type AttestVolumeKeyType int32

const (
	AttestVolumeKeyType_ATTEST_VOLUME_KEY_TYPE_INVALID AttestVolumeKeyType = 0
	AttestVolumeKeyType_ATTEST_VOLUME_KEY_TYPE_VSK     AttestVolumeKeyType = 1 //Volume storage key, for /persist/vault
)

// Enum value maps for AttestVolumeKeyType.
var (
	AttestVolumeKeyType_name = map[int32]string{
		0: "ATTEST_VOLUME_KEY_TYPE_INVALID",
		1: "ATTEST_VOLUME_KEY_TYPE_VSK",
	}
	AttestVolumeKeyType_value = map[string]int32{
		"ATTEST_VOLUME_KEY_TYPE_INVALID": 0,
		"ATTEST_VOLUME_KEY_TYPE_VSK":     1,
	}
)

func (x AttestVolumeKeyType) Enum() *AttestVolumeKeyType {
	p := new(AttestVolumeKeyType)
	*p = x
	return p
}

func (x AttestVolumeKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttestVolumeKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_attest_attest_proto_enumTypes[6].Descriptor()
}

func (AttestVolumeKeyType) Type() protoreflect.EnumType {
	return &file_attest_attest_proto_enumTypes[6]
}

func (x AttestVolumeKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttestVolumeKeyType.Descriptor instead.
func (AttestVolumeKeyType) EnumDescriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{6}
}

type AttestStorageKeysResponseCode int32

const (
	AttestStorageKeysResponseCode_ATTEST_STORAGE_KEYS_RESPONSE_CODE_INVALID         AttestStorageKeysResponseCode = 0
	AttestStorageKeysResponseCode_ATTEST_STORAGE_KEYS_RESPONSE_CODE_SUCCESS         AttestStorageKeysResponseCode = 1 // key(s) successfully stored
	AttestStorageKeysResponseCode_ATTEST_STORAGE_KEYS_RESPONSE_CODE_ITOKEN_MISMATCH AttestStorageKeysResponseCode = 2 // integrity_token was not valid, try after successful attestation
)

// Enum value maps for AttestStorageKeysResponseCode.
var (
	AttestStorageKeysResponseCode_name = map[int32]string{
		0: "ATTEST_STORAGE_KEYS_RESPONSE_CODE_INVALID",
		1: "ATTEST_STORAGE_KEYS_RESPONSE_CODE_SUCCESS",
		2: "ATTEST_STORAGE_KEYS_RESPONSE_CODE_ITOKEN_MISMATCH",
	}
	AttestStorageKeysResponseCode_value = map[string]int32{
		"ATTEST_STORAGE_KEYS_RESPONSE_CODE_INVALID":         0,
		"ATTEST_STORAGE_KEYS_RESPONSE_CODE_SUCCESS":         1,
		"ATTEST_STORAGE_KEYS_RESPONSE_CODE_ITOKEN_MISMATCH": 2,
	}
)

func (x AttestStorageKeysResponseCode) Enum() *AttestStorageKeysResponseCode {
	p := new(AttestStorageKeysResponseCode)
	*p = x
	return p
}

func (x AttestStorageKeysResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttestStorageKeysResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_attest_attest_proto_enumTypes[7].Descriptor()
}

func (AttestStorageKeysResponseCode) Type() protoreflect.EnumType {
	return &file_attest_attest_proto_enumTypes[7]
}

func (x AttestStorageKeysResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttestStorageKeysResponseCode.Descriptor instead.
func (AttestStorageKeysResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{7}
}

//  This is the request payload for POST /api/v2/edgeDevice/id/<uuid>/attest
// The message is assumed to be protected by signing envelope
type ZAttestReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqType     ZAttestReqType     `protobuf:"varint,1,opt,name=reqType,proto3,enum=org.lfedge.eve.attest.ZAttestReqType" json:"reqType,omitempty"` //type of the request
	Quote       *ZAttestQuote      `protobuf:"bytes,2,opt,name=quote,proto3" json:"quote,omitempty"`                                                //attestation quote msg
	Certs       []*certs.ZCert     `protobuf:"bytes,3,rep,name=certs,proto3" json:"certs,omitempty"`                                                //X509 certs in .PEM format, signed by device certificate
	StorageKeys *AttestStorageKeys `protobuf:"bytes,4,opt,name=storage_keys,json=storageKeys,proto3" json:"storage_keys,omitempty"`                 //encrypted secrets to be saved by the Controller, like encrypted keys for the volume storage vaults
}

func (x *ZAttestReq) Reset() {
	*x = ZAttestReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attest_attest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZAttestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZAttestReq) ProtoMessage() {}

func (x *ZAttestReq) ProtoReflect() protoreflect.Message {
	mi := &file_attest_attest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZAttestReq.ProtoReflect.Descriptor instead.
func (*ZAttestReq) Descriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{0}
}

func (x *ZAttestReq) GetReqType() ZAttestReqType {
	if x != nil {
		return x.ReqType
	}
	return ZAttestReqType_ATTEST_REQ_NONE
}

func (x *ZAttestReq) GetQuote() *ZAttestQuote {
	if x != nil {
		return x.Quote
	}
	return nil
}

func (x *ZAttestReq) GetCerts() []*certs.ZCert {
	if x != nil {
		return x.Certs
	}
	return nil
}

func (x *ZAttestReq) GetStorageKeys() *AttestStorageKeys {
	if x != nil {
		return x.StorageKeys
	}
	return nil
}

//  This is the response payload for POST /api/v2/edgeDevice/id/<uuid>/attest
// The message is assumed to be protected by signing envelope
type ZAttestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RespType        ZAttestRespType        `protobuf:"varint,1,opt,name=respType,proto3,enum=org.lfedge.eve.attest.ZAttestRespType" json:"respType,omitempty"` //type of the response
	Nonce           *ZAttestNonceResp      `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`                                                   //nonce from Controller
	QuoteResp       *ZAttestQuoteResp      `protobuf:"bytes,3,opt,name=quoteResp,proto3" json:"quoteResp,omitempty"`                                           //attest quote response from Controller
	StorageKeysResp *AttestStorageKeysResp `protobuf:"bytes,4,opt,name=storage_keys_resp,json=storageKeysResp,proto3" json:"storage_keys_resp,omitempty"`      //attest storage_keys response from Controller
}

func (x *ZAttestResponse) Reset() {
	*x = ZAttestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attest_attest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZAttestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZAttestResponse) ProtoMessage() {}

func (x *ZAttestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_attest_attest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZAttestResponse.ProtoReflect.Descriptor instead.
func (*ZAttestResponse) Descriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{1}
}

func (x *ZAttestResponse) GetRespType() ZAttestRespType {
	if x != nil {
		return x.RespType
	}
	return ZAttestRespType_ATTEST_RESP_NONE
}

func (x *ZAttestResponse) GetNonce() *ZAttestNonceResp {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *ZAttestResponse) GetQuoteResp() *ZAttestQuoteResp {
	if x != nil {
		return x.QuoteResp
	}
	return nil
}

func (x *ZAttestResponse) GetStorageKeysResp() *AttestStorageKeysResp {
	if x != nil {
		return x.StorageKeysResp
	}
	return nil
}

type ZAttestNonceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"` //nonce to use in quote generation
}

func (x *ZAttestNonceResp) Reset() {
	*x = ZAttestNonceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attest_attest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZAttestNonceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZAttestNonceResp) ProtoMessage() {}

func (x *ZAttestNonceResp) ProtoReflect() protoreflect.Message {
	mi := &file_attest_attest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZAttestNonceResp.ProtoReflect.Descriptor instead.
func (*ZAttestNonceResp) Descriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{2}
}

func (x *ZAttestNonceResp) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

// A hash algo, and corresponding digest derived using that algo
type TpmEventDigest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashAlgo TpmHashAlgo `protobuf:"varint,1,opt,name=hash_algo,json=hashAlgo,proto3,enum=org.lfedge.eve.attest.TpmHashAlgo" json:"hash_algo,omitempty"`
	Digest   []byte      `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *TpmEventDigest) Reset() {
	*x = TpmEventDigest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attest_attest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmEventDigest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmEventDigest) ProtoMessage() {}

func (x *TpmEventDigest) ProtoReflect() protoreflect.Message {
	mi := &file_attest_attest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmEventDigest.ProtoReflect.Descriptor instead.
func (*TpmEventDigest) Descriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{3}
}

func (x *TpmEventDigest) GetHashAlgo() TpmHashAlgo {
	if x != nil {
		return x.HashAlgo
	}
	return TpmHashAlgo_TPM_HASH_ALGO_INVALID
}

func (x *TpmEventDigest) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

// Taken from
// 5.2 Crypto Agile Log Entry Format, from https://trustedcomputinggroup.org/wp-content/uploads/EFI-Protocol-Specification-rev13-160330final.pdf
type TpmEventLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index           uint32          `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                                              // Sequential index of event in the log
	PcrIndex        uint32          `protobuf:"varint,2,opt,name=pcr_index,json=pcrIndex,proto3" json:"pcr_index,omitempty"`                        // PCR index to which this event was measured
	EventType       uint32          `protobuf:"varint,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`                     // The type of this event
	Digest          *TpmEventDigest `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`                                             // The digest corresponding to this event
	EventDataBinary []byte          `protobuf:"bytes,5,opt,name=event_data_binary,json=eventDataBinary,proto3" json:"event_data_binary,omitempty"`  // The raw event data bytes
	EventDataString string          `protobuf:"bytes,6,opt,name=event_data_string,json=eventDataString,proto3" json:"event_data_string,omitempty"`  // Textual representation of the event data
	EventBinarySize uint32          `protobuf:"varint,7,opt,name=event_binary_size,json=eventBinarySize,proto3" json:"event_binary_size,omitempty"` // Size of binary data in bytes. We keep the size value when we omit the data
}

func (x *TpmEventLogEntry) Reset() {
	*x = TpmEventLogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attest_attest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmEventLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmEventLogEntry) ProtoMessage() {}

func (x *TpmEventLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_attest_attest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmEventLogEntry.ProtoReflect.Descriptor instead.
func (*TpmEventLogEntry) Descriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{4}
}

func (x *TpmEventLogEntry) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TpmEventLogEntry) GetPcrIndex() uint32 {
	if x != nil {
		return x.PcrIndex
	}
	return 0
}

func (x *TpmEventLogEntry) GetEventType() uint32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

func (x *TpmEventLogEntry) GetDigest() *TpmEventDigest {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *TpmEventLogEntry) GetEventDataBinary() []byte {
	if x != nil {
		return x.EventDataBinary
	}
	return nil
}

func (x *TpmEventLogEntry) GetEventDataString() string {
	if x != nil {
		return x.EventDataString
	}
	return ""
}

func (x *TpmEventLogEntry) GetEventBinarySize() uint32 {
	if x != nil {
		return x.EventBinarySize
	}
	return 0
}

type AttestGPSCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpsInput  AttestGPSInput `protobuf:"varint,1,opt,name=gps_input,json=gpsInput,proto3,enum=org.lfedge.eve.attest.AttestGPSInput" json:"gps_input,omitempty"` // Are the coordinates populated ?
	Latitude  float64        `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`                                                          // Latitude of the device geo-location
	Longitude float64        `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`                                                        // Longitude of the device geo-location
}

func (x *AttestGPSCoordinates) Reset() {
	*x = AttestGPSCoordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attest_attest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestGPSCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestGPSCoordinates) ProtoMessage() {}

func (x *AttestGPSCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_attest_attest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestGPSCoordinates.ProtoReflect.Descriptor instead.
func (*AttestGPSCoordinates) Descriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{5}
}

func (x *AttestGPSCoordinates) GetGpsInput() AttestGPSInput {
	if x != nil {
		return x.GpsInput
	}
	return AttestGPSInput_ATTEST_GPS_INPUT_INVALID
}

func (x *AttestGPSCoordinates) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *AttestGPSCoordinates) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

// examples
// ATTEST_VERSION_TYPE_EVE, "5.6.1-amd64"
// ATTEST_VERSION_TYPE_FIRMWARE, "American Megatrends Inc.-5.12"
type AttestVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionType AttestVersionType `protobuf:"varint,1,opt,name=version_type,json=versionType,proto3,enum=org.lfedge.eve.attest.AttestVersionType" json:"version_type,omitempty"` // One of VersionType
	Version     string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                                                                          // Version string of the corresponding package
}

func (x *AttestVersionInfo) Reset() {
	*x = AttestVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attest_attest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestVersionInfo) ProtoMessage() {}

func (x *AttestVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_attest_attest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestVersionInfo.ProtoReflect.Descriptor instead.
func (*AttestVersionInfo) Descriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{6}
}

func (x *AttestVersionInfo) GetVersionType() AttestVersionType {
	if x != nil {
		return x.VersionType
	}
	return AttestVersionType_ATTEST_VERSION_TYPE_INVALID
}

func (x *AttestVersionInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Holds one single PCR value from TPM, from a particular hash bank
type TpmPCRValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    uint32      `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                                                              //PCR index
	HashAlgo TpmHashAlgo `protobuf:"varint,2,opt,name=hash_algo,json=hashAlgo,proto3,enum=org.lfedge.eve.attest.TpmHashAlgo" json:"hash_algo,omitempty"` //SHA1/SHA256/SHA384/SHA256
	Value    []byte      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                                                               //value in PCR
}

func (x *TpmPCRValue) Reset() {
	*x = TpmPCRValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attest_attest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmPCRValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmPCRValue) ProtoMessage() {}

func (x *TpmPCRValue) ProtoReflect() protoreflect.Message {
	mi := &file_attest_attest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmPCRValue.ProtoReflect.Descriptor instead.
func (*TpmPCRValue) Descriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{7}
}

func (x *TpmPCRValue) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TpmPCRValue) GetHashAlgo() TpmHashAlgo {
	if x != nil {
		return x.HashAlgo
	}
	return TpmHashAlgo_TPM_HASH_ALGO_INVALID
}

func (x *TpmPCRValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// attestData is taken from
// TPMS_ATTEST Table 2:123) in https://trustedcomputinggroup.org/wp-content/uploads/TPM-Rev-2.0-Part-2-Structures-01.38.pdf
type ZAttestQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttestData []byte         `protobuf:"bytes,1,opt,name=attestData,proto3" json:"attestData,omitempty"`                // Nonce is included in attestData, see comment above
	Signature  []byte         `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`                  // Signature to verify attestData
	PcrValues  []*TpmPCRValue `protobuf:"bytes,3,rep,name=pcr_values,json=pcrValues,proto3" json:"pcr_values,omitempty"` // Current values of TPM PCRs 0-15
	// Deprecated: Marked as deprecated in attest/attest.proto.
	EventLog []*TpmEventLogEntry   `protobuf:"bytes,4,rep,name=event_log,json=eventLog,proto3" json:"event_log,omitempty"` // Deprecated, TPM Event log
	Versions []*AttestVersionInfo  `protobuf:"bytes,5,rep,name=versions,proto3" json:"versions,omitempty"`                 // Versions of various software packages, as defined by VersionType
	GpsInfo  *AttestGPSCoordinates `protobuf:"bytes,6,opt,name=gps_info,json=gpsInfo,proto3" json:"gps_info,omitempty"`    // Geo-Coordinates of the device
}

func (x *ZAttestQuote) Reset() {
	*x = ZAttestQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attest_attest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZAttestQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZAttestQuote) ProtoMessage() {}

func (x *ZAttestQuote) ProtoReflect() protoreflect.Message {
	mi := &file_attest_attest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZAttestQuote.ProtoReflect.Descriptor instead.
func (*ZAttestQuote) Descriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{8}
}

func (x *ZAttestQuote) GetAttestData() []byte {
	if x != nil {
		return x.AttestData
	}
	return nil
}

func (x *ZAttestQuote) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ZAttestQuote) GetPcrValues() []*TpmPCRValue {
	if x != nil {
		return x.PcrValues
	}
	return nil
}

// Deprecated: Marked as deprecated in attest/attest.proto.
func (x *ZAttestQuote) GetEventLog() []*TpmEventLogEntry {
	if x != nil {
		return x.EventLog
	}
	return nil
}

func (x *ZAttestQuote) GetVersions() []*AttestVersionInfo {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *ZAttestQuote) GetGpsInfo() *AttestGPSCoordinates {
	if x != nil {
		return x.GpsInfo
	}
	return nil
}

type AttestVolumeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType AttestVolumeKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=org.lfedge.eve.attest.AttestVolumeKeyType" json:"key_type,omitempty"`
	Key     []byte              `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AttestVolumeKey) Reset() {
	*x = AttestVolumeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attest_attest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestVolumeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestVolumeKey) ProtoMessage() {}

func (x *AttestVolumeKey) ProtoReflect() protoreflect.Message {
	mi := &file_attest_attest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestVolumeKey.ProtoReflect.Descriptor instead.
func (*AttestVolumeKey) Descriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{9}
}

func (x *AttestVolumeKey) GetKeyType() AttestVolumeKeyType {
	if x != nil {
		return x.KeyType
	}
	return AttestVolumeKeyType_ATTEST_VOLUME_KEY_TYPE_INVALID
}

func (x *AttestVolumeKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type ZAttestQuoteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response       ZAttestResponseCode `protobuf:"varint,1,opt,name=response,proto3,enum=org.lfedge.eve.attest.ZAttestResponseCode" json:"response,omitempty"` // Result of quote validation
	IntegrityToken []byte              `protobuf:"bytes,2,opt,name=integrity_token,json=integrityToken,proto3" json:"integrity_token,omitempty"`               // Valid if response is ATTEST_RESPONSE_SUCCESS, contains integrity token for device to
	// Cache and present in the next config request
	Keys []*AttestVolumeKey `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"` // Valid if response is ATTEST_RESPONSE_SUCCESS, contains keys of type KeyType to unlock
}

func (x *ZAttestQuoteResp) Reset() {
	*x = ZAttestQuoteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attest_attest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZAttestQuoteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZAttestQuoteResp) ProtoMessage() {}

func (x *ZAttestQuoteResp) ProtoReflect() protoreflect.Message {
	mi := &file_attest_attest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZAttestQuoteResp.ProtoReflect.Descriptor instead.
func (*ZAttestQuoteResp) Descriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{10}
}

func (x *ZAttestQuoteResp) GetResponse() ZAttestResponseCode {
	if x != nil {
		return x.Response
	}
	return ZAttestResponseCode_Z_ATTEST_RESPONSE_CODE_INVALID
}

func (x *ZAttestQuoteResp) GetIntegrityToken() []byte {
	if x != nil {
		return x.IntegrityToken
	}
	return nil
}

func (x *ZAttestQuoteResp) GetKeys() []*AttestVolumeKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// Encrypted data to save and retrievable post successful attestation
type AttestStorageKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntegrityToken []byte             `protobuf:"bytes,1,opt,name=integrity_token,json=integrityToken,proto3" json:"integrity_token,omitempty"` // integrity_token provided by controller in the last attestation cycle
	Keys           []*AttestVolumeKey `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`                                           // Encrypted keys for volume vault(s)
}

func (x *AttestStorageKeys) Reset() {
	*x = AttestStorageKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attest_attest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestStorageKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestStorageKeys) ProtoMessage() {}

func (x *AttestStorageKeys) ProtoReflect() protoreflect.Message {
	mi := &file_attest_attest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestStorageKeys.ProtoReflect.Descriptor instead.
func (*AttestStorageKeys) Descriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{11}
}

func (x *AttestStorageKeys) GetIntegrityToken() []byte {
	if x != nil {
		return x.IntegrityToken
	}
	return nil
}

func (x *AttestStorageKeys) GetKeys() []*AttestVolumeKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type AttestStorageKeysResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response AttestStorageKeysResponseCode `protobuf:"varint,1,opt,name=response,proto3,enum=org.lfedge.eve.attest.AttestStorageKeysResponseCode" json:"response,omitempty"` //Result of processing Z_ATTEST_REQ_TYPE_STORE_KEYS in Controller
}

func (x *AttestStorageKeysResp) Reset() {
	*x = AttestStorageKeysResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attest_attest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestStorageKeysResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestStorageKeysResp) ProtoMessage() {}

func (x *AttestStorageKeysResp) ProtoReflect() protoreflect.Message {
	mi := &file_attest_attest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestStorageKeysResp.ProtoReflect.Descriptor instead.
func (*AttestStorageKeysResp) Descriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{12}
}

func (x *AttestStorageKeysResp) GetResponse() AttestStorageKeysResponseCode {
	if x != nil {
		return x.Response
	}
	return AttestStorageKeysResponseCode_ATTEST_STORAGE_KEYS_RESPONSE_CODE_INVALID
}

type AttestVolumeKeyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedKey []byte `protobuf:"bytes,1,opt,name=encrypted_key,json=encryptedKey,proto3" json:"encrypted_key,omitempty"` //key in encrypted format
	DigestSha256 []byte `protobuf:"bytes,2,opt,name=digest_sha256,json=digestSha256,proto3" json:"digest_sha256,omitempty"` //SHA 256 digest of the key
}

func (x *AttestVolumeKeyData) Reset() {
	*x = AttestVolumeKeyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attest_attest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestVolumeKeyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestVolumeKeyData) ProtoMessage() {}

func (x *AttestVolumeKeyData) ProtoReflect() protoreflect.Message {
	mi := &file_attest_attest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestVolumeKeyData.ProtoReflect.Descriptor instead.
func (*AttestVolumeKeyData) Descriptor() ([]byte, []int) {
	return file_attest_attest_proto_rawDescGZIP(), []int{13}
}

func (x *AttestVolumeKeyData) GetEncryptedKey() []byte {
	if x != nil {
		return x.EncryptedKey
	}
	return nil
}

func (x *AttestVolumeKeyData) GetDigestSha256() []byte {
	if x != nil {
		return x.DigestSha256
	}
	return nil
}

var File_attest_attest_proto protoreflect.FileDescriptor

var file_attest_attest_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x63, 0x65,
	0x72, 0x74, 0x73, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x88, 0x02, 0x0a, 0x0a, 0x5a, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x3f,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x5a, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x5a, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x65,
	0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x73,
	0x2e, 0x5a, 0x43, 0x65, 0x72, 0x74, 0x52, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x12, 0x4b, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xb5, 0x02, 0x0a, 0x0f, 0x5a,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x5a, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x5a, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x45, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x5a, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x09, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x28, 0x0a, 0x10, 0x5a, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x69, 0x0a, 0x0e,
	0x54, 0x70, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x48, 0x61, 0x73,
	0x68, 0x41, 0x6c, 0x67, 0x6f, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0xa7, 0x02, 0x0a, 0x10, 0x54, 0x70, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x63, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x63, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x47, 0x50, 0x53, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x67, 0x70,
	0x73, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x47, 0x50, 0x53, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x67, 0x70, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x7a, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a,
	0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x0b, 0x54, 0x70, 0x6d, 0x50, 0x43, 0x52, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x09, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xe7, 0x02, 0x0a, 0x0c, 0x5a, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x70, 0x63, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x50,
	0x43, 0x52, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x63, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x70,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x44, 0x0a, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x67, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x47, 0x50, 0x53, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x07, 0x67, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6a, 0x0a, 0x0f, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xbf, 0x01, 0x0a, 0x10, 0x5a, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x5a, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x78, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x22, 0x69, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a,
	0x13, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4b, 0x65, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x2a, 0x88,
	0x01, 0x0a, 0x0e, 0x5a, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4e, 0x4f, 0x4e, 0x43, 0x45, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x5f,
	0x51, 0x55, 0x4f, 0x54, 0x45, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x5a, 0x5f, 0x41, 0x54, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x04, 0x2a, 0x93, 0x01, 0x0a, 0x0f, 0x5a, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x54, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f,
	0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d,
	0x5a, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x04, 0x2a,
	0x74, 0x0a, 0x0b, 0x54, 0x70, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x50, 0x4d, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x50, 0x4d,
	0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x5f, 0x53, 0x48, 0x41, 0x31, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x50, 0x4d, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x50, 0x4d, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x5f, 0x53, 0x48, 0x41,
	0x35, 0x31, 0x32, 0x10, 0x03, 0x2a, 0x69, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x47,
	0x50, 0x53, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x54, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x47, 0x50, 0x53, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f,
	0x47, 0x50, 0x53, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x47, 0x50,
	0x53, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x02,
	0x2a, 0x73, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57,
	0x41, 0x52, 0x45, 0x10, 0x02, 0x2a, 0xdb, 0x01, 0x0a, 0x13, 0x5a, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x1e, 0x5a, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x5a, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x5a, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02,
	0x12, 0x28, 0x0a, 0x24, 0x5a, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x5a, 0x5f,
	0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x04, 0x2a, 0x59, 0x0a, 0x13, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x54,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x53, 0x4b, 0x10, 0x01, 0x2a, 0xb4,
	0x01, 0x0a, 0x1d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2d, 0x0a, 0x29, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x2d, 0x0a, 0x29, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x35,
	0x0a, 0x31, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x02, 0x42, 0x3d, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x5a, 0x24,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x66, 0x2d, 0x65, 0x64,
	0x67, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_attest_attest_proto_rawDescOnce sync.Once
	file_attest_attest_proto_rawDescData = file_attest_attest_proto_rawDesc
)

func file_attest_attest_proto_rawDescGZIP() []byte {
	file_attest_attest_proto_rawDescOnce.Do(func() {
		file_attest_attest_proto_rawDescData = protoimpl.X.CompressGZIP(file_attest_attest_proto_rawDescData)
	})
	return file_attest_attest_proto_rawDescData
}

var file_attest_attest_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_attest_attest_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_attest_attest_proto_goTypes = []interface{}{
	(ZAttestReqType)(0),                // 0: org.lfedge.eve.attest.ZAttestReqType
	(ZAttestRespType)(0),               // 1: org.lfedge.eve.attest.ZAttestRespType
	(TpmHashAlgo)(0),                   // 2: org.lfedge.eve.attest.TpmHashAlgo
	(AttestGPSInput)(0),                // 3: org.lfedge.eve.attest.AttestGPSInput
	(AttestVersionType)(0),             // 4: org.lfedge.eve.attest.AttestVersionType
	(ZAttestResponseCode)(0),           // 5: org.lfedge.eve.attest.ZAttestResponseCode
	(AttestVolumeKeyType)(0),           // 6: org.lfedge.eve.attest.AttestVolumeKeyType
	(AttestStorageKeysResponseCode)(0), // 7: org.lfedge.eve.attest.AttestStorageKeysResponseCode
	(*ZAttestReq)(nil),                 // 8: org.lfedge.eve.attest.ZAttestReq
	(*ZAttestResponse)(nil),            // 9: org.lfedge.eve.attest.ZAttestResponse
	(*ZAttestNonceResp)(nil),           // 10: org.lfedge.eve.attest.ZAttestNonceResp
	(*TpmEventDigest)(nil),             // 11: org.lfedge.eve.attest.TpmEventDigest
	(*TpmEventLogEntry)(nil),           // 12: org.lfedge.eve.attest.TpmEventLogEntry
	(*AttestGPSCoordinates)(nil),       // 13: org.lfedge.eve.attest.AttestGPSCoordinates
	(*AttestVersionInfo)(nil),          // 14: org.lfedge.eve.attest.AttestVersionInfo
	(*TpmPCRValue)(nil),                // 15: org.lfedge.eve.attest.TpmPCRValue
	(*ZAttestQuote)(nil),               // 16: org.lfedge.eve.attest.ZAttestQuote
	(*AttestVolumeKey)(nil),            // 17: org.lfedge.eve.attest.AttestVolumeKey
	(*ZAttestQuoteResp)(nil),           // 18: org.lfedge.eve.attest.ZAttestQuoteResp
	(*AttestStorageKeys)(nil),          // 19: org.lfedge.eve.attest.AttestStorageKeys
	(*AttestStorageKeysResp)(nil),      // 20: org.lfedge.eve.attest.AttestStorageKeysResp
	(*AttestVolumeKeyData)(nil),        // 21: org.lfedge.eve.attest.AttestVolumeKeyData
	(*certs.ZCert)(nil),                // 22: org.lfedge.eve.certs.ZCert
}
var file_attest_attest_proto_depIdxs = []int32{
	0,  // 0: org.lfedge.eve.attest.ZAttestReq.reqType:type_name -> org.lfedge.eve.attest.ZAttestReqType
	16, // 1: org.lfedge.eve.attest.ZAttestReq.quote:type_name -> org.lfedge.eve.attest.ZAttestQuote
	22, // 2: org.lfedge.eve.attest.ZAttestReq.certs:type_name -> org.lfedge.eve.certs.ZCert
	19, // 3: org.lfedge.eve.attest.ZAttestReq.storage_keys:type_name -> org.lfedge.eve.attest.AttestStorageKeys
	1,  // 4: org.lfedge.eve.attest.ZAttestResponse.respType:type_name -> org.lfedge.eve.attest.ZAttestRespType
	10, // 5: org.lfedge.eve.attest.ZAttestResponse.nonce:type_name -> org.lfedge.eve.attest.ZAttestNonceResp
	18, // 6: org.lfedge.eve.attest.ZAttestResponse.quoteResp:type_name -> org.lfedge.eve.attest.ZAttestQuoteResp
	20, // 7: org.lfedge.eve.attest.ZAttestResponse.storage_keys_resp:type_name -> org.lfedge.eve.attest.AttestStorageKeysResp
	2,  // 8: org.lfedge.eve.attest.TpmEventDigest.hash_algo:type_name -> org.lfedge.eve.attest.TpmHashAlgo
	11, // 9: org.lfedge.eve.attest.TpmEventLogEntry.digest:type_name -> org.lfedge.eve.attest.TpmEventDigest
	3,  // 10: org.lfedge.eve.attest.AttestGPSCoordinates.gps_input:type_name -> org.lfedge.eve.attest.AttestGPSInput
	4,  // 11: org.lfedge.eve.attest.AttestVersionInfo.version_type:type_name -> org.lfedge.eve.attest.AttestVersionType
	2,  // 12: org.lfedge.eve.attest.TpmPCRValue.hash_algo:type_name -> org.lfedge.eve.attest.TpmHashAlgo
	15, // 13: org.lfedge.eve.attest.ZAttestQuote.pcr_values:type_name -> org.lfedge.eve.attest.TpmPCRValue
	12, // 14: org.lfedge.eve.attest.ZAttestQuote.event_log:type_name -> org.lfedge.eve.attest.TpmEventLogEntry
	14, // 15: org.lfedge.eve.attest.ZAttestQuote.versions:type_name -> org.lfedge.eve.attest.AttestVersionInfo
	13, // 16: org.lfedge.eve.attest.ZAttestQuote.gps_info:type_name -> org.lfedge.eve.attest.AttestGPSCoordinates
	6,  // 17: org.lfedge.eve.attest.AttestVolumeKey.key_type:type_name -> org.lfedge.eve.attest.AttestVolumeKeyType
	5,  // 18: org.lfedge.eve.attest.ZAttestQuoteResp.response:type_name -> org.lfedge.eve.attest.ZAttestResponseCode
	17, // 19: org.lfedge.eve.attest.ZAttestQuoteResp.keys:type_name -> org.lfedge.eve.attest.AttestVolumeKey
	17, // 20: org.lfedge.eve.attest.AttestStorageKeys.keys:type_name -> org.lfedge.eve.attest.AttestVolumeKey
	7,  // 21: org.lfedge.eve.attest.AttestStorageKeysResp.response:type_name -> org.lfedge.eve.attest.AttestStorageKeysResponseCode
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_attest_attest_proto_init() }
func file_attest_attest_proto_init() {
	if File_attest_attest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_attest_attest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZAttestReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attest_attest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZAttestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attest_attest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZAttestNonceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attest_attest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmEventDigest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attest_attest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmEventLogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attest_attest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestGPSCoordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attest_attest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attest_attest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmPCRValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attest_attest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZAttestQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attest_attest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestVolumeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attest_attest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZAttestQuoteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attest_attest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestStorageKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attest_attest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestStorageKeysResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attest_attest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestVolumeKeyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_attest_attest_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_attest_attest_proto_goTypes,
		DependencyIndexes: file_attest_attest_proto_depIdxs,
		EnumInfos:         file_attest_attest_proto_enumTypes,
		MessageInfos:      file_attest_attest_proto_msgTypes,
	}.Build()
	File_attest_attest_proto = out.File
	file_attest_attest_proto_rawDesc = nil
	file_attest_attest_proto_goTypes = nil
	file_attest_attest_proto_depIdxs = nil
}
