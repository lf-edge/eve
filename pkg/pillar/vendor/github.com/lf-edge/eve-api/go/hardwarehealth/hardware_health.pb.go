// Copyright(c) 2025 Zededa, Inc.
// All rights reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: hardwarehealth/hardware_health.proto

package hardwarehealth

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request payload for the POST /api/v2/edgeDevice/id/{uuid}/hardwarehealth endpoint.
//
// ZHardwareHealth encapsulates periodic health check reports for critical
// system hardware components. Each message typically contains status updates
// for key hardware elements, such as ECC memory and storage devices. These
// reports are generated at a low frequency (e.g., once every 24 hours) and
// are not retransmitted in case of network failure, as their data remains
// relatively stable.
//
// The message is secured with auth container, which is bound to the device
// certificate to ensure integrity and authenticity.
type ZHardwareHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevId       string                 `protobuf:"bytes,1,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	AtTimeStamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time_stamp,json=atTimeStamp,proto3" json:"at_time_stamp,omitempty"`
	Mr          *ECCMemoryReport       `protobuf:"bytes,3,opt,name=mr,proto3" json:"mr,omitempty"`
}

func (x *ZHardwareHealth) Reset() {
	*x = ZHardwareHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardwarehealth_hardware_health_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZHardwareHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZHardwareHealth) ProtoMessage() {}

func (x *ZHardwareHealth) ProtoReflect() protoreflect.Message {
	mi := &file_hardwarehealth_hardware_health_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZHardwareHealth.ProtoReflect.Descriptor instead.
func (*ZHardwareHealth) Descriptor() ([]byte, []int) {
	return file_hardwarehealth_hardware_health_proto_rawDescGZIP(), []int{0}
}

func (x *ZHardwareHealth) GetDevId() string {
	if x != nil {
		return x.DevId
	}
	return ""
}

func (x *ZHardwareHealth) GetAtTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTimeStamp
	}
	return nil
}

func (x *ZHardwareHealth) GetMr() *ECCMemoryReport {
	if x != nil {
		return x.Mr
	}
	return nil
}

// Info per memory rank in the dimm
type DimmRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankName string `protobuf:"bytes,1,opt,name=rank_name,json=rankName,proto3" json:"rank_name,omitempty"`
	CeCount  int64  `protobuf:"varint,2,opt,name=ce_count,json=ceCount,proto3" json:"ce_count,omitempty"` // Correctable error count in the rank
	UeCount  int64  `protobuf:"varint,3,opt,name=ue_count,json=ueCount,proto3" json:"ue_count,omitempty"` // Uncorrectable error count in the rank
}

func (x *DimmRankInfo) Reset() {
	*x = DimmRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardwarehealth_hardware_health_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DimmRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DimmRankInfo) ProtoMessage() {}

func (x *DimmRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hardwarehealth_hardware_health_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DimmRankInfo.ProtoReflect.Descriptor instead.
func (*DimmRankInfo) Descriptor() ([]byte, []int) {
	return file_hardwarehealth_hardware_health_proto_rawDescGZIP(), []int{1}
}

func (x *DimmRankInfo) GetRankName() string {
	if x != nil {
		return x.RankName
	}
	return ""
}

func (x *DimmRankInfo) GetCeCount() int64 {
	if x != nil {
		return x.CeCount
	}
	return 0
}

func (x *DimmRankInfo) GetUeCount() int64 {
	if x != nil {
		return x.UeCount
	}
	return 0
}

// Info per memory controller in the system
type ECCMemoryControllerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerName string          `protobuf:"bytes,1,opt,name=controller_name,json=controllerName,proto3" json:"controller_name,omitempty"`
	CeCount        int64           `protobuf:"varint,2,opt,name=ce_count,json=ceCount,proto3" json:"ce_count,omitempty"` // Correctable error count in the memory controller
	UeCount        int64           `protobuf:"varint,3,opt,name=ue_count,json=ueCount,proto3" json:"ue_count,omitempty"` // Uncorrectable error count in the memory controller
	Ranks          []*DimmRankInfo `protobuf:"bytes,4,rep,name=ranks,proto3" json:"ranks,omitempty"`                     // Repeated for each rank
}

func (x *ECCMemoryControllerInfo) Reset() {
	*x = ECCMemoryControllerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardwarehealth_hardware_health_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECCMemoryControllerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECCMemoryControllerInfo) ProtoMessage() {}

func (x *ECCMemoryControllerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_hardwarehealth_hardware_health_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECCMemoryControllerInfo.ProtoReflect.Descriptor instead.
func (*ECCMemoryControllerInfo) Descriptor() ([]byte, []int) {
	return file_hardwarehealth_hardware_health_proto_rawDescGZIP(), []int{2}
}

func (x *ECCMemoryControllerInfo) GetControllerName() string {
	if x != nil {
		return x.ControllerName
	}
	return ""
}

func (x *ECCMemoryControllerInfo) GetCeCount() int64 {
	if x != nil {
		return x.CeCount
	}
	return 0
}

func (x *ECCMemoryControllerInfo) GetUeCount() int64 {
	if x != nil {
		return x.UeCount
	}
	return 0
}

func (x *ECCMemoryControllerInfo) GetRanks() []*DimmRankInfo {
	if x != nil {
		return x.Ranks
	}
	return nil
}

// A report for all memory controllers
type ECCMemoryReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemoryControllers []*ECCMemoryControllerInfo `protobuf:"bytes,1,rep,name=memory_controllers,json=memoryControllers,proto3" json:"memory_controllers,omitempty"` // Repeated for each memory controller
}

func (x *ECCMemoryReport) Reset() {
	*x = ECCMemoryReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hardwarehealth_hardware_health_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECCMemoryReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECCMemoryReport) ProtoMessage() {}

func (x *ECCMemoryReport) ProtoReflect() protoreflect.Message {
	mi := &file_hardwarehealth_hardware_health_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECCMemoryReport.ProtoReflect.Descriptor instead.
func (*ECCMemoryReport) Descriptor() ([]byte, []int) {
	return file_hardwarehealth_hardware_health_proto_rawDescGZIP(), []int{3}
}

func (x *ECCMemoryReport) GetMemoryControllers() []*ECCMemoryControllerInfo {
	if x != nil {
		return x.MemoryControllers
	}
	return nil
}

var File_hardwarehealth_hardware_health_proto protoreflect.FileDescriptor

var file_hardwarehealth_hardware_health_proto_rawDesc = []byte{
	0x0a, 0x24, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x0f, 0x5a, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x76, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x3e, 0x0a, 0x02, 0x6d, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x45, 0x43,
	0x43, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x02, 0x6d,
	0x72, 0x22, 0x61, 0x0a, 0x0c, 0x44, 0x69, 0x6d, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x17, 0x45, 0x43, 0x43, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x41, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x44,
	0x69, 0x6d, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x6b, 0x73, 0x22, 0x78, 0x0a, 0x0f, 0x45, 0x43, 0x43, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x65, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x45, 0x43, 0x43, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x42, 0x4d, 0x0a, 0x1d,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5a, 0x2c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x66, 0x2d, 0x65, 0x64, 0x67,
	0x65, 0x2f, 0x65, 0x76, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_hardwarehealth_hardware_health_proto_rawDescOnce sync.Once
	file_hardwarehealth_hardware_health_proto_rawDescData = file_hardwarehealth_hardware_health_proto_rawDesc
)

func file_hardwarehealth_hardware_health_proto_rawDescGZIP() []byte {
	file_hardwarehealth_hardware_health_proto_rawDescOnce.Do(func() {
		file_hardwarehealth_hardware_health_proto_rawDescData = protoimpl.X.CompressGZIP(file_hardwarehealth_hardware_health_proto_rawDescData)
	})
	return file_hardwarehealth_hardware_health_proto_rawDescData
}

var file_hardwarehealth_hardware_health_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_hardwarehealth_hardware_health_proto_goTypes = []interface{}{
	(*ZHardwareHealth)(nil),         // 0: org.lfedge.eve.hardwarehealth.ZHardwareHealth
	(*DimmRankInfo)(nil),            // 1: org.lfedge.eve.hardwarehealth.DimmRankInfo
	(*ECCMemoryControllerInfo)(nil), // 2: org.lfedge.eve.hardwarehealth.ECCMemoryControllerInfo
	(*ECCMemoryReport)(nil),         // 3: org.lfedge.eve.hardwarehealth.ECCMemoryReport
	(*timestamppb.Timestamp)(nil),   // 4: google.protobuf.Timestamp
}
var file_hardwarehealth_hardware_health_proto_depIdxs = []int32{
	4, // 0: org.lfedge.eve.hardwarehealth.ZHardwareHealth.at_time_stamp:type_name -> google.protobuf.Timestamp
	3, // 1: org.lfedge.eve.hardwarehealth.ZHardwareHealth.mr:type_name -> org.lfedge.eve.hardwarehealth.ECCMemoryReport
	1, // 2: org.lfedge.eve.hardwarehealth.ECCMemoryControllerInfo.ranks:type_name -> org.lfedge.eve.hardwarehealth.DimmRankInfo
	2, // 3: org.lfedge.eve.hardwarehealth.ECCMemoryReport.memory_controllers:type_name -> org.lfedge.eve.hardwarehealth.ECCMemoryControllerInfo
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_hardwarehealth_hardware_health_proto_init() }
func file_hardwarehealth_hardware_health_proto_init() {
	if File_hardwarehealth_hardware_health_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hardwarehealth_hardware_health_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZHardwareHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardwarehealth_hardware_health_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DimmRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardwarehealth_hardware_health_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECCMemoryControllerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hardwarehealth_hardware_health_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECCMemoryReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hardwarehealth_hardware_health_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hardwarehealth_hardware_health_proto_goTypes,
		DependencyIndexes: file_hardwarehealth_hardware_health_proto_depIdxs,
		MessageInfos:      file_hardwarehealth_hardware_health_proto_msgTypes,
	}.Build()
	File_hardwarehealth_hardware_health_proto = out.File
	file_hardwarehealth_hardware_health_proto_rawDesc = nil
	file_hardwarehealth_hardware_health_proto_goTypes = nil
	file_hardwarehealth_hardware_health_proto_depIdxs = nil
}
