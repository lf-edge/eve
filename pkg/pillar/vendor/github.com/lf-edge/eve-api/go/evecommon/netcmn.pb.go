// Copyright(c) 2017-2018 Zededa, Inc.
// All rights reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: evecommon/netcmn.proto

package evecommon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProxyProto int32

const (
	ProxyProto_PROXY_HTTP  ProxyProto = 0
	ProxyProto_PROXY_HTTPS ProxyProto = 1
	ProxyProto_PROXY_SOCKS ProxyProto = 2
	ProxyProto_PROXY_FTP   ProxyProto = 3
	ProxyProto_PROXY_OTHER ProxyProto = 255
)

// Enum value maps for ProxyProto.
var (
	ProxyProto_name = map[int32]string{
		0:   "PROXY_HTTP",
		1:   "PROXY_HTTPS",
		2:   "PROXY_SOCKS",
		3:   "PROXY_FTP",
		255: "PROXY_OTHER",
	}
	ProxyProto_value = map[string]int32{
		"PROXY_HTTP":  0,
		"PROXY_HTTPS": 1,
		"PROXY_SOCKS": 2,
		"PROXY_FTP":   3,
		"PROXY_OTHER": 255,
	}
)

func (x ProxyProto) Enum() *ProxyProto {
	p := new(ProxyProto)
	*p = x
	return p
}

func (x ProxyProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProxyProto) Descriptor() protoreflect.EnumDescriptor {
	return file_evecommon_netcmn_proto_enumTypes[0].Descriptor()
}

func (ProxyProto) Type() protoreflect.EnumType {
	return &file_evecommon_netcmn_proto_enumTypes[0]
}

func (x ProxyProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProxyProto.Descriptor instead.
func (ProxyProto) EnumDescriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{0}
}

type DHCPType int32

const (
	DHCPType_DHCPNoop DHCPType = 0
	// Statically configure the DHCP for port
	DHCPType_Static DHCPType = 1
	// Don't run any DHCP, we are in passthrough mode for app
	DHCPType_DHCPNone DHCPType = 2
	// Run the DHCP client on this port
	DHCPType_Client DHCPType = 4
)

// Enum value maps for DHCPType.
var (
	DHCPType_name = map[int32]string{
		0: "DHCPNoop",
		1: "Static",
		2: "DHCPNone",
		4: "Client",
	}
	DHCPType_value = map[string]int32{
		"DHCPNoop": 0,
		"Static":   1,
		"DHCPNone": 2,
		"Client":   4,
	}
)

func (x DHCPType) Enum() *DHCPType {
	p := new(DHCPType)
	*p = x
	return p
}

func (x DHCPType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCPType) Descriptor() protoreflect.EnumDescriptor {
	return file_evecommon_netcmn_proto_enumTypes[1].Descriptor()
}

func (DHCPType) Type() protoreflect.EnumType {
	return &file_evecommon_netcmn_proto_enumTypes[1]
}

func (x DHCPType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCPType.Descriptor instead.
func (DHCPType) EnumDescriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{1}
}

type NetworkType int32

const (
	NetworkType_NETWORKTYPENOOP NetworkType = 0
	NetworkType_V4              NetworkType = 4 // Legacy - interpreted same as Dual stack
	NetworkType_V6              NetworkType = 6 // Legacy - interpreted same as Dual stack
	NetworkType_CryptoV4        NetworkType = 24
	NetworkType_CryptoV6        NetworkType = 26
	NetworkType_CryptoEID       NetworkType = 14
	NetworkType_V4Only          NetworkType = 7
	NetworkType_V6Only          NetworkType = 8
	NetworkType_DualV4V6        NetworkType = 9
)

// Enum value maps for NetworkType.
var (
	NetworkType_name = map[int32]string{
		0:  "NETWORKTYPENOOP",
		4:  "V4",
		6:  "V6",
		24: "CryptoV4",
		26: "CryptoV6",
		14: "CryptoEID",
		7:  "V4Only",
		8:  "V6Only",
		9:  "DualV4V6",
	}
	NetworkType_value = map[string]int32{
		"NETWORKTYPENOOP": 0,
		"V4":              4,
		"V6":              6,
		"CryptoV4":        24,
		"CryptoV6":        26,
		"CryptoEID":       14,
		"V4Only":          7,
		"V6Only":          8,
		"DualV4V6":        9,
	}
)

func (x NetworkType) Enum() *NetworkType {
	p := new(NetworkType)
	*p = x
	return p
}

func (x NetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_evecommon_netcmn_proto_enumTypes[2].Descriptor()
}

func (NetworkType) Type() protoreflect.EnumType {
	return &file_evecommon_netcmn_proto_enumTypes[2]
}

func (x NetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkType.Descriptor instead.
func (NetworkType) EnumDescriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{2}
}

type WirelessType int32

const (
	WirelessType_TypeNOOP WirelessType = 0
	WirelessType_WiFi     WirelessType = 1
	WirelessType_Cellular WirelessType = 2
)

// Enum value maps for WirelessType.
var (
	WirelessType_name = map[int32]string{
		0: "TypeNOOP",
		1: "WiFi",
		2: "Cellular",
	}
	WirelessType_value = map[string]int32{
		"TypeNOOP": 0,
		"WiFi":     1,
		"Cellular": 2,
	}
)

func (x WirelessType) Enum() *WirelessType {
	p := new(WirelessType)
	*p = x
	return p
}

func (x WirelessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WirelessType) Descriptor() protoreflect.EnumDescriptor {
	return file_evecommon_netcmn_proto_enumTypes[3].Descriptor()
}

func (WirelessType) Type() protoreflect.EnumType {
	return &file_evecommon_netcmn_proto_enumTypes[3]
}

func (x WirelessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WirelessType.Descriptor instead.
func (WirelessType) EnumDescriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{3}
}

type WiFiKeyScheme int32

const (
	WiFiKeyScheme_SchemeNOOP WiFiKeyScheme = 0
	WiFiKeyScheme_WPAPSK     WiFiKeyScheme = 1 // WPA-PSK
	WiFiKeyScheme_WPAEAP     WiFiKeyScheme = 2 // WPA-EAP or WPA2 Enterprise
)

// Enum value maps for WiFiKeyScheme.
var (
	WiFiKeyScheme_name = map[int32]string{
		0: "SchemeNOOP",
		1: "WPAPSK",
		2: "WPAEAP",
	}
	WiFiKeyScheme_value = map[string]int32{
		"SchemeNOOP": 0,
		"WPAPSK":     1,
		"WPAEAP":     2,
	}
)

func (x WiFiKeyScheme) Enum() *WiFiKeyScheme {
	p := new(WiFiKeyScheme)
	*p = x
	return p
}

func (x WiFiKeyScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WiFiKeyScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_evecommon_netcmn_proto_enumTypes[4].Descriptor()
}

func (WiFiKeyScheme) Type() protoreflect.EnumType {
	return &file_evecommon_netcmn_proto_enumTypes[4]
}

func (x WiFiKeyScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WiFiKeyScheme.Descriptor instead.
func (WiFiKeyScheme) EnumDescriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{4}
}

// User-defined method to use to determine the connectivity status.
type ConnectivityProbeMethod int32

const (
	// Connectivity probing method is not specified and therefore will not be used.
	ConnectivityProbeMethod_CONNECTIVITY_PROBE_METHOD_UNSPECIFIED ConnectivityProbeMethod = 0
	// Use ICMP ping against the probed endpoint to determine the connectivity status.
	ConnectivityProbeMethod_CONNECTIVITY_PROBE_METHOD_ICMP ConnectivityProbeMethod = 1
	// Try to establish TCP connection with the probed endpoint to determine the connectivity
	// status.
	ConnectivityProbeMethod_CONNECTIVITY_PROBE_METHOD_TCP ConnectivityProbeMethod = 2 // TODO: Consider adding support for BFD probing.
)

// Enum value maps for ConnectivityProbeMethod.
var (
	ConnectivityProbeMethod_name = map[int32]string{
		0: "CONNECTIVITY_PROBE_METHOD_UNSPECIFIED",
		1: "CONNECTIVITY_PROBE_METHOD_ICMP",
		2: "CONNECTIVITY_PROBE_METHOD_TCP",
	}
	ConnectivityProbeMethod_value = map[string]int32{
		"CONNECTIVITY_PROBE_METHOD_UNSPECIFIED": 0,
		"CONNECTIVITY_PROBE_METHOD_ICMP":        1,
		"CONNECTIVITY_PROBE_METHOD_TCP":         2,
	}
)

func (x ConnectivityProbeMethod) Enum() *ConnectivityProbeMethod {
	p := new(ConnectivityProbeMethod)
	*p = x
	return p
}

func (x ConnectivityProbeMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectivityProbeMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_evecommon_netcmn_proto_enumTypes[5].Descriptor()
}

func (ConnectivityProbeMethod) Type() protoreflect.EnumType {
	return &file_evecommon_netcmn_proto_enumTypes[5]
}

func (x ConnectivityProbeMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectivityProbeMethod.Descriptor instead.
func (ConnectivityProbeMethod) EnumDescriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{5}
}

type RadioAccessTechnology int32

const (
	RadioAccessTechnology_RADIO_ACCESS_TECHNOLOGY_UNSPECIFIED RadioAccessTechnology = 0
	// Global System for Mobile Communications (2G).
	RadioAccessTechnology_RADIO_ACCESS_TECHNOLOGY_GSM RadioAccessTechnology = 1
	// Universal Mobile Telecommunications System (3G).
	RadioAccessTechnology_RADIO_ACCESS_TECHNOLOGY_UMTS RadioAccessTechnology = 2
	// Long Term Evolution (4G).
	RadioAccessTechnology_RADIO_ACCESS_TECHNOLOGY_LTE RadioAccessTechnology = 3
	// 5G New Radio.
	RadioAccessTechnology_RADIO_ACCESS_TECHNOLOGY_5GNR RadioAccessTechnology = 4
)

// Enum value maps for RadioAccessTechnology.
var (
	RadioAccessTechnology_name = map[int32]string{
		0: "RADIO_ACCESS_TECHNOLOGY_UNSPECIFIED",
		1: "RADIO_ACCESS_TECHNOLOGY_GSM",
		2: "RADIO_ACCESS_TECHNOLOGY_UMTS",
		3: "RADIO_ACCESS_TECHNOLOGY_LTE",
		4: "RADIO_ACCESS_TECHNOLOGY_5GNR",
	}
	RadioAccessTechnology_value = map[string]int32{
		"RADIO_ACCESS_TECHNOLOGY_UNSPECIFIED": 0,
		"RADIO_ACCESS_TECHNOLOGY_GSM":         1,
		"RADIO_ACCESS_TECHNOLOGY_UMTS":        2,
		"RADIO_ACCESS_TECHNOLOGY_LTE":         3,
		"RADIO_ACCESS_TECHNOLOGY_5GNR":        4,
	}
)

func (x RadioAccessTechnology) Enum() *RadioAccessTechnology {
	p := new(RadioAccessTechnology)
	*p = x
	return p
}

func (x RadioAccessTechnology) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RadioAccessTechnology) Descriptor() protoreflect.EnumDescriptor {
	return file_evecommon_netcmn_proto_enumTypes[6].Descriptor()
}

func (RadioAccessTechnology) Type() protoreflect.EnumType {
	return &file_evecommon_netcmn_proto_enumTypes[6]
}

func (x RadioAccessTechnology) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RadioAccessTechnology.Descriptor instead.
func (RadioAccessTechnology) EnumDescriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{6}
}

// The IP addressing type to use for a given attach or default bearer.
type CellularIPType int32

const (
	// IP type is not specified.
	// When unspecified, EVE will not enforce an IP type in the bearer configuration.
	// The modem will instead use its built-in profiles (see CellularProfile) to determine
	// the appropriate IP type for the network.
	CellularIPType_CELLULAR_IP_TYPE_UNSPECIFIED CellularIPType = 0
	// IPv4 only.
	CellularIPType_CELLULAR_IP_TYPE_IPV4 CellularIPType = 1
	// IPv4 and IPv6.
	CellularIPType_CELLULAR_IP_TYPE_IPV4_AND_IPV6 CellularIPType = 2
	// IPv6 only.
	CellularIPType_CELLULAR_IP_TYPE_IPV6 CellularIPType = 3
)

// Enum value maps for CellularIPType.
var (
	CellularIPType_name = map[int32]string{
		0: "CELLULAR_IP_TYPE_UNSPECIFIED",
		1: "CELLULAR_IP_TYPE_IPV4",
		2: "CELLULAR_IP_TYPE_IPV4_AND_IPV6",
		3: "CELLULAR_IP_TYPE_IPV6",
	}
	CellularIPType_value = map[string]int32{
		"CELLULAR_IP_TYPE_UNSPECIFIED":   0,
		"CELLULAR_IP_TYPE_IPV4":          1,
		"CELLULAR_IP_TYPE_IPV4_AND_IPV6": 2,
		"CELLULAR_IP_TYPE_IPV6":          3,
	}
)

func (x CellularIPType) Enum() *CellularIPType {
	p := new(CellularIPType)
	*p = x
	return p
}

func (x CellularIPType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellularIPType) Descriptor() protoreflect.EnumDescriptor {
	return file_evecommon_netcmn_proto_enumTypes[7].Descriptor()
}

func (CellularIPType) Type() protoreflect.EnumType {
	return &file_evecommon_netcmn_proto_enumTypes[7]
}

func (x CellularIPType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellularIPType.Descriptor instead.
func (CellularIPType) EnumDescriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{7}
}

// Purpose of a given cellular bearer.
type BearerType int32

const (
	// Bearer type is not specified.
	BearerType_BEARER_TYPE_UNSPECIFIED BearerType = 0
	// Bearer used for the initial attach procedure.
	BearerType_BEARER_TYPE_ATTACH BearerType = 1
	// Default connection bearer providing packet data access to the network.
	BearerType_BEARER_TYPE_DEFAULT BearerType = 2
	// Secondary context (2G/3G) or dedicated bearer (4G), defined by the user
	// of the API. These bearers use the same IP address used by a primary
	// context or default bearer and provide a dedicated flow for specific
	// traffic with different QoS settings.
	BearerType_BEARER_TYPE_DEDICATED BearerType = 3
)

// Enum value maps for BearerType.
var (
	BearerType_name = map[int32]string{
		0: "BEARER_TYPE_UNSPECIFIED",
		1: "BEARER_TYPE_ATTACH",
		2: "BEARER_TYPE_DEFAULT",
		3: "BEARER_TYPE_DEDICATED",
	}
	BearerType_value = map[string]int32{
		"BEARER_TYPE_UNSPECIFIED": 0,
		"BEARER_TYPE_ATTACH":      1,
		"BEARER_TYPE_DEFAULT":     2,
		"BEARER_TYPE_DEDICATED":   3,
	}
)

func (x BearerType) Enum() *BearerType {
	p := new(BearerType)
	*p = x
	return p
}

func (x BearerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BearerType) Descriptor() protoreflect.EnumDescriptor {
	return file_evecommon_netcmn_proto_enumTypes[8].Descriptor()
}

func (BearerType) Type() protoreflect.EnumType {
	return &file_evecommon_netcmn_proto_enumTypes[8]
}

func (x BearerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BearerType.Descriptor instead.
func (BearerType) EnumDescriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{8}
}

// CellularAuthProtocol defines the authentication protocol used for cellular connection.
type CellularAuthProtocol int32

const (
	// No authentication.
	CellularAuthProtocol_CELLULAR_AUTH_PROTOCOL_NONE CellularAuthProtocol = 0
	// Password Authentication Protocol.
	CellularAuthProtocol_CELLULAR_AUTH_PROTOCOL_PAP CellularAuthProtocol = 1
	// Challenge-Handshake Authentication Protocol.
	CellularAuthProtocol_CELLULAR_AUTH_PROTOCOL_CHAP CellularAuthProtocol = 2
	// Both PAP and CHAP.
	CellularAuthProtocol_CELLULAR_AUTH_PROTOCOL_PAP_AND_CHAP CellularAuthProtocol = 3
)

// Enum value maps for CellularAuthProtocol.
var (
	CellularAuthProtocol_name = map[int32]string{
		0: "CELLULAR_AUTH_PROTOCOL_NONE",
		1: "CELLULAR_AUTH_PROTOCOL_PAP",
		2: "CELLULAR_AUTH_PROTOCOL_CHAP",
		3: "CELLULAR_AUTH_PROTOCOL_PAP_AND_CHAP",
	}
	CellularAuthProtocol_value = map[string]int32{
		"CELLULAR_AUTH_PROTOCOL_NONE":         0,
		"CELLULAR_AUTH_PROTOCOL_PAP":          1,
		"CELLULAR_AUTH_PROTOCOL_CHAP":         2,
		"CELLULAR_AUTH_PROTOCOL_PAP_AND_CHAP": 3,
	}
)

func (x CellularAuthProtocol) Enum() *CellularAuthProtocol {
	p := new(CellularAuthProtocol)
	*p = x
	return p
}

func (x CellularAuthProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellularAuthProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_evecommon_netcmn_proto_enumTypes[9].Descriptor()
}

func (CellularAuthProtocol) Type() protoreflect.EnumType {
	return &file_evecommon_netcmn_proto_enumTypes[9]
}

func (x CellularAuthProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellularAuthProtocol.Descriptor instead.
func (CellularAuthProtocol) EnumDescriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{9}
}

// NetworkConfigOrigin enumerates all possible origins of a network port configuration.
type NetworkConfigOrigin int32

const (
	// Unknown or unset origin.
	NetworkConfigOrigin_NETWORK_CONFIG_ORIGIN_UNSPECIFIED NetworkConfigOrigin = 0
	// Config received from the controller.
	NetworkConfigOrigin_NETWORK_CONFIG_ORIGIN_CONTROLLER NetworkConfigOrigin = 1
	// Initial device config embedded in the EVE installer, signed by the controller.
	NetworkConfigOrigin_NETWORK_CONFIG_ORIGIN_BOOTSTRAP NetworkConfigOrigin = 2
	// Manually created JSON config injected into the installer.
	NetworkConfigOrigin_NETWORK_CONFIG_ORIGIN_OVERRIDE NetworkConfigOrigin = 3
	// Fallback configuration automatically generated to enable DHCP on all Ethernet ports.
	// Used when no network config is available or when "network.fallback.any.eth" is enabled
	// and none of the existing configs provide controller connectivity.
	NetworkConfigOrigin_NETWORK_CONFIG_ORIGIN_LASTRESORT NetworkConfigOrigin = 4
	// Config entered via the terminal UI (TUI).
	NetworkConfigOrigin_NETWORK_CONFIG_ORIGIN_TUI NetworkConfigOrigin = 5
	// Configuration signed by the controller and delivered through the
	// Local Operator Console (LOC) in an air-gapped environment.
	NetworkConfigOrigin_NETWORK_CONFIG_ORIGIN_LOC NetworkConfigOrigin = 6
	// Config changes made locally through the Local Profile Server (LPS).
	NetworkConfigOrigin_NETWORK_CONFIG_ORIGIN_LPS NetworkConfigOrigin = 7
)

// Enum value maps for NetworkConfigOrigin.
var (
	NetworkConfigOrigin_name = map[int32]string{
		0: "NETWORK_CONFIG_ORIGIN_UNSPECIFIED",
		1: "NETWORK_CONFIG_ORIGIN_CONTROLLER",
		2: "NETWORK_CONFIG_ORIGIN_BOOTSTRAP",
		3: "NETWORK_CONFIG_ORIGIN_OVERRIDE",
		4: "NETWORK_CONFIG_ORIGIN_LASTRESORT",
		5: "NETWORK_CONFIG_ORIGIN_TUI",
		6: "NETWORK_CONFIG_ORIGIN_LOC",
		7: "NETWORK_CONFIG_ORIGIN_LPS",
	}
	NetworkConfigOrigin_value = map[string]int32{
		"NETWORK_CONFIG_ORIGIN_UNSPECIFIED": 0,
		"NETWORK_CONFIG_ORIGIN_CONTROLLER":  1,
		"NETWORK_CONFIG_ORIGIN_BOOTSTRAP":   2,
		"NETWORK_CONFIG_ORIGIN_OVERRIDE":    3,
		"NETWORK_CONFIG_ORIGIN_LASTRESORT":  4,
		"NETWORK_CONFIG_ORIGIN_TUI":         5,
		"NETWORK_CONFIG_ORIGIN_LOC":         6,
		"NETWORK_CONFIG_ORIGIN_LPS":         7,
	}
)

func (x NetworkConfigOrigin) Enum() *NetworkConfigOrigin {
	p := new(NetworkConfigOrigin)
	*p = x
	return p
}

func (x NetworkConfigOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkConfigOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_evecommon_netcmn_proto_enumTypes[10].Descriptor()
}

func (NetworkConfigOrigin) Type() protoreflect.EnumType {
	return &file_evecommon_netcmn_proto_enumTypes[10]
}

func (x NetworkConfigOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkConfigOrigin.Descriptor instead.
func (NetworkConfigOrigin) EnumDescriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{10}
}

type IpRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *IpRange) Reset() {
	*x = IpRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evecommon_netcmn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRange) ProtoMessage() {}

func (x *IpRange) ProtoReflect() protoreflect.Message {
	mi := &file_evecommon_netcmn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRange.ProtoReflect.Descriptor instead.
func (*IpRange) Descriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{0}
}

func (x *IpRange) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *IpRange) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type ProxyServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proto  ProxyProto `protobuf:"varint,1,opt,name=proto,proto3,enum=org.lfedge.eve.common.ProxyProto" json:"proto,omitempty"`
	Server string     `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Port   uint32     `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ProxyServer) Reset() {
	*x = ProxyServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evecommon_netcmn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyServer) ProtoMessage() {}

func (x *ProxyServer) ProtoReflect() protoreflect.Message {
	mi := &file_evecommon_netcmn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyServer.ProtoReflect.Descriptor instead.
func (*ProxyServer) Descriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{1}
}

func (x *ProxyServer) GetProto() ProxyProto {
	if x != nil {
		return x.Proto
	}
	return ProxyProto_PROXY_HTTP
}

func (x *ProxyServer) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *ProxyServer) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable network level proxy in the form of WPAD
	NetworkProxyEnable bool `protobuf:"varint,1,opt,name=networkProxyEnable,proto3" json:"networkProxyEnable,omitempty"`
	// dedicated per protocol information
	Proxies []*ProxyServer `protobuf:"bytes,2,rep,name=proxies,proto3" json:"proxies,omitempty"`
	// exceptions separated by commas
	Exceptions string `protobuf:"bytes,3,opt,name=exceptions,proto3" json:"exceptions,omitempty"`
	// or pacfile can be in place of others
	// base64 encoded
	Pacfile string `protobuf:"bytes,4,opt,name=pacfile,proto3" json:"pacfile,omitempty"`
	// Direct URL for wpad.dat download
	NetworkProxyURL string `protobuf:"bytes,5,opt,name=networkProxyURL,proto3" json:"networkProxyURL,omitempty"`
	// Uploaded proxy certificate or certificate chain for MITM
	// this may be needed either in explicit (has ProxyServer items), automatic
	// (networkProxyEnable) or transparent (network layer not aware of proxy)
	ProxyCertPEM [][]byte `protobuf:"bytes,6,rep,name=proxyCertPEM,proto3" json:"proxyCertPEM,omitempty"`
}

func (x *ProxyConfig) Reset() {
	*x = ProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evecommon_netcmn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyConfig) ProtoMessage() {}

func (x *ProxyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_evecommon_netcmn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyConfig.ProtoReflect.Descriptor instead.
func (*ProxyConfig) Descriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{2}
}

func (x *ProxyConfig) GetNetworkProxyEnable() bool {
	if x != nil {
		return x.NetworkProxyEnable
	}
	return false
}

func (x *ProxyConfig) GetProxies() []*ProxyServer {
	if x != nil {
		return x.Proxies
	}
	return nil
}

func (x *ProxyConfig) GetExceptions() string {
	if x != nil {
		return x.Exceptions
	}
	return ""
}

func (x *ProxyConfig) GetPacfile() string {
	if x != nil {
		return x.Pacfile
	}
	return ""
}

func (x *ProxyConfig) GetNetworkProxyURL() string {
	if x != nil {
		return x.NetworkProxyURL
	}
	return ""
}

func (x *ProxyConfig) GetProxyCertPEM() [][]byte {
	if x != nil {
		return x.ProxyCertPEM
	}
	return nil
}

// These are list of static mapping that can be added to network
type ZnetStaticDNSEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName string   `protobuf:"bytes,1,opt,name=HostName,proto3" json:"HostName,omitempty"`
	Address  []string `protobuf:"bytes,2,rep,name=Address,proto3" json:"Address,omitempty"`
}

func (x *ZnetStaticDNSEntry) Reset() {
	*x = ZnetStaticDNSEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evecommon_netcmn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZnetStaticDNSEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZnetStaticDNSEntry) ProtoMessage() {}

func (x *ZnetStaticDNSEntry) ProtoReflect() protoreflect.Message {
	mi := &file_evecommon_netcmn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZnetStaticDNSEntry.ProtoReflect.Descriptor instead.
func (*ZnetStaticDNSEntry) Descriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{3}
}

func (x *ZnetStaticDNSEntry) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ZnetStaticDNSEntry) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

// Common for IPv4 and IPv6
type Ipspec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dhcp DHCPType `protobuf:"varint,2,opt,name=dhcp,proto3,enum=org.lfedge.eve.common.DHCPType" json:"dhcp,omitempty"`
	// subnet is CIDR format...x.y.z.l/nn
	Subnet  string `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Gateway string `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Domain  string `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
	// ntp and more_ntp are used as a union to specify several NTP servers
	// via IP address or FQDN
	// this is for historical reasons when we only allowed to specify one
	// NTP server
	Ntp     string   `protobuf:"bytes,7,opt,name=ntp,proto3" json:"ntp,omitempty"`
	MoreNtp []string `protobuf:"bytes,10,rep,name=more_ntp,json=moreNtp,proto3" json:"more_ntp,omitempty"`
	Dns     []string `protobuf:"bytes,8,rep,name=dns,proto3" json:"dns,omitempty"`
	// for IPAM management when dhcp is turned on.
	// If none provided, system will default pool.
	DhcpRange *IpRange `protobuf:"bytes,9,opt,name=dhcpRange,proto3" json:"dhcpRange,omitempty"`
	// Even if DhcpType is Client, EVE still accepts static
	// IP config and will merge it with the DHCP-provided one by default
	// use the following option to override this behavior
	DhcpOptionsIgnore *DhcpOptionsIgnore `protobuf:"bytes,11,opt,name=dhcp_options_ignore,json=dhcpOptionsIgnore,proto3" json:"dhcp_options_ignore,omitempty"`
}

func (x *Ipspec) Reset() {
	*x = Ipspec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evecommon_netcmn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipspec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipspec) ProtoMessage() {}

func (x *Ipspec) ProtoReflect() protoreflect.Message {
	mi := &file_evecommon_netcmn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipspec.ProtoReflect.Descriptor instead.
func (*Ipspec) Descriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{4}
}

func (x *Ipspec) GetDhcp() DHCPType {
	if x != nil {
		return x.Dhcp
	}
	return DHCPType_DHCPNoop
}

func (x *Ipspec) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *Ipspec) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *Ipspec) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Ipspec) GetNtp() string {
	if x != nil {
		return x.Ntp
	}
	return ""
}

func (x *Ipspec) GetMoreNtp() []string {
	if x != nil {
		return x.MoreNtp
	}
	return nil
}

func (x *Ipspec) GetDns() []string {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *Ipspec) GetDhcpRange() *IpRange {
	if x != nil {
		return x.DhcpRange
	}
	return nil
}

func (x *Ipspec) GetDhcpOptionsIgnore() *DhcpOptionsIgnore {
	if x != nil {
		return x.DhcpOptionsIgnore
	}
	return nil
}

// DhcpOptionsIgnore specifies which DHCP-provided options
// should be ignored by the device, allowing static configuration
// to override DHCP where applicable.
//
// Currently supported options include:
//   - IP addresses
//   - NTP servers
//   - DNS servers and domains
//   - Router (gateway) addresses
//
// This allows flexible merging or exclusive use of static config fields.
//
// For full DHCP option references:
//   - DHCP: https://www.iana.org/assignments/bootp-dhcp-parameters/bootp-dhcp-parameters.xhtml
//   - DHCPv6: https://www.iana.org/assignments/dhcpv6-parameters/dhcpv6-parameters.xhtml
type DhcpOptionsIgnore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When true, statically configured NTP servers are used exclusively,
	// ignoring any NTP servers provided by DHCP.
	// If true and no static NTP servers are set, no NTP servers will be used.
	// For DHCP (IPv4), this applies to option 42.
	// For DHCPv6 (IPv6), this applies to option 56.
	NtpServerExclusively bool `protobuf:"varint,1,opt,name=ntp_server_exclusively,json=ntpServerExclusively,proto3" json:"ntp_server_exclusively,omitempty"`
	// When true, statically configured IP addresses are used exclusively,
	// ignoring any IP addresses provided by DHCP.
	// If true and no static IP addresses are set, the interface will have no IP assigned.
	IpAddressesExclusively bool `protobuf:"varint,2,opt,name=ip_addresses_exclusively,json=ipAddressesExclusively,proto3" json:"ip_addresses_exclusively,omitempty"`
	// When true, statically configured DNS servers and domain name(s) are used
	// exclusively, ignoring any DNS-related configuration provided by DHCP.
	// If true and no static DNS servers are set, no DNS servers will be used.
	// Similarly, if no static domain name(s) are set, no domain name(s) will be used.
	// For DHCP (IPv4), this applies to option 6 (DNS servers), option 15
	// (single domain name), and option 119 (search domains).
	// For DHCPv6 (IPv6), this applies to option 23 (DNS servers) and option 24
	// (domain search list).
	DnsConfigExclusively bool `protobuf:"varint,3,opt,name=dns_config_exclusively,json=dnsConfigExclusively,proto3" json:"dns_config_exclusively,omitempty"`
	// When true, statically configured gateway addresses are used exclusively,
	// ignoring any routers provided by DHCP.
	// If true and no static routers are set, no gateway will be used.
	// For DHCP (IPv4), this applies to option 3.
	// For DHCPv6 (IPv6), this applies to option 24.
	GatewaysExclusively bool `protobuf:"varint,4,opt,name=gateways_exclusively,json=gatewaysExclusively,proto3" json:"gateways_exclusively,omitempty"`
}

func (x *DhcpOptionsIgnore) Reset() {
	*x = DhcpOptionsIgnore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evecommon_netcmn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DhcpOptionsIgnore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpOptionsIgnore) ProtoMessage() {}

func (x *DhcpOptionsIgnore) ProtoReflect() protoreflect.Message {
	mi := &file_evecommon_netcmn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpOptionsIgnore.ProtoReflect.Descriptor instead.
func (*DhcpOptionsIgnore) Descriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{5}
}

func (x *DhcpOptionsIgnore) GetNtpServerExclusively() bool {
	if x != nil {
		return x.NtpServerExclusively
	}
	return false
}

func (x *DhcpOptionsIgnore) GetIpAddressesExclusively() bool {
	if x != nil {
		return x.IpAddressesExclusively
	}
	return false
}

func (x *DhcpOptionsIgnore) GetDnsConfigExclusively() bool {
	if x != nil {
		return x.DnsConfigExclusively
	}
	return false
}

func (x *DhcpOptionsIgnore) GetGatewaysExclusively() bool {
	if x != nil {
		return x.GatewaysExclusively
	}
	return false
}

// Address of a remote endpoint to probe in order to determine connectivity status.
type ProbeEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP address or FQDN.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// TCP port required for CONNECTIVITY_PROBE_METHOD_TCP.
	// Leave empty for CONNECTIVITY_PROBE_METHOD_ICMP.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ProbeEndpoint) Reset() {
	*x = ProbeEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evecommon_netcmn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeEndpoint) ProtoMessage() {}

func (x *ProbeEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_evecommon_netcmn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeEndpoint.ProtoReflect.Descriptor instead.
func (*ProbeEndpoint) Descriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{6}
}

func (x *ProbeEndpoint) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ProbeEndpoint) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Configuration for user-defined connectivity-testing probe.
type ConnectivityProbe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Method to use to determine the connectivity status.
	ProbeMethod ConnectivityProbeMethod `protobuf:"varint,1,opt,name=probe_method,json=probeMethod,proto3,enum=org.lfedge.eve.common.ConnectivityProbeMethod" json:"probe_method,omitempty"`
	// Endpoint to probe using the selected probing mechanism to determine
	// the connectivity status.
	ProbeEndpoint *ProbeEndpoint `protobuf:"bytes,2,opt,name=probe_endpoint,json=probeEndpoint,proto3" json:"probe_endpoint,omitempty"`
}

func (x *ConnectivityProbe) Reset() {
	*x = ConnectivityProbe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evecommon_netcmn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectivityProbe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectivityProbe) ProtoMessage() {}

func (x *ConnectivityProbe) ProtoReflect() protoreflect.Message {
	mi := &file_evecommon_netcmn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectivityProbe.ProtoReflect.Descriptor instead.
func (*ConnectivityProbe) Descriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{7}
}

func (x *ConnectivityProbe) GetProbeMethod() ConnectivityProbeMethod {
	if x != nil {
		return x.ProbeMethod
	}
	return ConnectivityProbeMethod_CONNECTIVITY_PROBE_METHOD_UNSPECIFIED
}

func (x *ConnectivityProbe) GetProbeEndpoint() *ProbeEndpoint {
	if x != nil {
		return x.ProbeEndpoint
	}
	return nil
}

// PortConfigSource describes the origin of the configuration used for a network port.
// It helps distinguish between controller-provided, locally-modified, or initial configs.
type PortConfigSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates where EVE obtained the network config.
	Origin NetworkConfigOrigin `protobuf:"varint,1,opt,name=origin,proto3,enum=org.lfedge.eve.common.NetworkConfigOrigin" json:"origin,omitempty"`
	// Timestamp when this port’s configuration was originally submitted
	// or created at its source.
	//
	// Meaning depends on the origin:
	// - Controller, LOC, bootstrap: timestamp provided by the controller.
	// - Local override.json: when the file was first loaded by EVE.
	// - Last-resort: when EVE generated the fallback config.
	// - LPS modifications: when the modified config was received.
	// - TUI: when the user submitted the configuration.
	//
	// This is different from DevicePortStatus.timePriority, which is used
	// to compare and prioritize different sources of network configuration
	// (and may be synthetic for some sources, e.g. year 2000 for override.json,
	// epoch 0 for last-resort). By contrast, submitted_at represents when this
	// port’s configuration first came into existence, regardless of when or whether
	// the device applied it.
	//
	// Note: this is a per-port timestamp. The underlying network config may
	// cover multiple ports, but only the portion relevant to this port is
	// reflected here.
	SubmittedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
}

func (x *PortConfigSource) Reset() {
	*x = PortConfigSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evecommon_netcmn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortConfigSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortConfigSource) ProtoMessage() {}

func (x *PortConfigSource) ProtoReflect() protoreflect.Message {
	mi := &file_evecommon_netcmn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortConfigSource.ProtoReflect.Descriptor instead.
func (*PortConfigSource) Descriptor() ([]byte, []int) {
	return file_evecommon_netcmn_proto_rawDescGZIP(), []int{8}
}

func (x *PortConfigSource) GetOrigin() NetworkConfigOrigin {
	if x != nil {
		return x.Origin
	}
	return NetworkConfigOrigin_NETWORK_CONFIG_ORIGIN_UNSPECIFIED
}

func (x *PortConfigSource) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

var File_evecommon_netcmn_proto protoreflect.FileDescriptor

var file_evecommon_netcmn_proto_rawDesc = []byte{
	0x0a, 0x16, 0x65, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x63,
	0x6d, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x31, 0x0a, 0x07, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x22, 0x72, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c,
	0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55,
	0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x65, 0x72, 0x74, 0x50, 0x45, 0x4d, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x65, 0x72, 0x74, 0x50, 0x45, 0x4d, 0x22, 0x4a, 0x0a,
	0x12, 0x5a, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x4e, 0x53, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xde, 0x02, 0x0a, 0x06, 0x69, 0x70,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x68, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x64, 0x68, 0x63, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x74, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6e, 0x74, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x74,
	0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x72, 0x65, 0x4e, 0x74, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x68, 0x63, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x70,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x68, 0x63, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x58, 0x0a, 0x13, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x11, 0x64, 0x68, 0x63, 0x70, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x11, 0x44,
	0x68, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x6e, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x6e, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79,
	0x12, 0x34, 0x0a, 0x16, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x14, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x22, 0x37, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x2a, 0x5f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x53, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x46, 0x54, 0x50, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xff,
	0x01, 0x2a, 0x3e, 0x0a, 0x08, 0x44, 0x48, 0x43, 0x50, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x48, 0x43, 0x50, 0x4e, 0x6f, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x48, 0x43, 0x50, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10,
	0x04, 0x2a, 0x83, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x54, 0x59, 0x50, 0x45,
	0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x34, 0x10, 0x04, 0x12, 0x06,
	0x0a, 0x02, 0x56, 0x36, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x56, 0x34, 0x10, 0x18, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x56, 0x36,
	0x10, 0x1a, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x45, 0x49, 0x44, 0x10,
	0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x34, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x07, 0x12, 0x0a, 0x0a,
	0x06, 0x56, 0x36, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x75, 0x61,
	0x6c, 0x56, 0x34, 0x56, 0x36, 0x10, 0x09, 0x2a, 0x34, 0x0a, 0x0c, 0x57, 0x69, 0x72, 0x65, 0x6c,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x4f, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x69, 0x46, 0x69, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x10, 0x02, 0x2a, 0x37, 0x0a,
	0x0d, 0x57, 0x69, 0x46, 0x69, 0x4b, 0x65, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x57, 0x50, 0x41, 0x50, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x50,
	0x41, 0x45, 0x41, 0x50, 0x10, 0x02, 0x2a, 0x8b, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x42, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54,
	0x43, 0x50, 0x10, 0x02, 0x2a, 0xc6, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x27,
	0x0a, 0x23, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x41, 0x44, 0x49, 0x4f,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f,
	0x47, 0x59, 0x5f, 0x47, 0x53, 0x4d, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x41, 0x44, 0x49,
	0x4f, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c,
	0x4f, 0x47, 0x59, 0x5f, 0x55, 0x4d, 0x54, 0x53, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x41,
	0x44, 0x49, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e,
	0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x4c, 0x54, 0x45, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x52,
	0x41, 0x44, 0x49, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x45, 0x43, 0x48,
	0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x35, 0x47, 0x4e, 0x52, 0x10, 0x04, 0x2a, 0x8c, 0x01,
	0x0a, 0x0e, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x49, 0x50, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x1c, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x49, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x49,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x49, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x03, 0x2a, 0x75, 0x0a, 0x0a,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x45,
	0x41, 0x52, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x45, 0x41, 0x52, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x45, 0x41, 0x52,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0xa1, 0x01, 0x0a, 0x14, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x1b,
	0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x41, 0x50, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x50, 0x10, 0x02, 0x12, 0x27,
	0x0a, 0x23, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x50, 0x41, 0x50, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x43, 0x48, 0x41, 0x50, 0x10, 0x03, 0x2a, 0xae, 0x02, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x25, 0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4f,
	0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x10,
	0x02, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52,
	0x49, 0x44, 0x45, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x52, 0x45, 0x53, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4f, 0x52,
	0x49, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x55, 0x49, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4f, 0x52, 0x49,
	0x47, 0x49, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4f, 0x52, 0x49, 0x47,
	0x49, 0x4e, 0x5f, 0x4c, 0x50, 0x53, 0x10, 0x07, 0x42, 0x4d, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x2e,
	0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x42, 0x09, 0x45, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x01, 0x5a, 0x27,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x66, 0x2d, 0x65, 0x64,
	0x67, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x76,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_evecommon_netcmn_proto_rawDescOnce sync.Once
	file_evecommon_netcmn_proto_rawDescData = file_evecommon_netcmn_proto_rawDesc
)

func file_evecommon_netcmn_proto_rawDescGZIP() []byte {
	file_evecommon_netcmn_proto_rawDescOnce.Do(func() {
		file_evecommon_netcmn_proto_rawDescData = protoimpl.X.CompressGZIP(file_evecommon_netcmn_proto_rawDescData)
	})
	return file_evecommon_netcmn_proto_rawDescData
}

var file_evecommon_netcmn_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_evecommon_netcmn_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_evecommon_netcmn_proto_goTypes = []interface{}{
	(ProxyProto)(0),               // 0: org.lfedge.eve.common.proxyProto
	(DHCPType)(0),                 // 1: org.lfedge.eve.common.DHCPType
	(NetworkType)(0),              // 2: org.lfedge.eve.common.NetworkType
	(WirelessType)(0),             // 3: org.lfedge.eve.common.WirelessType
	(WiFiKeyScheme)(0),            // 4: org.lfedge.eve.common.WiFiKeyScheme
	(ConnectivityProbeMethod)(0),  // 5: org.lfedge.eve.common.ConnectivityProbeMethod
	(RadioAccessTechnology)(0),    // 6: org.lfedge.eve.common.RadioAccessTechnology
	(CellularIPType)(0),           // 7: org.lfedge.eve.common.CellularIPType
	(BearerType)(0),               // 8: org.lfedge.eve.common.BearerType
	(CellularAuthProtocol)(0),     // 9: org.lfedge.eve.common.CellularAuthProtocol
	(NetworkConfigOrigin)(0),      // 10: org.lfedge.eve.common.NetworkConfigOrigin
	(*IpRange)(nil),               // 11: org.lfedge.eve.common.ipRange
	(*ProxyServer)(nil),           // 12: org.lfedge.eve.common.ProxyServer
	(*ProxyConfig)(nil),           // 13: org.lfedge.eve.common.ProxyConfig
	(*ZnetStaticDNSEntry)(nil),    // 14: org.lfedge.eve.common.ZnetStaticDNSEntry
	(*Ipspec)(nil),                // 15: org.lfedge.eve.common.ipspec
	(*DhcpOptionsIgnore)(nil),     // 16: org.lfedge.eve.common.DhcpOptionsIgnore
	(*ProbeEndpoint)(nil),         // 17: org.lfedge.eve.common.ProbeEndpoint
	(*ConnectivityProbe)(nil),     // 18: org.lfedge.eve.common.ConnectivityProbe
	(*PortConfigSource)(nil),      // 19: org.lfedge.eve.common.PortConfigSource
	(*timestamppb.Timestamp)(nil), // 20: google.protobuf.Timestamp
}
var file_evecommon_netcmn_proto_depIdxs = []int32{
	0,  // 0: org.lfedge.eve.common.ProxyServer.proto:type_name -> org.lfedge.eve.common.proxyProto
	12, // 1: org.lfedge.eve.common.ProxyConfig.proxies:type_name -> org.lfedge.eve.common.ProxyServer
	1,  // 2: org.lfedge.eve.common.ipspec.dhcp:type_name -> org.lfedge.eve.common.DHCPType
	11, // 3: org.lfedge.eve.common.ipspec.dhcpRange:type_name -> org.lfedge.eve.common.ipRange
	16, // 4: org.lfedge.eve.common.ipspec.dhcp_options_ignore:type_name -> org.lfedge.eve.common.DhcpOptionsIgnore
	5,  // 5: org.lfedge.eve.common.ConnectivityProbe.probe_method:type_name -> org.lfedge.eve.common.ConnectivityProbeMethod
	17, // 6: org.lfedge.eve.common.ConnectivityProbe.probe_endpoint:type_name -> org.lfedge.eve.common.ProbeEndpoint
	10, // 7: org.lfedge.eve.common.PortConfigSource.origin:type_name -> org.lfedge.eve.common.NetworkConfigOrigin
	20, // 8: org.lfedge.eve.common.PortConfigSource.submitted_at:type_name -> google.protobuf.Timestamp
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_evecommon_netcmn_proto_init() }
func file_evecommon_netcmn_proto_init() {
	if File_evecommon_netcmn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_evecommon_netcmn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evecommon_netcmn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evecommon_netcmn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evecommon_netcmn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZnetStaticDNSEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evecommon_netcmn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipspec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evecommon_netcmn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DhcpOptionsIgnore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evecommon_netcmn_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evecommon_netcmn_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectivityProbe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evecommon_netcmn_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortConfigSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_evecommon_netcmn_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_evecommon_netcmn_proto_goTypes,
		DependencyIndexes: file_evecommon_netcmn_proto_depIdxs,
		EnumInfos:         file_evecommon_netcmn_proto_enumTypes,
		MessageInfos:      file_evecommon_netcmn_proto_msgTypes,
	}.Build()
	File_evecommon_netcmn_proto = out.File
	file_evecommon_netcmn_proto_rawDesc = nil
	file_evecommon_netcmn_proto_goTypes = nil
	file_evecommon_netcmn_proto_depIdxs = nil
}
