#!/bin/sh
#
# input is a tarball on stdin with kernel and cmdline in /boot
# output is an iso on stdout
#
# The following env variables change the behaviour of this script
#     DEBUG - makes this script verbose
#     VOLUME_LABEL - sets the volume label of the ISO image
#     IN_IMAGE - if set, the file to use as installer rootfs image, from inside the tar stream, rather than the entire stream to make a squashfs
#     IN_FORMAT - format of the IN_IMAGE, to enable extracting elements from it; can be squashfs or raw

set -e
[ -n "$DEBUG" ] && set -x

copy() {
   dd if="$1" of="$2" bs=1M 2>/dev/null
}

#
# Extract partitions from stdin to a working directory
# We could do this in /tmp, but it might be really big, and for cases where
# /tmp is tmpfs, that might use up a lot of memory
#
ROOTFS=/var/efi-rootfs
mkdir -p $ROOTFS
cd $ROOTFS
bsdtar xzf -

# BUSYBOXDIR will be used to extract busybox and its components for use in initrd
BUSYBOXDIR=/var/busybox-$$
mkdir -p $BUSYBOXDIR

# Create and change to a working directory for the ISO image
TMPDIR=/var/efiparts-$$
mkdir -p $TMPDIR
cd $TMPDIR

# if IN_IMAGE is set, we will use that as the rootfs image rather than trying to construct it from the tar stream
# anything else in the tar stream will be placed in the root of the ISO image
if [ -n "$IN_IMAGE" ]; then
   # save the contents
   cp -r "${ROOTFS}/." .
   # rename the IN_IMAGE to rootfs_installer.img
   mv "${IN_IMAGE}" rootfs_installer.img
   # Some files must also be present at the rootfs of the boot device
   # extract any needed files
   case "$IN_FORMAT" in
      squashfs)
         # extract the rootfs from the squashfs image
         unsquashfs -d . rootfs_installer.img EFI
         unsquashfs -d . rootfs_installer.img boot
         unsquashfs -d ${BUSYBOXDIR} rootfs_installer.img bin lib
         ;;
      raw)
         # extract the rootfs from the raw image
         mkdir -p /mnt
         mount -o loop,ro rootfs_installer.img /mnt
         cp -r /mnt/boot .
         cp -r /mnt/EFI .
         cp -r /mnt/bin ${BUSYBOXDIR}/
         cp -r /mnt/lib ${BUSYBOXDIR}/
         umount ${ROOTFS}
         ;;
      *)
         echo "Unknown IN_FORMAT: $IN_FORMAT"
         exit 1
         ;;
   esac
else
   # Some files must also be present at the rootfs of the boot device
   cp -r ${ROOTFS}/EFI .
   cp -r ${ROOTFS}/boot .
   cp -r ${ROOTFS}/bin ${BUSYBOXDIR}/
   cp -r ${ROOTFS}/lib ${BUSYBOXDIR}/
   mkdir -p ./etc
   cp -r ${ROOTFS}/etc/eve-release ./etc/

   # IN_IMAGE is not set, so we will create a squashfs rootfs from the tar stream
   mksquashfs $ROOTFS rootfs_installer.img -noappend -comp xz -no-recovery
fi

# create a ISO with a EFI boot partition
# Stuff it into a FAT filesystem, making it as small as possible.  511KiB
# headroom seems to be enough; (x+31)/32*32 rounds up to multiple of 32.
mkfs.vfat -v -C boot.img \
        $(( ($(stat -c %s EFI/BOOT/BOOT*EFI) / 1024 + 511) \
        / 32 * 32 )) > /dev/null

mmd -i boot.img ::/EFI
mmd -i boot.img ::/EFI/BOOT
mcopy -i boot.img EFI/BOOT/* ::/EFI/BOOT/

# for installer we need to add a uuid and override the grub.cfg
if [ "$1" = installer ]; then
   mkdir -p boot
   touch boot/.boot_repository
   od -An -x -N 16 /dev/random | tr -d ' ' > boot/.uuid
   # do not try overriding grub.cfg inside the fat32 image.
   # UEFI does not make it available to the EFI filesystem, it just loads from
   # wherever it sees its $prefix.
   # However, some UEFI implementations *might* do it, so we insert one there that just
   # loads the next one.
   cat > /tmp/grub.cfg <<'EOF'
install_part="$cmddevice"
set dev=$install_part

set root=$dev
configfile ($dev)/EFI/BOOT/grub.cfg
EOF
   mcopy -i boot.img -o /tmp/grub.cfg ::/EFI/BOOT/
fi

# was a volume label set? If so, also create an initrd.img that can find that label
# unfortunately, the kernel does not support ISO label as a root= option
# see all of the options https://github.com/torvalds/linux/blob/b831f83e40a24f07c8dcba5be408d93beedc820f/block/early-lookup.c#L216-L244
VOL_LABEL=""
if [ -n "$VOLUME_LABEL" ]; then
   VOL_LABEL="-V $VOLUME_LABEL"
fi

if [ ! -e boot/initrd.img ]; then
   # all of the things we need to make a simple initrd
   mkdir -p /tmp/initrd
   (cd /tmp/initrd
   mkdir -p bin lib sbin etc proc sys newroot
   cp /initrd.sh init
   cp "${BUSYBOXDIR}"/bin/busybox bin/
   cp "${BUSYBOXDIR}"/lib/ld-musl* lib/
   /bin/busybox --install -s /tmp/initrd/bin
   find . | cpio -H newc -o | gzip > /tmp/initrd.img)
   mv /tmp/initrd.img boot/initrd.img
fi

# shellcheck disable=SC2086
xorriso -as mkisofs \
        -m rootfs-\* -R -e boot.img -hide boot.img -hide boot.catalog -no-emul-boot ${VOL_LABEL} -o /tmp/disk.iso .
copy /tmp/disk.iso /output.iso

# How to build a VHDX. Commented out because we are currently not using it
# Don't delete: It took too long to figure out how to do this...
# # create a disk image (150MB)
# # This is a little odd, as we run this as part of the default command.
# # Can't run this during the build step as it requires privilege.
# # The Magic numbers in losetup are startsector (2048) times 512 and
# # (endsector - startsector) * 512
# CMD cd /tmp/efi && \
#     dd if=/dev/zero of=disk.raw bs=1024 count=51200 && \
#     sgdisk -N 1 -t 1:ef00 disk.raw && \
#     losetup -o 1048576 --sizelimit 51362816 /dev/loop/1 disk.raw && \
#     mkfs.vfat /dev/loop/1 && \
#     echo "drive c: file=\"/dev/loop/1\" mtools_skip_check=1" > /etc/mtools.conf && \
#     mmd c:/EFI && \
#     mmd c:/EFI/BOOT && \
#     mcopy linuxkit.efi c:/EFI/BOOT/BOOTX64.EFI && \
#     losetup -d /dev/loop/1 && \
#     qemu-img convert -O vhdx disk.raw linuxkit-boot.vhdx && \
#     cp /tmp/efi/linuxkit.efi /tmp/efi/linuxkitefi.iso /tmp/efi/linuxkit-boot.vhdx /mnt/
