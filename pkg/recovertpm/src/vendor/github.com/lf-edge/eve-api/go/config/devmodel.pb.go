// Copyright(c) 2017-2018 Zededa, Inc.
// All rights reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: config/devmodel.proto

package config

import (
	evecommon "github.com/lf-edge/eve-api/go/evecommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A bonding mode specifies the policy indicating how bonding slaves are used
// during network transmission.
type BondMode int32

const (
	// BOND_MODE_UNSPECIFIED : if bonding mode is not explicitly specified,
	// then by default Round-Robin policy is applied (BOND_MODE_BALANCE_RR).
	BondMode_BOND_MODE_UNSPECIFIED BondMode = 0
	// BOND_MODE_BALANCE_RR : transmit packets in sequential order from the first
	// available slave through the last. This mode provides load balancing
	// and fault tolerance.
	// This is the default bonding mode.
	BondMode_BOND_MODE_BALANCE_RR BondMode = 1
	// BOND_MODE_ACTIVE_BACKUP : only one slave in the bond is active.
	// A different slave becomes active if, and only if, the active slave fails.
	// The bond's MAC address is externally visible on only one port to avoid
	// confusing the switch.
	// This mode provides fault tolerance.
	BondMode_BOND_MODE_ACTIVE_BACKUP BondMode = 2
	// BOND_MODE_BALANCE_XOR : packet source and destination MAC addresses are
	// used to calculate hash and select the output slave interface accordingly.
	// This algorithm will place all traffic destined to a particular network
	// peer on the same slave.
	// This mode provides load balancing and fault tolerance.
	BondMode_BOND_MODE_BALANCE_XOR BondMode = 3
	// BOND_MODE_BROADCAST: transmits everything on all slave interfaces.
	// This mode provides fault tolerance.
	BondMode_BOND_MODE_BROADCAST BondMode = 4
	// BOND_MODE_802_3AD : IEEE 802.3ad Dynamic link aggregation.
	// Creates aggregation groups that share the same speed and duplex settings.
	// Utilizes all slaves in the active aggregator according to the 802.3ad
	// specification.
	// Requires that upstream networks equipment supports and has the IEEE 802.3ad
	// Dynamic link aggregation properly configured.
	BondMode_BOND_MODE_802_3AD BondMode = 5
	// BOND_MODE_BALANCE_TLB : adaptive transmit load balancing. Channel bonding that
	// does not require any special switch support. The outgoing traffic
	// is distributed according to the current load (computed relative to the speed)
	// on each slave.
	// Incoming traffic is received by the current slave. If the receiving slave
	// fails, another slave takes over the MAC address of the failed receiving slave.
	// This mode provides (TX) load balancing and fault tolerance.
	BondMode_BOND_MODE_BALANCE_TLB BondMode = 6
	// BOND_MODE_BALANCE_ALB : adaptive load balancing. Includes BOND_MODE_BALANCE_TLB
	// plus receive load balancing (RLB) for IPV4 traffic, and does not require
	// any special switch support. The receive load balancing is achieved by ARP
	// negotiation.
	// This mode provides load balancing and fault tolerance.
	BondMode_BOND_MODE_BALANCE_ALB BondMode = 7
)

// Enum value maps for BondMode.
var (
	BondMode_name = map[int32]string{
		0: "BOND_MODE_UNSPECIFIED",
		1: "BOND_MODE_BALANCE_RR",
		2: "BOND_MODE_ACTIVE_BACKUP",
		3: "BOND_MODE_BALANCE_XOR",
		4: "BOND_MODE_BROADCAST",
		5: "BOND_MODE_802_3AD",
		6: "BOND_MODE_BALANCE_TLB",
		7: "BOND_MODE_BALANCE_ALB",
	}
	BondMode_value = map[string]int32{
		"BOND_MODE_UNSPECIFIED":   0,
		"BOND_MODE_BALANCE_RR":    1,
		"BOND_MODE_ACTIVE_BACKUP": 2,
		"BOND_MODE_BALANCE_XOR":   3,
		"BOND_MODE_BROADCAST":     4,
		"BOND_MODE_802_3AD":       5,
		"BOND_MODE_BALANCE_TLB":   6,
		"BOND_MODE_BALANCE_ALB":   7,
	}
)

func (x BondMode) Enum() *BondMode {
	p := new(BondMode)
	*p = x
	return p
}

func (x BondMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BondMode) Descriptor() protoreflect.EnumDescriptor {
	return file_config_devmodel_proto_enumTypes[0].Descriptor()
}

func (BondMode) Type() protoreflect.EnumType {
	return &file_config_devmodel_proto_enumTypes[0]
}

func (x BondMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BondMode.Descriptor instead.
func (BondMode) EnumDescriptor() ([]byte, []int) {
	return file_config_devmodel_proto_rawDescGZIP(), []int{0}
}

// Option specifying the rate in which EVE will ask LACP link partners
// to transmit LACPDU packets in 802.3ad mode.
type LacpRate int32

const (
	// Default LACP rate is Slow.
	LacpRate_LACP_RATE_UNSPECIFIED LacpRate = 0
	// Request LACP partner to transmit LACPDUs every 30 seconds.
	LacpRate_LACP_RATE_SLOW LacpRate = 1
	// Request LACP partner to transmit LACPDUs every 1 second.
	LacpRate_LACP_RATE_FAST LacpRate = 2
)

// Enum value maps for LacpRate.
var (
	LacpRate_name = map[int32]string{
		0: "LACP_RATE_UNSPECIFIED",
		1: "LACP_RATE_SLOW",
		2: "LACP_RATE_FAST",
	}
	LacpRate_value = map[string]int32{
		"LACP_RATE_UNSPECIFIED": 0,
		"LACP_RATE_SLOW":        1,
		"LACP_RATE_FAST":        2,
	}
)

func (x LacpRate) Enum() *LacpRate {
	p := new(LacpRate)
	*p = x
	return p
}

func (x LacpRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LacpRate) Descriptor() protoreflect.EnumDescriptor {
	return file_config_devmodel_proto_enumTypes[1].Descriptor()
}

func (LacpRate) Type() protoreflect.EnumType {
	return &file_config_devmodel_proto_enumTypes[1]
}

func (x LacpRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LacpRate.Descriptor instead.
func (LacpRate) EnumDescriptor() ([]byte, []int) {
	return file_config_devmodel_proto_rawDescGZIP(), []int{1}
}

// systemAdapters are higher-level IP-ready network endpoints.
// systemAdapters give all the required bits to turn the physical IOs
// and intermediate L2 objects into useful IP endpoints.
// These endpoints can be further used to connect to controller or
// can be shared between workload/services running on the node.
type SystemAdapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name - Name of the Network Interface. This is the Port Name
	//
	//	used in Info / Metrics / flowlog etc. Name cannot be changed.
	//
	// This will be the Network Port name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// DEPRECATED by cost below
	FreeUplink bool `protobuf:"varint,2,opt,name=freeUplink,proto3" json:"freeUplink,omitempty"`
	// uplink - DEPRECATED by PhysicalIO.Usage / PhysicalIO.UsagePolicy
	// this is part of the uplink group
	// deprecate: have a separate device policy object in the API
	Uplink bool `protobuf:"varint,3,opt,name=uplink,proto3" json:"uplink,omitempty"`
	// networkUUID - attach this network config for this adapter
	// if not set, depending on Usage of Adapter, would be treated as
	// an L2 port
	NetworkUUID string `protobuf:"bytes,4,opt,name=networkUUID,proto3" json:"networkUUID,omitempty"`
	// addr - if its static network we need ip address
	// If this is specified, networkUUID must also be specified. addr
	// is expected to be in sync with the network object (same subnet etc ).
	Addr string `protobuf:"bytes,5,opt,name=addr,proto3" json:"addr,omitempty"`
	// alias - Device just reflects it back in status / Metrics back to
	// cloud.
	Alias string `protobuf:"bytes,7,opt,name=alias,proto3" json:"alias,omitempty"`
	// lowerLayerName - For example, if lower layer is PhysicalAdapter
	// ( physical interface), this should point to logicallabel of the
	// physicalIO.
	LowerLayerName string `protobuf:"bytes,8,opt,name=lowerLayerName,proto3" json:"lowerLayerName,omitempty"`
	// Cost of sending traffic over the port.
	// Used to prioritize ports and give preference to lower-cost ports (e.g. eth over wwan).
	// 0 is the lowest cost (free); 255 the highest.
	// Can be set for management and app-shared ports.
	// Cost is used for EVE management traffic and for local network instances with multiple
	// ports. For any request towards the controller or for an image download, EVE tries ports
	// in the order of increasing cost, starting with the free ports. Once it finds the lowest
	// cost port with a working connectivity, it may spread the load if there are multiple
	// connected ports of the same cost.
	// For local networking instances with multiple ports, the cost may be used to decide
	// which port to use for a particular destination network (incl. port selection for
	// the default route). Unlike the management traffic, load-balancing is currently
	// not supported for local network instances and the app traffic that is routed through
	// them.
	Cost uint32 `protobuf:"varint,9,opt,name=cost,proto3" json:"cost,omitempty"`
	// A set of user-defined "shared" labels attached to the adapter.
	// There are no restrictions on the format of an adapter label, it can be any
	// non-empty string.
	// Unlike the logical label (aka port logical name), shared label is not a unique
	// port identifier. Instead, the same shared label can be assigned to multiple ports.
	// Note that EVE automatically assigns "all" label to every port, "uplink" label to every
	// management port and "freeuplink" label to every management port with zero cost.
	// ("automatically assigns" is meant here in imaginary sense, these labels are not supposed
	// to be explicitly added by the controller to SystemAdapters inside EdgeDevConfig).
	// Shared label can be used to:
	//   - designate a group of network adapters to be used by a network instances for external
	//     connectivity
	//   - limit port-forwarding firewall rule to only a subset of network adapters
	//   - create a multi-path static IP route (with multiple ports providing access to the routed
	//     destination network)
	SharedLabels []string `protobuf:"bytes,10,rep,name=shared_labels,json=sharedLabels,proto3" json:"shared_labels,omitempty"`
}

func (x *SystemAdapter) Reset() {
	*x = SystemAdapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_devmodel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemAdapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemAdapter) ProtoMessage() {}

func (x *SystemAdapter) ProtoReflect() protoreflect.Message {
	mi := &file_config_devmodel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemAdapter.ProtoReflect.Descriptor instead.
func (*SystemAdapter) Descriptor() ([]byte, []int) {
	return file_config_devmodel_proto_rawDescGZIP(), []int{0}
}

func (x *SystemAdapter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemAdapter) GetFreeUplink() bool {
	if x != nil {
		return x.FreeUplink
	}
	return false
}

func (x *SystemAdapter) GetUplink() bool {
	if x != nil {
		return x.Uplink
	}
	return false
}

func (x *SystemAdapter) GetNetworkUUID() string {
	if x != nil {
		return x.NetworkUUID
	}
	return ""
}

func (x *SystemAdapter) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *SystemAdapter) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *SystemAdapter) GetLowerLayerName() string {
	if x != nil {
		return x.LowerLayerName
	}
	return ""
}

func (x *SystemAdapter) GetCost() uint32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *SystemAdapter) GetSharedLabels() []string {
	if x != nil {
		return x.SharedLabels
	}
	return nil
}

// Given additional details for EVE software to how to treat this
// interface. Example policies could be limit use of LTE interface
// or only use Eth1 only if Eth0 is not available etc
// Note that this is the static information from the model.
// Current configuration is in systemAdapter
type PhyIOUsagePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeUplink bool `protobuf:"varint,1,opt,name=freeUplink,proto3" json:"freeUplink,omitempty"` // DEPRECATED by cost in the SystemAdapter message
}

func (x *PhyIOUsagePolicy) Reset() {
	*x = PhyIOUsagePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_devmodel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhyIOUsagePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhyIOUsagePolicy) ProtoMessage() {}

func (x *PhyIOUsagePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_config_devmodel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhyIOUsagePolicy.ProtoReflect.Descriptor instead.
func (*PhyIOUsagePolicy) Descriptor() ([]byte, []int) {
	return file_config_devmodel_proto_rawDescGZIP(), []int{1}
}

func (x *PhyIOUsagePolicy) GetFreeUplink() bool {
	if x != nil {
		return x.FreeUplink
	}
	return false
}

// PhysicalIO:
//
//	Absolute low level description of physical buses and ports that are
//	available on given platform.
//	Collection of these IOs, constitute what we would call as hardware
//	model. Each physical IO is manageable and visible to EVE software, and
//	it can be further configured to either provide IP connectivity or
//	directly be given to workloads
type PhysicalIO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ptype evecommon.PhyIoType `protobuf:"varint,1,opt,name=ptype,proto3,enum=org.lfedge.eve.common.PhyIoType" json:"ptype,omitempty"`
	// physical label typically printed on box.
	// Example Eth0, Eth1, Wifi0, ComA, ComB
	Phylabel string `protobuf:"bytes,2,opt,name=phylabel,proto3" json:"phylabel,omitempty"`
	// The hardware bus address. The key to this map can be of the following
	// (case-insensitive) values:
	// "pcilong": the address is a PCI id of the form 0000:02:00.0
	// "ifname": the address is a string for a network interface like "eth1"
	// "serial": the address is a Linux serial port alias such as "/dev/ttyS2"
	// "irq": the address is a number such as "5". This can be a comma
	//
	//	separated list of integers or even a range of integers. Hence using
	//	a string to address this.
	//
	// "ioports": the address is a string such as "2f8-2ff"
	// "usbaddr": the address is a USB of the form of "1:2.3"
	// If the type is PhyIoNet*, then there needs to be an "ifname" physaddr.
	Phyaddrs map[string]string `protobuf:"bytes,3,rep,name=phyaddrs,proto3" json:"phyaddrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// logicallabel - provides the ability to model designer to refer
	//
	//	the physicalIO port to using more friendly name
	//
	// For example Eth0->Mgmt0
	//
	//	or USBA->ConfigDiskA etc
	Logicallabel string `protobuf:"bytes,4,opt,name=logicallabel,proto3" json:"logicallabel,omitempty"`
	// assigngrp
	// Assignment Group, is unique label that is applied across PhysicalIOs
	// EntireGroup can be assigned to application or nothing at all
	//
	// This is the name used in AppInstanceConfig.adapters to assign an
	// adapter to an application.
	//
	// If assigngrp is not set, the Adapter cannot be assigned to any
	// application. One example is, when the adapter is on the same Pci
	// bus as another device required by Dom0.
	//
	// Even if there is only one device on the its PCIBus, the assignGrp Must
	// be set.
	Assigngrp string `protobuf:"bytes,5,opt,name=assigngrp,proto3" json:"assigngrp,omitempty"`
	// usage - indicates the role of adapter ( mgmt / blocked / app-direct
	//
	//	etc. )
	Usage evecommon.PhyIoMemberUsage `protobuf:"varint,6,opt,name=usage,proto3,enum=org.lfedge.eve.common.PhyIoMemberUsage" json:"usage,omitempty"`
	// usagePolicy - Policy Object used to further refine the usage.
	// For example, specify if this should be only used as fallback?
	//
	//	Or used as the primary uplink? Allow App traffic? restrict
	//	app traffic?? etc..
	UsagePolicy *PhyIOUsagePolicy `protobuf:"bytes,7,opt,name=usagePolicy,proto3" json:"usagePolicy,omitempty"`
	// physical and logical attributes
	//
	//	For example in WWAN to which firmware version to load etc
	Cbattr map[string]string `protobuf:"bytes,8,rep,name=cbattr,proto3" json:"cbattr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// list of Virtual Functions (VF) for given Physical Function (PF)
	// only applies for PHY_IO_TYPE_PHY_IO_NET_ETH_PF
	Vflist *VfList `protobuf:"bytes,9,opt,name=vflist,proto3" json:"vflist,omitempty"`
	// parentassigngrp
	//
	// Parent Assignment Group is there to reference the parent assignment
	// group in order to make the device dependent on a different device.
	// Currently the concrete reason to do this is to make a usb device dependent
	// on the PCI address the USB controller is using to prevent passthrough of
	// the USB controller in one application while trying to passthrough
	// a USB device on this controller to another application.
	//
	// We only allow these two cases:
	//   - children and their parent devices are assigned to the same application
	//     instance
	//   - parent device stays in host and one or more children (in separate
	//     assignment groups) are assigned to one or more application instances
	Parentassigngrp string `protobuf:"bytes,10,opt,name=parentassigngrp,proto3" json:"parentassigngrp,omitempty"`
}

func (x *PhysicalIO) Reset() {
	*x = PhysicalIO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_devmodel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalIO) ProtoMessage() {}

func (x *PhysicalIO) ProtoReflect() protoreflect.Message {
	mi := &file_config_devmodel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalIO.ProtoReflect.Descriptor instead.
func (*PhysicalIO) Descriptor() ([]byte, []int) {
	return file_config_devmodel_proto_rawDescGZIP(), []int{2}
}

func (x *PhysicalIO) GetPtype() evecommon.PhyIoType {
	if x != nil {
		return x.Ptype
	}
	return evecommon.PhyIoType(0)
}

func (x *PhysicalIO) GetPhylabel() string {
	if x != nil {
		return x.Phylabel
	}
	return ""
}

func (x *PhysicalIO) GetPhyaddrs() map[string]string {
	if x != nil {
		return x.Phyaddrs
	}
	return nil
}

func (x *PhysicalIO) GetLogicallabel() string {
	if x != nil {
		return x.Logicallabel
	}
	return ""
}

func (x *PhysicalIO) GetAssigngrp() string {
	if x != nil {
		return x.Assigngrp
	}
	return ""
}

func (x *PhysicalIO) GetUsage() evecommon.PhyIoMemberUsage {
	if x != nil {
		return x.Usage
	}
	return evecommon.PhyIoMemberUsage(0)
}

func (x *PhysicalIO) GetUsagePolicy() *PhyIOUsagePolicy {
	if x != nil {
		return x.UsagePolicy
	}
	return nil
}

func (x *PhysicalIO) GetCbattr() map[string]string {
	if x != nil {
		return x.Cbattr
	}
	return nil
}

func (x *PhysicalIO) GetVflist() *VfList {
	if x != nil {
		return x.Vflist
	}
	return nil
}

func (x *PhysicalIO) GetParentassigngrp() string {
	if x != nil {
		return x.Parentassigngrp
	}
	return ""
}

type VfList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// how many Virtual Functions (VF) will be created
	VfCount uint32 `protobuf:"varint,1,opt,name=vf_count,json=vfCount,proto3" json:"vf_count,omitempty"`
	// optional configuration for given Virtual Function (VF)
	Data []*EthVF `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *VfList) Reset() {
	*x = VfList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_devmodel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VfList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VfList) ProtoMessage() {}

func (x *VfList) ProtoReflect() protoreflect.Message {
	mi := &file_config_devmodel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VfList.ProtoReflect.Descriptor instead.
func (*VfList) Descriptor() ([]byte, []int) {
	return file_config_devmodel_proto_rawDescGZIP(), []int{3}
}

func (x *VfList) GetVfCount() uint32 {
	if x != nil {
		return x.VfCount
	}
	return 0
}

func (x *VfList) GetData() []*EthVF {
	if x != nil {
		return x.Data
	}
	return nil
}

// VlanAdapter represents a single VLAN sub-interface.
// The parent, which is referenced by lower_layer_name,
// should be either PhysicalIO or BondAdapter.
type VlanAdapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical name of this VLAN adapter.
	Logicallabel string `protobuf:"bytes,1,opt,name=logicallabel,proto3" json:"logicallabel,omitempty"`
	// A physical name of the VLAN sub-interface.
	// Note that the interface name is limited in Linux kernel to 15 characters.
	// If not defined, logicallabel will be used instead.
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Logical name of the lower layer adapter (bond or physicalIO).
	LowerLayerName string `protobuf:"bytes,3,opt,name=lower_layer_name,json=lowerLayerName,proto3" json:"lower_layer_name,omitempty"`
	// VLAN ID. Valid values are from 1 to 4094.
	VlanId uint32 `protobuf:"varint,4,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *VlanAdapter) Reset() {
	*x = VlanAdapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_devmodel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanAdapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanAdapter) ProtoMessage() {}

func (x *VlanAdapter) ProtoReflect() protoreflect.Message {
	mi := &file_config_devmodel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanAdapter.ProtoReflect.Descriptor instead.
func (*VlanAdapter) Descriptor() ([]byte, []int) {
	return file_config_devmodel_proto_rawDescGZIP(), []int{4}
}

func (x *VlanAdapter) GetLogicallabel() string {
	if x != nil {
		return x.Logicallabel
	}
	return ""
}

func (x *VlanAdapter) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *VlanAdapter) GetLowerLayerName() string {
	if x != nil {
		return x.LowerLayerName
	}
	return ""
}

func (x *VlanAdapter) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

// BondAdapter aggregates multiple PhysicalIOs into one adapter for redundancy
// and load-spreading purposes.
type BondAdapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of this bond adapter.
	Logicallabel string `protobuf:"bytes,1,opt,name=logicallabel,proto3" json:"logicallabel,omitempty"`
	// A physical name of the bond interface.
	// Note that the interface name is limited in Linux kernel to 15 characters.
	// If not defined, logicallabel will be used instead.
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Logical names of aggregated PhysicalIOs.
	// For all bonding modes but Active-Backup the order is irrelevant.
	// In the Active-Backup mode (BOND_MODE_ACTIVE_BACKUP), the first PhysicalIO
	// in the list will be considered as the primary port (i.e. only when
	// the primary is off-line will alternate ports be used).
	LowerLayerNames []string `protobuf:"bytes,3,rep,name=lower_layer_names,json=lowerLayerNames,proto3" json:"lower_layer_names,omitempty"`
	// A bonding mode specifies the policy indicating how bonding slaves are used
	// during network transmission
	BondMode BondMode `protobuf:"varint,4,opt,name=bond_mode,json=bondMode,proto3,enum=org.lfedge.eve.config.BondMode" json:"bond_mode,omitempty"`
	// Method by which link failures and recoveries are detected.
	//
	// Types that are assignable to Monitoring:
	//
	//	*BondAdapter_Mii
	//	*BondAdapter_Arp
	Monitoring isBondAdapter_Monitoring `protobuf_oneof:"monitoring"`
	// Option specifying the rate in which EVE will ask LACP link partners
	// to transmit LACPDU packets in 802.3ad mode.
	LacpRate LacpRate `protobuf:"varint,8,opt,name=lacp_rate,json=lacpRate,proto3,enum=org.lfedge.eve.config.LacpRate" json:"lacp_rate,omitempty"`
}

func (x *BondAdapter) Reset() {
	*x = BondAdapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_devmodel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BondAdapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondAdapter) ProtoMessage() {}

func (x *BondAdapter) ProtoReflect() protoreflect.Message {
	mi := &file_config_devmodel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondAdapter.ProtoReflect.Descriptor instead.
func (*BondAdapter) Descriptor() ([]byte, []int) {
	return file_config_devmodel_proto_rawDescGZIP(), []int{5}
}

func (x *BondAdapter) GetLogicallabel() string {
	if x != nil {
		return x.Logicallabel
	}
	return ""
}

func (x *BondAdapter) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *BondAdapter) GetLowerLayerNames() []string {
	if x != nil {
		return x.LowerLayerNames
	}
	return nil
}

func (x *BondAdapter) GetBondMode() BondMode {
	if x != nil {
		return x.BondMode
	}
	return BondMode_BOND_MODE_UNSPECIFIED
}

func (m *BondAdapter) GetMonitoring() isBondAdapter_Monitoring {
	if m != nil {
		return m.Monitoring
	}
	return nil
}

func (x *BondAdapter) GetMii() *MIIMonitor {
	if x, ok := x.GetMonitoring().(*BondAdapter_Mii); ok {
		return x.Mii
	}
	return nil
}

func (x *BondAdapter) GetArp() *ArpMonitor {
	if x, ok := x.GetMonitoring().(*BondAdapter_Arp); ok {
		return x.Arp
	}
	return nil
}

func (x *BondAdapter) GetLacpRate() LacpRate {
	if x != nil {
		return x.LacpRate
	}
	return LacpRate_LACP_RATE_UNSPECIFIED
}

type isBondAdapter_Monitoring interface {
	isBondAdapter_Monitoring()
}

type BondAdapter_Mii struct {
	// The MII monitor is driver-dependent. It monitors the links from the device
	// to the nearest connected switch. If the failure occurs beyond the nearest
	// connected switch, it cannot be detected by MII monitor.
	Mii *MIIMonitor `protobuf:"bytes,5,opt,name=mii,proto3,oneof"`
}

type BondAdapter_Arp struct {
	// The ARP monitor is based on the communication to the target
	// hosts designated by their IP addresses. Even if the link is beyond
	// the nearest connected switch, the APR monitor can detect it.
	Arp *ArpMonitor `protobuf:"bytes,6,opt,name=arp,proto3,oneof"`
}

func (*BondAdapter_Mii) isBondAdapter_Monitoring() {}

func (*BondAdapter_Arp) isBondAdapter_Monitoring() {}

// MIIMonitor : MII link monitoring parameters.
// Defined for BondAdapter.
type MIIMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the MII link monitoring frequency in milliseconds.
	// This determines how often the link state of each bond slave is inspected
	// for link failures.
	Interval uint32 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Updelay specifies the time, in milliseconds, to wait before enabling
	// a bond slave after a link recovery has been detected.
	// The updelay value should be a multiple of the monitoring interval; if not,
	// it will be rounded down to the nearest multiple.
	// The default value is 0.
	Updelay uint32 `protobuf:"varint,2,opt,name=updelay,proto3" json:"updelay,omitempty"`
	// Specifies the time, in milliseconds, to wait before disabling a bond
	// slave after a link failure has been detected.
	// The downdelay value should be a multiple of the monitoring interval; if not,
	// it will be rounded down to the nearest multiple.
	// The default value is 0.
	Downdelay uint32 `protobuf:"varint,3,opt,name=downdelay,proto3" json:"downdelay,omitempty"`
}

func (x *MIIMonitor) Reset() {
	*x = MIIMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_devmodel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MIIMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MIIMonitor) ProtoMessage() {}

func (x *MIIMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_config_devmodel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MIIMonitor.ProtoReflect.Descriptor instead.
func (*MIIMonitor) Descriptor() ([]byte, []int) {
	return file_config_devmodel_proto_rawDescGZIP(), []int{6}
}

func (x *MIIMonitor) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *MIIMonitor) GetUpdelay() uint32 {
	if x != nil {
		return x.Updelay
	}
	return 0
}

func (x *MIIMonitor) GetDowndelay() uint32 {
	if x != nil {
		return x.Downdelay
	}
	return 0
}

// ArpMonitor : ARP-based link monitoring parameters.
// Defined for BondAdapter.
type ArpMonitor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interval specifies the ARP link monitoring frequency in milliseconds.
	Interval uint32 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// IpTargets specifies the IPv4 addresses to use as ARP monitoring peers.
	// These are the targets of ARP requests sent to determine the health of links.
	IpTargets []string `protobuf:"bytes,2,rep,name=ip_targets,json=ipTargets,proto3" json:"ip_targets,omitempty"`
}

func (x *ArpMonitor) Reset() {
	*x = ArpMonitor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_devmodel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArpMonitor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArpMonitor) ProtoMessage() {}

func (x *ArpMonitor) ProtoReflect() protoreflect.Message {
	mi := &file_config_devmodel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArpMonitor.ProtoReflect.Descriptor instead.
func (*ArpMonitor) Descriptor() ([]byte, []int) {
	return file_config_devmodel_proto_rawDescGZIP(), []int{7}
}

func (x *ArpMonitor) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ArpMonitor) GetIpTargets() []string {
	if x != nil {
		return x.IpTargets
	}
	return nil
}

var File_config_devmodel_proto protoreflect.FileDescriptor

var file_config_devmodel_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x76, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e,
	0x65, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x76, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x02, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x72, 0x65, 0x65, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x22, 0x32, 0x0a, 0x10, 0x50, 0x68, 0x79, 0x49, 0x4f, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x55, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x55,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x99, 0x05, 0x0a, 0x0a, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x49, 0x4f, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x79, 0x49,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x68, 0x79, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x68, 0x79, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x08, 0x70, 0x68, 0x79, 0x61,
	0x64, 0x64, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x4f, 0x2e, 0x50, 0x68,
	0x79, 0x61, 0x64, 0x64, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x68, 0x79,
	0x61, 0x64, 0x64, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x67, 0x72, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x67, 0x72, 0x70, 0x12, 0x3d, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x68, 0x79, 0x49, 0x6f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x68, 0x79, 0x49, 0x4f, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x62, 0x61, 0x74, 0x74, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x49, 0x4f, 0x2e, 0x43, 0x62, 0x61, 0x74, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x63, 0x62, 0x61, 0x74, 0x74, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x76, 0x66, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c,
	0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x56, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x76, 0x66, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x67,
	0x72, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x67, 0x72, 0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x68, 0x79,
	0x61, 0x64, 0x64, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x62, 0x61, 0x74, 0x74, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x55, 0x0a, 0x06, 0x56, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x74, 0x68,
	0x56, 0x46, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x56, 0x6c, 0x61,
	0x6e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xfc, 0x02, 0x0a, 0x0b, 0x42, 0x6f, 0x6e, 0x64, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x09, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x62, 0x6f, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x6d,
	0x69, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c,
	0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x49, 0x49, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x03, 0x6d,
	0x69, 0x69, 0x12, 0x35, 0x0a, 0x03, 0x61, 0x72, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x72, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x03, 0x61, 0x72, 0x70, 0x12, 0x3c, 0x0a, 0x09, 0x6c, 0x61, 0x63,
	0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x52, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6c,
	0x61, 0x63, 0x70, 0x52, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x60, 0x0a, 0x0a, 0x4d, 0x49, 0x49, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x77,
	0x6e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x6f,
	0x77, 0x6e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x47, 0x0a, 0x0a, 0x41, 0x72, 0x70, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x2a, 0xdd, 0x01, 0x0a, 0x08, 0x42, 0x6f, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4f, 0x4e, 0x44,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x52,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x4c,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x58, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4f,
	0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x38, 0x30, 0x32, 0x5f, 0x33, 0x41, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f,
	0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x54, 0x4c, 0x42, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x42, 0x10, 0x07,
	0x2a, 0x4d, 0x0a, 0x08, 0x4c, 0x61, 0x63, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x4c, 0x41, 0x43, 0x50, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x41, 0x43, 0x50, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c,
	0x41, 0x43, 0x50, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x02, 0x42,
	0x3d, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x66, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x65, 0x76, 0x65,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_devmodel_proto_rawDescOnce sync.Once
	file_config_devmodel_proto_rawDescData = file_config_devmodel_proto_rawDesc
)

func file_config_devmodel_proto_rawDescGZIP() []byte {
	file_config_devmodel_proto_rawDescOnce.Do(func() {
		file_config_devmodel_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_devmodel_proto_rawDescData)
	})
	return file_config_devmodel_proto_rawDescData
}

var file_config_devmodel_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_config_devmodel_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_config_devmodel_proto_goTypes = []interface{}{
	(BondMode)(0),                   // 0: org.lfedge.eve.config.BondMode
	(LacpRate)(0),                   // 1: org.lfedge.eve.config.LacpRate
	(*SystemAdapter)(nil),           // 2: org.lfedge.eve.config.SystemAdapter
	(*PhyIOUsagePolicy)(nil),        // 3: org.lfedge.eve.config.PhyIOUsagePolicy
	(*PhysicalIO)(nil),              // 4: org.lfedge.eve.config.PhysicalIO
	(*VfList)(nil),                  // 5: org.lfedge.eve.config.VfList
	(*VlanAdapter)(nil),             // 6: org.lfedge.eve.config.VlanAdapter
	(*BondAdapter)(nil),             // 7: org.lfedge.eve.config.BondAdapter
	(*MIIMonitor)(nil),              // 8: org.lfedge.eve.config.MIIMonitor
	(*ArpMonitor)(nil),              // 9: org.lfedge.eve.config.ArpMonitor
	nil,                             // 10: org.lfedge.eve.config.PhysicalIO.PhyaddrsEntry
	nil,                             // 11: org.lfedge.eve.config.PhysicalIO.CbattrEntry
	(evecommon.PhyIoType)(0),        // 12: org.lfedge.eve.common.PhyIoType
	(evecommon.PhyIoMemberUsage)(0), // 13: org.lfedge.eve.common.PhyIoMemberUsage
	(*EthVF)(nil),                   // 14: org.lfedge.eve.config.EthVF
}
var file_config_devmodel_proto_depIdxs = []int32{
	12, // 0: org.lfedge.eve.config.PhysicalIO.ptype:type_name -> org.lfedge.eve.common.PhyIoType
	10, // 1: org.lfedge.eve.config.PhysicalIO.phyaddrs:type_name -> org.lfedge.eve.config.PhysicalIO.PhyaddrsEntry
	13, // 2: org.lfedge.eve.config.PhysicalIO.usage:type_name -> org.lfedge.eve.common.PhyIoMemberUsage
	3,  // 3: org.lfedge.eve.config.PhysicalIO.usagePolicy:type_name -> org.lfedge.eve.config.PhyIOUsagePolicy
	11, // 4: org.lfedge.eve.config.PhysicalIO.cbattr:type_name -> org.lfedge.eve.config.PhysicalIO.CbattrEntry
	5,  // 5: org.lfedge.eve.config.PhysicalIO.vflist:type_name -> org.lfedge.eve.config.VfList
	14, // 6: org.lfedge.eve.config.VfList.data:type_name -> org.lfedge.eve.config.EthVF
	0,  // 7: org.lfedge.eve.config.BondAdapter.bond_mode:type_name -> org.lfedge.eve.config.BondMode
	8,  // 8: org.lfedge.eve.config.BondAdapter.mii:type_name -> org.lfedge.eve.config.MIIMonitor
	9,  // 9: org.lfedge.eve.config.BondAdapter.arp:type_name -> org.lfedge.eve.config.ArpMonitor
	1,  // 10: org.lfedge.eve.config.BondAdapter.lacp_rate:type_name -> org.lfedge.eve.config.LacpRate
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_config_devmodel_proto_init() }
func file_config_devmodel_proto_init() {
	if File_config_devmodel_proto != nil {
		return
	}
	file_config_devcommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_config_devmodel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemAdapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_devmodel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhyIOUsagePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_devmodel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalIO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_devmodel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VfList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_devmodel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanAdapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_devmodel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BondAdapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_devmodel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MIIMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_devmodel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArpMonitor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_config_devmodel_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*BondAdapter_Mii)(nil),
		(*BondAdapter_Arp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_devmodel_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_devmodel_proto_goTypes,
		DependencyIndexes: file_config_devmodel_proto_depIdxs,
		EnumInfos:         file_config_devmodel_proto_enumTypes,
		MessageInfos:      file_config_devmodel_proto_msgTypes,
	}.Build()
	File_config_devmodel_proto = out.File
	file_config_devmodel_proto_rawDesc = nil
	file_config_devmodel_proto_goTypes = nil
	file_config_devmodel_proto_depIdxs = nil
}
