// Copyright(c) 2017-2022 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: info/info.proto

package info

import (
	evecommon "github.com/lf-edge/eve-api/go/evecommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deprecated: see deprecatedMetricItem below
type DepMetricItemType int32

const (
	DepMetricItemType_DepMetricItemOther   DepMetricItemType = 0 // E.g., a string like an ESSID
	DepMetricItemType_DepMetricItemGauge   DepMetricItemType = 1 // Goes up and down over time
	DepMetricItemType_DepMetricItemCounter DepMetricItemType = 2 // Monotonically increasing (until reboot)
	DepMetricItemType_DepMetricItemState   DepMetricItemType = 3 // Toggles on and off; count transitions
)

// Enum value maps for DepMetricItemType.
var (
	DepMetricItemType_name = map[int32]string{
		0: "DepMetricItemOther",
		1: "DepMetricItemGauge",
		2: "DepMetricItemCounter",
		3: "DepMetricItemState",
	}
	DepMetricItemType_value = map[string]int32{
		"DepMetricItemOther":   0,
		"DepMetricItemGauge":   1,
		"DepMetricItemCounter": 2,
		"DepMetricItemState":   3,
	}
)

func (x DepMetricItemType) Enum() *DepMetricItemType {
	p := new(DepMetricItemType)
	*p = x
	return p
}

func (x DepMetricItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DepMetricItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[0].Descriptor()
}

func (DepMetricItemType) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[0]
}

func (x DepMetricItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DepMetricItemType.Descriptor instead.
func (DepMetricItemType) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{0}
}

// Broadly there are two types
// Info : information that is discovered/rarely changes
// Metrics: information that gets updated periodically
// Protobuf definitions in this file follow the convention.
type ZInfoTypes int32

const (
	ZInfoTypes_ZiNop             ZInfoTypes = 0
	ZInfoTypes_ZiDevice          ZInfoTypes = 1
	ZInfoTypes_ZiApp             ZInfoTypes = 3
	ZInfoTypes_ZiNetworkInstance ZInfoTypes = 6
	ZInfoTypes_ZiVolume          ZInfoTypes = 7
	ZInfoTypes_ZiContentTree     ZInfoTypes = 8
	ZInfoTypes_ZiBlobList        ZInfoTypes = 9
	ZInfoTypes_ZiAppInstMetaData ZInfoTypes = 10
	ZInfoTypes_ZiHardware        ZInfoTypes = 11
	ZInfoTypes_ZiEdgeview        ZInfoTypes = 12
	ZInfoTypes_ZiLocation        ZInfoTypes = 13
	ZInfoTypes_ZiPatchEnvelope   ZInfoTypes = 14
	ZInfoTypes_ZiNTPSources      ZInfoTypes = 16
)

// Enum value maps for ZInfoTypes.
var (
	ZInfoTypes_name = map[int32]string{
		0:  "ZiNop",
		1:  "ZiDevice",
		3:  "ZiApp",
		6:  "ZiNetworkInstance",
		7:  "ZiVolume",
		8:  "ZiContentTree",
		9:  "ZiBlobList",
		10: "ZiAppInstMetaData",
		11: "ZiHardware",
		12: "ZiEdgeview",
		13: "ZiLocation",
		14: "ZiPatchEnvelope",
		16: "ZiNTPSources",
	}
	ZInfoTypes_value = map[string]int32{
		"ZiNop":             0,
		"ZiDevice":          1,
		"ZiApp":             3,
		"ZiNetworkInstance": 6,
		"ZiVolume":          7,
		"ZiContentTree":     8,
		"ZiBlobList":        9,
		"ZiAppInstMetaData": 10,
		"ZiHardware":        11,
		"ZiEdgeview":        12,
		"ZiLocation":        13,
		"ZiPatchEnvelope":   14,
		"ZiNTPSources":      16,
	}
)

func (x ZInfoTypes) Enum() *ZInfoTypes {
	p := new(ZInfoTypes)
	*p = x
	return p
}

func (x ZInfoTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZInfoTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[1].Descriptor()
}

func (ZInfoTypes) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[1]
}

func (x ZInfoTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZInfoTypes.Descriptor instead.
func (ZInfoTypes) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{1}
}

// Enum names from OMA-TS-LWM2M_SwMgmt-V1_0-20151201-C
// plus additions starting at BOOTING
// This is used for Existing Objects. For any New objects, create and use
// a Separate enum for SwState specific to that  object. Ex: ZDeviceState
type ZSwState int32

const (
	ZSwState_INVALID          ZSwState = 0
	ZSwState_INITIAL          ZSwState = 1 // Config received
	ZSwState_DOWNLOAD_STARTED ZSwState = 2 // Download in-progress
	ZSwState_DOWNLOADED       ZSwState = 3 // Download completed, verification in-progress
	ZSwState_DELIVERED        ZSwState = 4 // Verification completed
	ZSwState_INSTALLED        ZSwState = 5 // Installed, ready for activation
	ZSwState_BOOTING          ZSwState = 6 // booting. Booting and above means that App is activated.
	// Terminal State
	// For AppInstance, RUNNING is equivalent to ONLINE.
	ZSwState_RUNNING    ZSwState = 7  // Object is Online / Running
	ZSwState_HALTING    ZSwState = 8  // being halted
	ZSwState_HALTED     ZSwState = 9  // Halted
	ZSwState_RESTARTING ZSwState = 10 // Restarting due to restart command
	ZSwState_PURGING    ZSwState = 11 // Purging due to purge command
	// Prior to DOWNLOAD_STARTED we go through these:
	ZSwState_RESOLVING_TAG ZSwState = 12 // Resolving an image tag
	ZSwState_RESOLVED_TAG  ZSwState = 13 // Tag has been resolved/failed
	// Prior to INSTALLED we go through these:
	ZSwState_CREATING_VOLUME ZSwState = 14 // Volume create in progress
	// Terminal State for Volumes
	// For Volumes, CREATED_VOLUME is equivalent to ONLINE.
	ZSwState_CREATED_VOLUME ZSwState = 15 // Volume create done/failed
	ZSwState_VERIFYING      ZSwState = 16 // Verification in-progress
	ZSwState_VERIFIED       ZSwState = 17 // Verification completed
	ZSwState_LOADING        ZSwState = 18 // Loading blob in CAS
	// Terminal State for some objects.
	// For objects like ContentTree and Blob, Loaded is equivalent to
	// ONLINE state for the object
	ZSwState_LOADED               ZSwState = 19 // Loaded blob in CAS
	ZSwState_AWAITNETWORKINSTANCE ZSwState = 20 // Wait for network instance
	// Terminal State - Object in Error State
	// If an App Instance encounters an Error, it will be in ERROR
	// state. If an App Instance is in ERROR state, it means there is NO DOMAIN
	// currently running.
	ZSwState_ERROR ZSwState = 21 // Error State
	// It would have been ideal to leave a gap before the ERROR state.
	// Since we cannot change the existing states now, introduce the
	// START_DELAYED state after ERROR.
	// Had to prefix with Z_SW_STATE_ to satisfy yetus checks.
	ZSwState_START_DELAYED ZSwState = 22 // App has been configured to start with delay by user
	ZSwState_PENDING       ZSwState = 23 // Kubernetes app in pending state
	ZSwState_SCHEDULING    ZSwState = 24 // Kubernetes app in scheduling state
)

// Enum value maps for ZSwState.
var (
	ZSwState_name = map[int32]string{
		0:  "INVALID",
		1:  "INITIAL",
		2:  "DOWNLOAD_STARTED",
		3:  "DOWNLOADED",
		4:  "DELIVERED",
		5:  "INSTALLED",
		6:  "BOOTING",
		7:  "RUNNING",
		8:  "HALTING",
		9:  "HALTED",
		10: "RESTARTING",
		11: "PURGING",
		12: "RESOLVING_TAG",
		13: "RESOLVED_TAG",
		14: "CREATING_VOLUME",
		15: "CREATED_VOLUME",
		16: "VERIFYING",
		17: "VERIFIED",
		18: "LOADING",
		19: "LOADED",
		20: "AWAITNETWORKINSTANCE",
		21: "ERROR",
		22: "START_DELAYED",
		23: "PENDING",
		24: "SCHEDULING",
	}
	ZSwState_value = map[string]int32{
		"INVALID":              0,
		"INITIAL":              1,
		"DOWNLOAD_STARTED":     2,
		"DOWNLOADED":           3,
		"DELIVERED":            4,
		"INSTALLED":            5,
		"BOOTING":              6,
		"RUNNING":              7,
		"HALTING":              8,
		"HALTED":               9,
		"RESTARTING":           10,
		"PURGING":              11,
		"RESOLVING_TAG":        12,
		"RESOLVED_TAG":         13,
		"CREATING_VOLUME":      14,
		"CREATED_VOLUME":       15,
		"VERIFYING":            16,
		"VERIFIED":             17,
		"LOADING":              18,
		"LOADED":               19,
		"AWAITNETWORKINSTANCE": 20,
		"ERROR":                21,
		"START_DELAYED":        22,
		"PENDING":              23,
		"SCHEDULING":           24,
	}
)

func (x ZSwState) Enum() *ZSwState {
	p := new(ZSwState)
	*p = x
	return p
}

func (x ZSwState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZSwState) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[2].Descriptor()
}

func (ZSwState) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[2]
}

func (x ZSwState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZSwState.Descriptor instead.
func (ZSwState) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{2}
}

// Entity contains the entity type
type Entity int32

const (
	// Invalid Device Entity
	Entity_ENTITY_UNSPECIFIED Entity = 0
	// Base OS entity
	Entity_ENTITY_BASE_OS Entity = 1
	// System Adapter Entity
	Entity_ENTITY_SYSTEM_ADAPTER Entity = 2
	// Vault Entity
	Entity_ENTITY_VAULT Entity = 3
	// Attestation Entity
	Entity_ENTITY_ATTESTATION Entity = 4
	// App Instance Entity
	Entity_ENTITY_APP_INSTANCE Entity = 5
	// Port Entity
	Entity_ENTITY_PORT Entity = 6
	// Network Entity
	Entity_ENTITY_NETWORK Entity = 7
	// Network Instance Entity
	Entity_ENTITY_NETWORK_INSTANCE Entity = 8
	// ContentTree Entity
	Entity_ENTITY_CONTENT_TREE Entity = 9
	// Blob Entity
	Entity_ENTITY_CONTENT_BLOB Entity = 10
	// VOLUME Entity
	Entity_ENTITY_VOLUME Entity = 11
)

// Enum value maps for Entity.
var (
	Entity_name = map[int32]string{
		0:  "ENTITY_UNSPECIFIED",
		1:  "ENTITY_BASE_OS",
		2:  "ENTITY_SYSTEM_ADAPTER",
		3:  "ENTITY_VAULT",
		4:  "ENTITY_ATTESTATION",
		5:  "ENTITY_APP_INSTANCE",
		6:  "ENTITY_PORT",
		7:  "ENTITY_NETWORK",
		8:  "ENTITY_NETWORK_INSTANCE",
		9:  "ENTITY_CONTENT_TREE",
		10: "ENTITY_CONTENT_BLOB",
		11: "ENTITY_VOLUME",
	}
	Entity_value = map[string]int32{
		"ENTITY_UNSPECIFIED":      0,
		"ENTITY_BASE_OS":          1,
		"ENTITY_SYSTEM_ADAPTER":   2,
		"ENTITY_VAULT":            3,
		"ENTITY_ATTESTATION":      4,
		"ENTITY_APP_INSTANCE":     5,
		"ENTITY_PORT":             6,
		"ENTITY_NETWORK":          7,
		"ENTITY_NETWORK_INSTANCE": 8,
		"ENTITY_CONTENT_TREE":     9,
		"ENTITY_CONTENT_BLOB":     10,
		"ENTITY_VOLUME":           11,
	}
)

func (x Entity) Enum() *Entity {
	p := new(Entity)
	*p = x
	return p
}

func (x Entity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Entity) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[3].Descriptor()
}

func (Entity) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[3]
}

func (x Entity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Entity.Descriptor instead.
func (Entity) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{3}
}

// Severity tells the severity type
type Severity int32

const (
	Severity_SEVERITY_UNSPECIFIED Severity = 0 // severity unspecified
	Severity_SEVERITY_NOTICE      Severity = 1 // severity notice
	Severity_SEVERITY_WARNING     Severity = 2 // severity warning
	Severity_SEVERITY_ERROR       Severity = 3 // severity error
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "SEVERITY_UNSPECIFIED",
		1: "SEVERITY_NOTICE",
		2: "SEVERITY_WARNING",
		3: "SEVERITY_ERROR",
	}
	Severity_value = map[string]int32{
		"SEVERITY_UNSPECIFIED": 0,
		"SEVERITY_NOTICE":      1,
		"SEVERITY_WARNING":     2,
		"SEVERITY_ERROR":       3,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[4].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[4]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{4}
}

type HwSecurityModuleStatus int32

const (
	HwSecurityModuleStatus_UNKNOWN  HwSecurityModuleStatus = 0 //HSM Status is not known
	HwSecurityModuleStatus_NOTFOUND HwSecurityModuleStatus = 1 //No HSM found
	HwSecurityModuleStatus_DISABLED HwSecurityModuleStatus = 2 //HSM found, but not being used
	HwSecurityModuleStatus_ENABLED  HwSecurityModuleStatus = 3 //HSM is found and being actively used
)

// Enum value maps for HwSecurityModuleStatus.
var (
	HwSecurityModuleStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "NOTFOUND",
		2: "DISABLED",
		3: "ENABLED",
	}
	HwSecurityModuleStatus_value = map[string]int32{
		"UNKNOWN":  0,
		"NOTFOUND": 1,
		"DISABLED": 2,
		"ENABLED":  3,
	}
)

func (x HwSecurityModuleStatus) Enum() *HwSecurityModuleStatus {
	p := new(HwSecurityModuleStatus)
	*p = x
	return p
}

func (x HwSecurityModuleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HwSecurityModuleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[5].Descriptor()
}

func (HwSecurityModuleStatus) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[5]
}

func (x HwSecurityModuleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HwSecurityModuleStatus.Descriptor instead.
func (HwSecurityModuleStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{5}
}

type DataSecAtRestStatus int32

const (
	DataSecAtRestStatus_DATASEC_AT_REST_UNKNOWN  DataSecAtRestStatus = 0 // Status is unknown
	DataSecAtRestStatus_DATASEC_AT_REST_DISABLED DataSecAtRestStatus = 1 // Enabled, but not being used
	DataSecAtRestStatus_DATASEC_AT_REST_ENABLED  DataSecAtRestStatus = 2 // Enabled, and used
	DataSecAtRestStatus_DATASEC_AT_REST_ERROR    DataSecAtRestStatus = 4 // Enabled, but encountered an error
)

// Enum value maps for DataSecAtRestStatus.
var (
	DataSecAtRestStatus_name = map[int32]string{
		0: "DATASEC_AT_REST_UNKNOWN",
		1: "DATASEC_AT_REST_DISABLED",
		2: "DATASEC_AT_REST_ENABLED",
		4: "DATASEC_AT_REST_ERROR",
	}
	DataSecAtRestStatus_value = map[string]int32{
		"DATASEC_AT_REST_UNKNOWN":  0,
		"DATASEC_AT_REST_DISABLED": 1,
		"DATASEC_AT_REST_ENABLED":  2,
		"DATASEC_AT_REST_ERROR":    4,
	}
)

func (x DataSecAtRestStatus) Enum() *DataSecAtRestStatus {
	p := new(DataSecAtRestStatus)
	*p = x
	return p
}

func (x DataSecAtRestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSecAtRestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[6].Descriptor()
}

func (DataSecAtRestStatus) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[6]
}

func (x DataSecAtRestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSecAtRestStatus.Descriptor instead.
func (DataSecAtRestStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{6}
}

type PCRStatus int32

const (
	PCRStatus_PCR_UNKNOWN  PCRStatus = 0 // Status is unknown
	PCRStatus_PCR_ENABLED  PCRStatus = 1 // Enabled PCR
	PCRStatus_PCR_DISABLED PCRStatus = 2 // Disabled PCR
)

// Enum value maps for PCRStatus.
var (
	PCRStatus_name = map[int32]string{
		0: "PCR_UNKNOWN",
		1: "PCR_ENABLED",
		2: "PCR_DISABLED",
	}
	PCRStatus_value = map[string]int32{
		"PCR_UNKNOWN":  0,
		"PCR_ENABLED":  1,
		"PCR_DISABLED": 2,
	}
)

func (x PCRStatus) Enum() *PCRStatus {
	p := new(PCRStatus)
	*p = x
	return p
}

func (x PCRStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PCRStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[7].Descriptor()
}

func (PCRStatus) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[7]
}

func (x PCRStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PCRStatus.Descriptor instead.
func (PCRStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{7}
}

// SimType : type of the SIM card.
type SimType int32

const (
	SimType_SIM_TYPE_UNSPECIFIED SimType = 0 // SIM type is not specified
	SimType_SIM_TYPE_PHYSICAL    SimType = 1 // physical SIM card
	SimType_SIM_TYPE_ESIM        SimType = 2 // eSIM (embedded-SIM)
)

// Enum value maps for SimType.
var (
	SimType_name = map[int32]string{
		0: "SIM_TYPE_UNSPECIFIED",
		1: "SIM_TYPE_PHYSICAL",
		2: "SIM_TYPE_ESIM",
	}
	SimType_value = map[string]int32{
		"SIM_TYPE_UNSPECIFIED": 0,
		"SIM_TYPE_PHYSICAL":    1,
		"SIM_TYPE_ESIM":        2,
	}
)

func (x SimType) Enum() *SimType {
	p := new(SimType)
	*p = x
	return p
}

func (x SimType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimType) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[8].Descriptor()
}

func (SimType) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[8]
}

func (x SimType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimType.Descriptor instead.
func (SimType) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{8}
}

type ZCellularOperatingState int32

const (
	ZCellularOperatingState_Z_CELLULAR_OPERATING_STATE_UNSPECIFIED          ZCellularOperatingState = 0
	ZCellularOperatingState_Z_CELLULAR_OPERATING_STATE_OFFLINE              ZCellularOperatingState = 1
	ZCellularOperatingState_Z_CELLULAR_OPERATING_STATE_RADIO_OFF            ZCellularOperatingState = 2 // AKA Radio-Silence mode
	ZCellularOperatingState_Z_CELLULAR_OPERATING_STATE_ONLINE               ZCellularOperatingState = 3
	ZCellularOperatingState_Z_CELLULAR_OPERATING_STATE_ONLINE_AND_CONNECTED ZCellularOperatingState = 4
	ZCellularOperatingState_Z_CELLULAR_OPERATING_STATE_UNRECOGNIZED         ZCellularOperatingState = 5
)

// Enum value maps for ZCellularOperatingState.
var (
	ZCellularOperatingState_name = map[int32]string{
		0: "Z_CELLULAR_OPERATING_STATE_UNSPECIFIED",
		1: "Z_CELLULAR_OPERATING_STATE_OFFLINE",
		2: "Z_CELLULAR_OPERATING_STATE_RADIO_OFF",
		3: "Z_CELLULAR_OPERATING_STATE_ONLINE",
		4: "Z_CELLULAR_OPERATING_STATE_ONLINE_AND_CONNECTED",
		5: "Z_CELLULAR_OPERATING_STATE_UNRECOGNIZED",
	}
	ZCellularOperatingState_value = map[string]int32{
		"Z_CELLULAR_OPERATING_STATE_UNSPECIFIED":          0,
		"Z_CELLULAR_OPERATING_STATE_OFFLINE":              1,
		"Z_CELLULAR_OPERATING_STATE_RADIO_OFF":            2,
		"Z_CELLULAR_OPERATING_STATE_ONLINE":               3,
		"Z_CELLULAR_OPERATING_STATE_ONLINE_AND_CONNECTED": 4,
		"Z_CELLULAR_OPERATING_STATE_UNRECOGNIZED":         5,
	}
)

func (x ZCellularOperatingState) Enum() *ZCellularOperatingState {
	p := new(ZCellularOperatingState)
	*p = x
	return p
}

func (x ZCellularOperatingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZCellularOperatingState) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[9].Descriptor()
}

func (ZCellularOperatingState) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[9]
}

func (x ZCellularOperatingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZCellularOperatingState.Descriptor instead.
func (ZCellularOperatingState) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{9}
}

type ZCellularControlProtocol int32

const (
	ZCellularControlProtocol_Z_CELLULAR_CONTROL_PROTOCOL_UNSPECIFIED ZCellularControlProtocol = 0
	ZCellularControlProtocol_Z_CELLULAR_CONTROL_PROTOCOL_QMI         ZCellularControlProtocol = 1
	ZCellularControlProtocol_Z_CELLULAR_CONTROL_PROTOCOL_MBIM        ZCellularControlProtocol = 2
)

// Enum value maps for ZCellularControlProtocol.
var (
	ZCellularControlProtocol_name = map[int32]string{
		0: "Z_CELLULAR_CONTROL_PROTOCOL_UNSPECIFIED",
		1: "Z_CELLULAR_CONTROL_PROTOCOL_QMI",
		2: "Z_CELLULAR_CONTROL_PROTOCOL_MBIM",
	}
	ZCellularControlProtocol_value = map[string]int32{
		"Z_CELLULAR_CONTROL_PROTOCOL_UNSPECIFIED": 0,
		"Z_CELLULAR_CONTROL_PROTOCOL_QMI":         1,
		"Z_CELLULAR_CONTROL_PROTOCOL_MBIM":        2,
	}
)

func (x ZCellularControlProtocol) Enum() *ZCellularControlProtocol {
	p := new(ZCellularControlProtocol)
	*p = x
	return p
}

func (x ZCellularControlProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZCellularControlProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[10].Descriptor()
}

func (ZCellularControlProtocol) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[10]
}

func (x ZCellularControlProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZCellularControlProtocol.Descriptor instead.
func (ZCellularControlProtocol) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{10}
}

// Device Run State
type ZDeviceState int32

const (
	// Just to handle Un-Initialized runState variable Internally
	ZDeviceState_ZDEVICE_STATE_UNSPECIFIED ZDeviceState = 0
	// Device is Online. This only means all components of EVE are up.
	// This does not indicate the Status of Apps or other configured objects.
	// During booting up after reboot, Device might be reported as ONLINE
	// while apps are still being processed.
	ZDeviceState_ZDEVICE_STATE_ONLINE ZDeviceState = 1
	// Device Reboot in Progress. Device is in the process of going down.
	// Once the device comes back up and Eve is started, device reports the
	// the state as "BOOTING"
	ZDeviceState_ZDEVICE_STATE_REBOOTING        ZDeviceState = 2
	ZDeviceState_ZDEVICE_STATE_MAINTENANCE_MODE ZDeviceState = 3
	// Device BaseOs Update in Progress
	ZDeviceState_ZDEVICE_STATE_BASEOS_UPDATING ZDeviceState = 4
	// Device is booting up. This state is reported when EVE is started and
	// is able to communicate with the controller. When all the components of
	// EVE are up, it transitions to ONLINE.
	ZDeviceState_ZDEVICE_STATE_BOOTING ZDeviceState = 5
	// device preparing power off - shutting down all app instances
	ZDeviceState_ZDEVICE_STATE_PREPARING_POWEROFF ZDeviceState = 6
	// device powering off from local profile server
	ZDeviceState_ZDEVICE_STATE_POWERING_OFF ZDeviceState = 7
	// device prepared power off - all app instances are shut down
	ZDeviceState_ZDEVICE_STATE_PREPARED_POWEROFF ZDeviceState = 8
)

// Enum value maps for ZDeviceState.
var (
	ZDeviceState_name = map[int32]string{
		0: "ZDEVICE_STATE_UNSPECIFIED",
		1: "ZDEVICE_STATE_ONLINE",
		2: "ZDEVICE_STATE_REBOOTING",
		3: "ZDEVICE_STATE_MAINTENANCE_MODE",
		4: "ZDEVICE_STATE_BASEOS_UPDATING",
		5: "ZDEVICE_STATE_BOOTING",
		6: "ZDEVICE_STATE_PREPARING_POWEROFF",
		7: "ZDEVICE_STATE_POWERING_OFF",
		8: "ZDEVICE_STATE_PREPARED_POWEROFF",
	}
	ZDeviceState_value = map[string]int32{
		"ZDEVICE_STATE_UNSPECIFIED":        0,
		"ZDEVICE_STATE_ONLINE":             1,
		"ZDEVICE_STATE_REBOOTING":          2,
		"ZDEVICE_STATE_MAINTENANCE_MODE":   3,
		"ZDEVICE_STATE_BASEOS_UPDATING":    4,
		"ZDEVICE_STATE_BOOTING":            5,
		"ZDEVICE_STATE_PREPARING_POWEROFF": 6,
		"ZDEVICE_STATE_POWERING_OFF":       7,
		"ZDEVICE_STATE_PREPARED_POWEROFF":  8,
	}
)

func (x ZDeviceState) Enum() *ZDeviceState {
	p := new(ZDeviceState)
	*p = x
	return p
}

func (x ZDeviceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZDeviceState) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[11].Descriptor()
}

func (ZDeviceState) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[11]
}

func (x ZDeviceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZDeviceState.Descriptor instead.
func (ZDeviceState) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{11}
}

type StorageStatus int32

const (
	StorageStatus_STORAGE_STATUS_UNSPECIFIED StorageStatus = 0
	StorageStatus_STORAGE_STATUS_ONLINE      StorageStatus = 1 // The device or virtual device is in normal working order.
	StorageStatus_STORAGE_STATUS_DEGRADED    StorageStatus = 2 // The virtual device has experienced a failure but can still function.
	StorageStatus_STORAGE_STATUS_FAULTED     StorageStatus = 3 // The device or virtual device is completely inaccessible.
	StorageStatus_STORAGE_STATUS_OFFLINE     StorageStatus = 4 // The device has been explicitly taken offline by the administrator.
	StorageStatus_STORAGE_STATUS_UNAVAIL     StorageStatus = 5 // The device or virtual device cannot be opened. In some cases, pools with UNAVAIL devices appear in DEGRADED mode.
	StorageStatus_STORAGE_STATUS_REMOVED     StorageStatus = 6 // The device was physically removed while the system was running.
	StorageStatus_STORAGE_STATUS_SUSPENDED   StorageStatus = 7 // A pool that is waiting for device connectivity to be restored.
)

// Enum value maps for StorageStatus.
var (
	StorageStatus_name = map[int32]string{
		0: "STORAGE_STATUS_UNSPECIFIED",
		1: "STORAGE_STATUS_ONLINE",
		2: "STORAGE_STATUS_DEGRADED",
		3: "STORAGE_STATUS_FAULTED",
		4: "STORAGE_STATUS_OFFLINE",
		5: "STORAGE_STATUS_UNAVAIL",
		6: "STORAGE_STATUS_REMOVED",
		7: "STORAGE_STATUS_SUSPENDED",
	}
	StorageStatus_value = map[string]int32{
		"STORAGE_STATUS_UNSPECIFIED": 0,
		"STORAGE_STATUS_ONLINE":      1,
		"STORAGE_STATUS_DEGRADED":    2,
		"STORAGE_STATUS_FAULTED":     3,
		"STORAGE_STATUS_OFFLINE":     4,
		"STORAGE_STATUS_UNAVAIL":     5,
		"STORAGE_STATUS_REMOVED":     6,
		"STORAGE_STATUS_SUSPENDED":   7,
	}
)

func (x StorageStatus) Enum() *StorageStatus {
	p := new(StorageStatus)
	*p = x
	return p
}

func (x StorageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[12].Descriptor()
}

func (StorageStatus) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[12]
}

func (x StorageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageStatus.Descriptor instead.
func (StorageStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{12}
}

type StorageRaidType int32

const (
	StorageRaidType_STORAGE_RAID_TYPE_UNSPECIFIED StorageRaidType = 0
	StorageRaidType_STORAGE_RAID_TYPE_RAID0       StorageRaidType = 1 // RAID-0
	StorageRaidType_STORAGE_RAID_TYPE_RAID1       StorageRaidType = 2 // Mirror
	StorageRaidType_STORAGE_RAID_TYPE_RAID5       StorageRaidType = 3 // raidz1 (RAID-5)
	StorageRaidType_STORAGE_RAID_TYPE_RAID6       StorageRaidType = 4 // raidz2 (RAID-6)
	StorageRaidType_STORAGE_RAID_TYPE_RAID7       StorageRaidType = 5 // raidz3 (RAID-7)
	StorageRaidType_STORAGE_RAID_TYPE_NORAID      StorageRaidType = 6 // without RAID
)

// Enum value maps for StorageRaidType.
var (
	StorageRaidType_name = map[int32]string{
		0: "STORAGE_RAID_TYPE_UNSPECIFIED",
		1: "STORAGE_RAID_TYPE_RAID0",
		2: "STORAGE_RAID_TYPE_RAID1",
		3: "STORAGE_RAID_TYPE_RAID5",
		4: "STORAGE_RAID_TYPE_RAID6",
		5: "STORAGE_RAID_TYPE_RAID7",
		6: "STORAGE_RAID_TYPE_NORAID",
	}
	StorageRaidType_value = map[string]int32{
		"STORAGE_RAID_TYPE_UNSPECIFIED": 0,
		"STORAGE_RAID_TYPE_RAID0":       1,
		"STORAGE_RAID_TYPE_RAID1":       2,
		"STORAGE_RAID_TYPE_RAID5":       3,
		"STORAGE_RAID_TYPE_RAID6":       4,
		"STORAGE_RAID_TYPE_RAID7":       5,
		"STORAGE_RAID_TYPE_NORAID":      6,
	}
)

func (x StorageRaidType) Enum() *StorageRaidType {
	p := new(StorageRaidType)
	*p = x
	return p
}

func (x StorageRaidType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageRaidType) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[13].Descriptor()
}

func (StorageRaidType) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[13]
}

func (x StorageRaidType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageRaidType.Descriptor instead.
func (StorageRaidType) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{13}
}

type StorageTypeInfo int32

const (
	StorageTypeInfo_STORAGE_TYPE_INFO_UNSPECIFIED StorageTypeInfo = 0
	StorageTypeInfo_STORAGE_TYPE_INFO_EXT4        StorageTypeInfo = 1
	StorageTypeInfo_STORAGE_TYPE_INFO_ZFS         StorageTypeInfo = 2
)

// Enum value maps for StorageTypeInfo.
var (
	StorageTypeInfo_name = map[int32]string{
		0: "STORAGE_TYPE_INFO_UNSPECIFIED",
		1: "STORAGE_TYPE_INFO_EXT4",
		2: "STORAGE_TYPE_INFO_ZFS",
	}
	StorageTypeInfo_value = map[string]int32{
		"STORAGE_TYPE_INFO_UNSPECIFIED": 0,
		"STORAGE_TYPE_INFO_EXT4":        1,
		"STORAGE_TYPE_INFO_ZFS":         2,
	}
)

func (x StorageTypeInfo) Enum() *StorageTypeInfo {
	p := new(StorageTypeInfo)
	*p = x
	return p
}

func (x StorageTypeInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageTypeInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[14].Descriptor()
}

func (StorageTypeInfo) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[14]
}

func (x StorageTypeInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageTypeInfo.Descriptor instead.
func (StorageTypeInfo) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{14}
}

// Capabilities indicates features in the EdgeDevConfig where there is
// no easy way to otherwise determine whether or not they are parsed and
// supported by EVE-OS
// A larger number indicates all lower numbers are also supported thus
// this works similar to a version field for the EdgeDevConfig support.
type APICapability int32

const (
	APICapability_API_CAPABILITY_UNSPECIFIED              APICapability = 0
	APICapability_API_CAPABILITY_RETRY_UPDATE             APICapability = 1 // BaseOs.retry_update counter supported
	APICapability_API_CAPABILITY_SHUTDOWN                 APICapability = 2 // shutdown DevOpsCmd support
	APICapability_API_CAPABILITY_START_DELAY_IN_SECONDS   APICapability = 3 // start_delay_in_seconds supported
	APICapability_API_CAPABILITY_EDGEVIEW                 APICapability = 4 // edgeview and edgeview.token supported
	APICapability_API_CAPABILITY_VOLUME_SNAPSHOTS         APICapability = 5 // Volume snapshots supported
	APICapability_API_CAPABILITY_NETWORK_INSTANCE_ROUTING APICapability = 6 // routing config in NetworkInstanceConfig supported
	APICapability_API_CAPABILITY_BOOT_MODE                APICapability = 7 // Support different boot modes for Edge Applications (VMs)
	APICapability_API_CAPABILITY_MTU                      APICapability = 8 // Allows to set MTU for network adapters and network instances
	APICapability_API_CAPABILITY_ADAPTER_USER_LABELS      APICapability = 9 // Supports user-defined shared network adapter labels
)

// Enum value maps for APICapability.
var (
	APICapability_name = map[int32]string{
		0: "API_CAPABILITY_UNSPECIFIED",
		1: "API_CAPABILITY_RETRY_UPDATE",
		2: "API_CAPABILITY_SHUTDOWN",
		3: "API_CAPABILITY_START_DELAY_IN_SECONDS",
		4: "API_CAPABILITY_EDGEVIEW",
		5: "API_CAPABILITY_VOLUME_SNAPSHOTS",
		6: "API_CAPABILITY_NETWORK_INSTANCE_ROUTING",
		7: "API_CAPABILITY_BOOT_MODE",
		8: "API_CAPABILITY_MTU",
		9: "API_CAPABILITY_ADAPTER_USER_LABELS",
	}
	APICapability_value = map[string]int32{
		"API_CAPABILITY_UNSPECIFIED":              0,
		"API_CAPABILITY_RETRY_UPDATE":             1,
		"API_CAPABILITY_SHUTDOWN":                 2,
		"API_CAPABILITY_START_DELAY_IN_SECONDS":   3,
		"API_CAPABILITY_EDGEVIEW":                 4,
		"API_CAPABILITY_VOLUME_SNAPSHOTS":         5,
		"API_CAPABILITY_NETWORK_INSTANCE_ROUTING": 6,
		"API_CAPABILITY_BOOT_MODE":                7,
		"API_CAPABILITY_MTU":                      8,
		"API_CAPABILITY_ADAPTER_USER_LABELS":      9,
	}
)

func (x APICapability) Enum() *APICapability {
	p := new(APICapability)
	*p = x
	return p
}

func (x APICapability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APICapability) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[15].Descriptor()
}

func (APICapability) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[15]
}

func (x APICapability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APICapability.Descriptor instead.
func (APICapability) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{15}
}

// Different reasons for a boot/reboot
// Must match the values in pkg/pillar/types.BootReason
type BootReason int32

const (
	BootReason_BOOT_REASON_UNSPECIFIED   BootReason = 0
	BootReason_BOOT_REASON_FIRST         BootReason = 1
	BootReason_BOOT_REASON_REBOOT_CMD    BootReason = 2
	BootReason_BOOT_REASON_UPDATE        BootReason = 3
	BootReason_BOOT_REASON_FALLBACK      BootReason = 4
	BootReason_BOOT_REASON_DISCONNECT    BootReason = 5
	BootReason_BOOT_REASON_FATAL         BootReason = 6
	BootReason_BOOT_REASON_OOM           BootReason = 7
	BootReason_BOOT_REASON_WATCHDOG_HUNG BootReason = 8
	BootReason_BOOT_REASON_WATCHDOG_PID  BootReason = 9
	BootReason_BOOT_REASON_KERNEL        BootReason = 10
	BootReason_BOOT_REASON_POWER_FAIL    BootReason = 11
	BootReason_BOOT_REASON_UNKNOWN       BootReason = 12
	BootReason_BOOT_REASON_VAULT_FAILED  BootReason = 13
	BootReason_BOOT_REASON_POWEROFF_CMD  BootReason = 14 // From Local Profile Server poweroff
	BootReason_BOOT_REASON_PARSE_FAIL    BootReason = 255
)

// Enum value maps for BootReason.
var (
	BootReason_name = map[int32]string{
		0:   "BOOT_REASON_UNSPECIFIED",
		1:   "BOOT_REASON_FIRST",
		2:   "BOOT_REASON_REBOOT_CMD",
		3:   "BOOT_REASON_UPDATE",
		4:   "BOOT_REASON_FALLBACK",
		5:   "BOOT_REASON_DISCONNECT",
		6:   "BOOT_REASON_FATAL",
		7:   "BOOT_REASON_OOM",
		8:   "BOOT_REASON_WATCHDOG_HUNG",
		9:   "BOOT_REASON_WATCHDOG_PID",
		10:  "BOOT_REASON_KERNEL",
		11:  "BOOT_REASON_POWER_FAIL",
		12:  "BOOT_REASON_UNKNOWN",
		13:  "BOOT_REASON_VAULT_FAILED",
		14:  "BOOT_REASON_POWEROFF_CMD",
		255: "BOOT_REASON_PARSE_FAIL",
	}
	BootReason_value = map[string]int32{
		"BOOT_REASON_UNSPECIFIED":   0,
		"BOOT_REASON_FIRST":         1,
		"BOOT_REASON_REBOOT_CMD":    2,
		"BOOT_REASON_UPDATE":        3,
		"BOOT_REASON_FALLBACK":      4,
		"BOOT_REASON_DISCONNECT":    5,
		"BOOT_REASON_FATAL":         6,
		"BOOT_REASON_OOM":           7,
		"BOOT_REASON_WATCHDOG_HUNG": 8,
		"BOOT_REASON_WATCHDOG_PID":  9,
		"BOOT_REASON_KERNEL":        10,
		"BOOT_REASON_POWER_FAIL":    11,
		"BOOT_REASON_UNKNOWN":       12,
		"BOOT_REASON_VAULT_FAILED":  13,
		"BOOT_REASON_POWEROFF_CMD":  14,
		"BOOT_REASON_PARSE_FAIL":    255,
	}
)

func (x BootReason) Enum() *BootReason {
	p := new(BootReason)
	*p = x
	return p
}

func (x BootReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BootReason) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[16].Descriptor()
}

func (BootReason) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[16]
}

func (x BootReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BootReason.Descriptor instead.
func (BootReason) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{16}
}

// Different reasons why we are in maintenance mode
// Must match the values in pkg/pillar/types.MaintenceModeReason
type MaintenanceModeReason int32

const (
	MaintenanceModeReason_MAINTENANCE_MODE_REASON_NONE            MaintenanceModeReason = 0
	MaintenanceModeReason_MAINTENANCE_MODE_REASON_USER_REQUESTED  MaintenanceModeReason = 1
	MaintenanceModeReason_MAINTENANCE_MODE_REASON_VAULT_LOCKED_UP MaintenanceModeReason = 2
	MaintenanceModeReason_MAINTENANCE_MODE_REASON_LOW_DISK_SPACE  MaintenanceModeReason = 3
)

// Enum value maps for MaintenanceModeReason.
var (
	MaintenanceModeReason_name = map[int32]string{
		0: "MAINTENANCE_MODE_REASON_NONE",
		1: "MAINTENANCE_MODE_REASON_USER_REQUESTED",
		2: "MAINTENANCE_MODE_REASON_VAULT_LOCKED_UP",
		3: "MAINTENANCE_MODE_REASON_LOW_DISK_SPACE",
	}
	MaintenanceModeReason_value = map[string]int32{
		"MAINTENANCE_MODE_REASON_NONE":            0,
		"MAINTENANCE_MODE_REASON_USER_REQUESTED":  1,
		"MAINTENANCE_MODE_REASON_VAULT_LOCKED_UP": 2,
		"MAINTENANCE_MODE_REASON_LOW_DISK_SPACE":  3,
	}
)

func (x MaintenanceModeReason) Enum() *MaintenanceModeReason {
	p := new(MaintenanceModeReason)
	*p = x
	return p
}

func (x MaintenanceModeReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MaintenanceModeReason) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[17].Descriptor()
}

func (MaintenanceModeReason) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[17]
}

func (x MaintenanceModeReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MaintenanceModeReason.Descriptor instead.
func (MaintenanceModeReason) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{17}
}

// Different states of attestation process
// Must match the values in pkg/pillar/attest.State
// We do not expect StateAny to be published as not a real state
type AttestationState int32

const (
	AttestationState_ATTESTATION_STATE_UNSPECIFIED        AttestationState = 0 //State when (Re)Starting attestation
	AttestationState_ATTESTATION_STATE_NONCE_WAIT         AttestationState = 1 //Waiting for response from Controller for Nonce request
	AttestationState_ATTESTATION_STATE_TPM_QUOTE_WAIT     AttestationState = 2 //Waiting for TPM PCR quote to be published from the tpmmgr
	AttestationState_ATTESTATION_STATE_TPM_ESCROW_WAIT    AttestationState = 3 //Waiting for TPM Escrow data to be published from the tpmmgr
	AttestationState_ATTESTATION_STATE_ATTEST_WAIT        AttestationState = 4 //Waiting for response from Controller for PCR quote
	AttestationState_ATTESTATION_STATE_ATTEST_ESCROW_WAIT AttestationState = 5 //Waiting for response from Controller for Escrow data
	AttestationState_ATTESTATION_STATE_RESTART_WAIT       AttestationState = 6 //Waiting for restart timer to expire, to start all over again
	AttestationState_ATTESTATION_STATE_COMPLETE           AttestationState = 7 //Everything w.r.t attestation is complete
)

// Enum value maps for AttestationState.
var (
	AttestationState_name = map[int32]string{
		0: "ATTESTATION_STATE_UNSPECIFIED",
		1: "ATTESTATION_STATE_NONCE_WAIT",
		2: "ATTESTATION_STATE_TPM_QUOTE_WAIT",
		3: "ATTESTATION_STATE_TPM_ESCROW_WAIT",
		4: "ATTESTATION_STATE_ATTEST_WAIT",
		5: "ATTESTATION_STATE_ATTEST_ESCROW_WAIT",
		6: "ATTESTATION_STATE_RESTART_WAIT",
		7: "ATTESTATION_STATE_COMPLETE",
	}
	AttestationState_value = map[string]int32{
		"ATTESTATION_STATE_UNSPECIFIED":        0,
		"ATTESTATION_STATE_NONCE_WAIT":         1,
		"ATTESTATION_STATE_TPM_QUOTE_WAIT":     2,
		"ATTESTATION_STATE_TPM_ESCROW_WAIT":    3,
		"ATTESTATION_STATE_ATTEST_WAIT":        4,
		"ATTESTATION_STATE_ATTEST_ESCROW_WAIT": 5,
		"ATTESTATION_STATE_RESTART_WAIT":       6,
		"ATTESTATION_STATE_COMPLETE":           7,
	}
)

func (x AttestationState) Enum() *AttestationState {
	p := new(AttestationState)
	*p = x
	return p
}

func (x AttestationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttestationState) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[18].Descriptor()
}

func (AttestationState) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[18]
}

func (x AttestationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttestationState.Descriptor instead.
func (AttestationState) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{18}
}

// Different types of app instance metadata
type AppInstMetaDataType int32

const (
	AppInstMetaDataType_APP_INST_META_DATA_TYPE_NONE          AppInstMetaDataType = 0
	AppInstMetaDataType_APP_INST_META_DATA_TYPE_KUBE_CONFIG   AppInstMetaDataType = 1
	AppInstMetaDataType_APP_INST_META_DATA_TYPE_CUSTOM_STATUS AppInstMetaDataType = 2
)

// Enum value maps for AppInstMetaDataType.
var (
	AppInstMetaDataType_name = map[int32]string{
		0: "APP_INST_META_DATA_TYPE_NONE",
		1: "APP_INST_META_DATA_TYPE_KUBE_CONFIG",
		2: "APP_INST_META_DATA_TYPE_CUSTOM_STATUS",
	}
	AppInstMetaDataType_value = map[string]int32{
		"APP_INST_META_DATA_TYPE_NONE":          0,
		"APP_INST_META_DATA_TYPE_KUBE_CONFIG":   1,
		"APP_INST_META_DATA_TYPE_CUSTOM_STATUS": 2,
	}
)

func (x AppInstMetaDataType) Enum() *AppInstMetaDataType {
	p := new(AppInstMetaDataType)
	*p = x
	return p
}

func (x AppInstMetaDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppInstMetaDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[19].Descriptor()
}

func (AppInstMetaDataType) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[19]
}

func (x AppInstMetaDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppInstMetaDataType.Descriptor instead.
func (AppInstMetaDataType) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{19}
}

type WirelessType int32

const (
	WirelessType_WIRELESS_TYPE_UNSPECIFIED WirelessType = 0
	WirelessType_WIRELESS_TYPE_WIFI        WirelessType = 1
	WirelessType_WIRELESS_TYPE_CELLULAR    WirelessType = 2
)

// Enum value maps for WirelessType.
var (
	WirelessType_name = map[int32]string{
		0: "WIRELESS_TYPE_UNSPECIFIED",
		1: "WIRELESS_TYPE_WIFI",
		2: "WIRELESS_TYPE_CELLULAR",
	}
	WirelessType_value = map[string]int32{
		"WIRELESS_TYPE_UNSPECIFIED": 0,
		"WIRELESS_TYPE_WIFI":        1,
		"WIRELESS_TYPE_CELLULAR":    2,
	}
)

func (x WirelessType) Enum() *WirelessType {
	p := new(WirelessType)
	*p = x
	return p
}

func (x WirelessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WirelessType) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[20].Descriptor()
}

func (WirelessType) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[20]
}

func (x WirelessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WirelessType.Descriptor instead.
func (WirelessType) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{20}
}

type BaseOsStatus int32

const (
	BaseOsStatus_NONE          BaseOsStatus = 0 // Should be ignored in output
	BaseOsStatus_DOWNLOADING   BaseOsStatus = 1 // subStatus will have more details
	BaseOsStatus_DOWNLOAD_DONE BaseOsStatus = 2 // Terminal state if user action was to download
	BaseOsStatus_UPDATING      BaseOsStatus = 3 // subStatus will have more details including
	// whether it is rebooting, or testing
	BaseOsStatus_UPDATED  BaseOsStatus = 4 // Running the configured baseimage
	BaseOsStatus_FALLBACK BaseOsStatus = 5 // Fallback image during testing
	BaseOsStatus_FAILED   BaseOsStatus = 6 // See ErrInfo for details
)

// Enum value maps for BaseOsStatus.
var (
	BaseOsStatus_name = map[int32]string{
		0: "NONE",
		1: "DOWNLOADING",
		2: "DOWNLOAD_DONE",
		3: "UPDATING",
		4: "UPDATED",
		5: "FALLBACK",
		6: "FAILED",
	}
	BaseOsStatus_value = map[string]int32{
		"NONE":          0,
		"DOWNLOADING":   1,
		"DOWNLOAD_DONE": 2,
		"UPDATING":      3,
		"UPDATED":       4,
		"FALLBACK":      5,
		"FAILED":        6,
	}
)

func (x BaseOsStatus) Enum() *BaseOsStatus {
	p := new(BaseOsStatus)
	*p = x
	return p
}

func (x BaseOsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaseOsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[21].Descriptor()
}

func (BaseOsStatus) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[21]
}

func (x BaseOsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaseOsStatus.Descriptor instead.
func (BaseOsStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{21}
}

type BaseOsSubStatus int32

const (
	BaseOsSubStatus_NONE_SUBSTATUS           BaseOsSubStatus = 0
	BaseOsSubStatus_DOWNLOAD_INPROGRESS      BaseOsSubStatus = 1 // subStatusProgress is percentage
	BaseOsSubStatus_VERIFY_INPROGRESS        BaseOsSubStatus = 2 // subStatusProgress is percentage
	BaseOsSubStatus_UPDATE_INITIALIZING      BaseOsSubStatus = 3
	BaseOsSubStatus_UPDATE_REBOOTING         BaseOsSubStatus = 4 // subStatusProgress is time left
	BaseOsSubStatus_UPDATE_TESTING           BaseOsSubStatus = 5 // subStatusProgress is time left
	BaseOsSubStatus_UPDATE_NEED_TEST_CONFIRM BaseOsSubStatus = 6 // waiting for controller to commit to new
	BaseOsSubStatus_UPDATE_DEFERRED          BaseOsSubStatus = 7 // waiting for current update to finish
)

// Enum value maps for BaseOsSubStatus.
var (
	BaseOsSubStatus_name = map[int32]string{
		0: "NONE_SUBSTATUS",
		1: "DOWNLOAD_INPROGRESS",
		2: "VERIFY_INPROGRESS",
		3: "UPDATE_INITIALIZING",
		4: "UPDATE_REBOOTING",
		5: "UPDATE_TESTING",
		6: "UPDATE_NEED_TEST_CONFIRM",
		7: "UPDATE_DEFERRED",
	}
	BaseOsSubStatus_value = map[string]int32{
		"NONE_SUBSTATUS":           0,
		"DOWNLOAD_INPROGRESS":      1,
		"VERIFY_INPROGRESS":        2,
		"UPDATE_INITIALIZING":      3,
		"UPDATE_REBOOTING":         4,
		"UPDATE_TESTING":           5,
		"UPDATE_NEED_TEST_CONFIRM": 6,
		"UPDATE_DEFERRED":          7,
	}
)

func (x BaseOsSubStatus) Enum() *BaseOsSubStatus {
	p := new(BaseOsSubStatus)
	*p = x
	return p
}

func (x BaseOsSubStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaseOsSubStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[22].Descriptor()
}

func (BaseOsSubStatus) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[22]
}

func (x BaseOsSubStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaseOsSubStatus.Descriptor instead.
func (BaseOsSubStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{22}
}

// Type of the snapshot creation reason
type SnapshotType int32

const (
	SnapshotType_SNAPSHOT_TYPE_UNSPECIFIED SnapshotType = 0
	SnapshotType_SNAPSHOT_TYPE_APP_UPDATE  SnapshotType = 1 // Snapshot created as a result of an application update
)

// Enum value maps for SnapshotType.
var (
	SnapshotType_name = map[int32]string{
		0: "SNAPSHOT_TYPE_UNSPECIFIED",
		1: "SNAPSHOT_TYPE_APP_UPDATE",
	}
	SnapshotType_value = map[string]int32{
		"SNAPSHOT_TYPE_UNSPECIFIED": 0,
		"SNAPSHOT_TYPE_APP_UPDATE":  1,
	}
)

func (x SnapshotType) Enum() *SnapshotType {
	p := new(SnapshotType)
	*p = x
	return p
}

func (x SnapshotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SnapshotType) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[23].Descriptor()
}

func (SnapshotType) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[23]
}

func (x SnapshotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SnapshotType.Descriptor instead.
func (SnapshotType) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{23}
}

type ZInfoClusterNodeStatus int32

const (
	ZInfoClusterNodeStatus_Z_INFO_CLUSTER_NODE_STATUS_UNSPECIFIED ZInfoClusterNodeStatus = 0
	ZInfoClusterNodeStatus_Z_INFO_CLUSTER_NODE_STATUS_READY       ZInfoClusterNodeStatus = 1 // cluster reports our node is ready
	ZInfoClusterNodeStatus_Z_INFO_CLUSTER_NODE_STATUS_NOTREADY    ZInfoClusterNodeStatus = 2 // cluster reports our node is NOT ready
	ZInfoClusterNodeStatus_Z_INFO_CLUSTER_NODE_STATUS_DOWN        ZInfoClusterNodeStatus = 3 // cluster API server can not be reached
)

// Enum value maps for ZInfoClusterNodeStatus.
var (
	ZInfoClusterNodeStatus_name = map[int32]string{
		0: "Z_INFO_CLUSTER_NODE_STATUS_UNSPECIFIED",
		1: "Z_INFO_CLUSTER_NODE_STATUS_READY",
		2: "Z_INFO_CLUSTER_NODE_STATUS_NOTREADY",
		3: "Z_INFO_CLUSTER_NODE_STATUS_DOWN",
	}
	ZInfoClusterNodeStatus_value = map[string]int32{
		"Z_INFO_CLUSTER_NODE_STATUS_UNSPECIFIED": 0,
		"Z_INFO_CLUSTER_NODE_STATUS_READY":       1,
		"Z_INFO_CLUSTER_NODE_STATUS_NOTREADY":    2,
		"Z_INFO_CLUSTER_NODE_STATUS_DOWN":        3,
	}
)

func (x ZInfoClusterNodeStatus) Enum() *ZInfoClusterNodeStatus {
	p := new(ZInfoClusterNodeStatus)
	*p = x
	return p
}

func (x ZInfoClusterNodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZInfoClusterNodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[24].Descriptor()
}

func (ZInfoClusterNodeStatus) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[24]
}

func (x ZInfoClusterNodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZInfoClusterNodeStatus.Descriptor instead.
func (ZInfoClusterNodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{24}
}

// ipSec state information
type ZInfoVpnState int32

const (
	ZInfoVpnState_VPN_INVALID     ZInfoVpnState = 0
	ZInfoVpnState_VPN_INITIAL     ZInfoVpnState = 1  // Config received
	ZInfoVpnState_VPN_CONNECTING  ZInfoVpnState = 2  // Connection is in-progress
	ZInfoVpnState_VPN_ESTABLISHED ZInfoVpnState = 3  // Connection established
	ZInfoVpnState_VPN_INSTALLED   ZInfoVpnState = 4  // SAs/Routes Installed
	ZInfoVpnState_VPN_REKEYED     ZInfoVpnState = 5  // SAs Rekeyed
	ZInfoVpnState_VPN_DELETED     ZInfoVpnState = 10 // Connection deleted
)

// Enum value maps for ZInfoVpnState.
var (
	ZInfoVpnState_name = map[int32]string{
		0:  "VPN_INVALID",
		1:  "VPN_INITIAL",
		2:  "VPN_CONNECTING",
		3:  "VPN_ESTABLISHED",
		4:  "VPN_INSTALLED",
		5:  "VPN_REKEYED",
		10: "VPN_DELETED",
	}
	ZInfoVpnState_value = map[string]int32{
		"VPN_INVALID":     0,
		"VPN_INITIAL":     1,
		"VPN_CONNECTING":  2,
		"VPN_ESTABLISHED": 3,
		"VPN_INSTALLED":   4,
		"VPN_REKEYED":     5,
		"VPN_DELETED":     10,
	}
)

func (x ZInfoVpnState) Enum() *ZInfoVpnState {
	p := new(ZInfoVpnState)
	*p = x
	return p
}

func (x ZInfoVpnState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZInfoVpnState) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[25].Descriptor()
}

func (ZInfoVpnState) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[25]
}

func (x ZInfoVpnState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZInfoVpnState.Descriptor instead.
func (ZInfoVpnState) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{25}
}

type ZNetworkInstanceState int32

const (
	ZNetworkInstanceState_ZNETINST_STATE_UNSPECIFIED ZNetworkInstanceState = 0
	ZNetworkInstanceState_ZNETINST_STATE_INIT        ZNetworkInstanceState = 1
	// Terminal State.
	ZNetworkInstanceState_ZNETINST_STATE_ONLINE ZNetworkInstanceState = 2
	// Terminal State.
	ZNetworkInstanceState_ZNETINST_STATE_ERROR ZNetworkInstanceState = 3
)

// Enum value maps for ZNetworkInstanceState.
var (
	ZNetworkInstanceState_name = map[int32]string{
		0: "ZNETINST_STATE_UNSPECIFIED",
		1: "ZNETINST_STATE_INIT",
		2: "ZNETINST_STATE_ONLINE",
		3: "ZNETINST_STATE_ERROR",
	}
	ZNetworkInstanceState_value = map[string]int32{
		"ZNETINST_STATE_UNSPECIFIED": 0,
		"ZNETINST_STATE_INIT":        1,
		"ZNETINST_STATE_ONLINE":      2,
		"ZNETINST_STATE_ERROR":       3,
	}
)

func (x ZNetworkInstanceState) Enum() *ZNetworkInstanceState {
	p := new(ZNetworkInstanceState)
	*p = x
	return p
}

func (x ZNetworkInstanceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZNetworkInstanceState) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[26].Descriptor()
}

func (ZNetworkInstanceState) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[26]
}

func (x ZNetworkInstanceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZNetworkInstanceState.Descriptor instead.
func (ZNetworkInstanceState) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{26}
}

// LocReliability - reliability of location information.
type LocReliability int32

const (
	LocReliability_LOC_RELIABILITY_UNSPECIFIED LocReliability = 0
	LocReliability_LOC_RELIABILITY_VERY_LOW    LocReliability = 1
	LocReliability_LOC_RELIABILITY_LOW         LocReliability = 2
	LocReliability_LOC_RELIABILITY_MEDIUM      LocReliability = 3
	LocReliability_LOC_RELIABILITY_HIGH        LocReliability = 4
)

// Enum value maps for LocReliability.
var (
	LocReliability_name = map[int32]string{
		0: "LOC_RELIABILITY_UNSPECIFIED",
		1: "LOC_RELIABILITY_VERY_LOW",
		2: "LOC_RELIABILITY_LOW",
		3: "LOC_RELIABILITY_MEDIUM",
		4: "LOC_RELIABILITY_HIGH",
	}
	LocReliability_value = map[string]int32{
		"LOC_RELIABILITY_UNSPECIFIED": 0,
		"LOC_RELIABILITY_VERY_LOW":    1,
		"LOC_RELIABILITY_LOW":         2,
		"LOC_RELIABILITY_MEDIUM":      3,
		"LOC_RELIABILITY_HIGH":        4,
	}
)

func (x LocReliability) Enum() *LocReliability {
	p := new(LocReliability)
	*p = x
	return p
}

func (x LocReliability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocReliability) Descriptor() protoreflect.EnumDescriptor {
	return file_info_info_proto_enumTypes[27].Descriptor()
}

func (LocReliability) Type() protoreflect.EnumType {
	return &file_info_info_proto_enumTypes[27]
}

func (x LocReliability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocReliability.Descriptor instead.
func (LocReliability) EnumDescriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{27}
}

// A generic metric item.
// Deprecated: Prefer to use dedicated proto message definitions for all metrics.
type DeprecatedMetricItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Type DepMetricItemType `protobuf:"varint,2,opt,name=type,proto3,enum=org.lfedge.eve.info.DepMetricItemType" json:"type,omitempty"`
	// Types that are assignable to MetricItemValue:
	//
	//	*DeprecatedMetricItem_BoolValue
	//	*DeprecatedMetricItem_Uint32Value
	//	*DeprecatedMetricItem_Uint64Value
	//	*DeprecatedMetricItem_FloatValue
	//	*DeprecatedMetricItem_StringValue
	MetricItemValue isDeprecatedMetricItem_MetricItemValue `protobuf_oneof:"metricItemValue"`
}

func (x *DeprecatedMetricItem) Reset() {
	*x = DeprecatedMetricItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprecatedMetricItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecatedMetricItem) ProtoMessage() {}

func (x *DeprecatedMetricItem) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecatedMetricItem.ProtoReflect.Descriptor instead.
func (*DeprecatedMetricItem) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{0}
}

func (x *DeprecatedMetricItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DeprecatedMetricItem) GetType() DepMetricItemType {
	if x != nil {
		return x.Type
	}
	return DepMetricItemType_DepMetricItemOther
}

func (m *DeprecatedMetricItem) GetMetricItemValue() isDeprecatedMetricItem_MetricItemValue {
	if m != nil {
		return m.MetricItemValue
	}
	return nil
}

func (x *DeprecatedMetricItem) GetBoolValue() bool {
	if x, ok := x.GetMetricItemValue().(*DeprecatedMetricItem_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *DeprecatedMetricItem) GetUint32Value() uint32 {
	if x, ok := x.GetMetricItemValue().(*DeprecatedMetricItem_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *DeprecatedMetricItem) GetUint64Value() uint64 {
	if x, ok := x.GetMetricItemValue().(*DeprecatedMetricItem_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *DeprecatedMetricItem) GetFloatValue() float32 {
	if x, ok := x.GetMetricItemValue().(*DeprecatedMetricItem_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *DeprecatedMetricItem) GetStringValue() string {
	if x, ok := x.GetMetricItemValue().(*DeprecatedMetricItem_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isDeprecatedMetricItem_MetricItemValue interface {
	isDeprecatedMetricItem_MetricItemValue()
}

type DeprecatedMetricItem_BoolValue struct {
	BoolValue bool `protobuf:"varint,3,opt,name=boolValue,proto3,oneof"`
}

type DeprecatedMetricItem_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,4,opt,name=uint32Value,proto3,oneof"` // If timer this is in seconds
}

type DeprecatedMetricItem_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,5,opt,name=uint64Value,proto3,oneof"`
}

type DeprecatedMetricItem_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,6,opt,name=floatValue,proto3,oneof"`
}

type DeprecatedMetricItem_StringValue struct {
	StringValue string `protobuf:"bytes,7,opt,name=stringValue,proto3,oneof"` // Use with care
}

func (*DeprecatedMetricItem_BoolValue) isDeprecatedMetricItem_MetricItemValue() {}

func (*DeprecatedMetricItem_Uint32Value) isDeprecatedMetricItem_MetricItemValue() {}

func (*DeprecatedMetricItem_Uint64Value) isDeprecatedMetricItem_MetricItemValue() {}

func (*DeprecatedMetricItem_FloatValue) isDeprecatedMetricItem_MetricItemValue() {}

func (*DeprecatedMetricItem_StringValue) isDeprecatedMetricItem_MetricItemValue() {}

// Map from MAC to IP addresses
type ZmetIPAssignmentEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress string   `protobuf:"bytes,1,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	IpAddress  []string `protobuf:"bytes,2,rep,name=ipAddress,proto3" json:"ipAddress,omitempty"`
}

func (x *ZmetIPAssignmentEntry) Reset() {
	*x = ZmetIPAssignmentEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZmetIPAssignmentEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZmetIPAssignmentEntry) ProtoMessage() {}

func (x *ZmetIPAssignmentEntry) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZmetIPAssignmentEntry.ProtoReflect.Descriptor instead.
func (*ZmetIPAssignmentEntry) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{1}
}

func (x *ZmetIPAssignmentEntry) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ZmetIPAssignmentEntry) GetIpAddress() []string {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

// Map from vifname to other info
type ZmetVifInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VifName    string `protobuf:"bytes,1,opt,name=vifName,proto3" json:"vifName,omitempty"`
	MacAddress string `protobuf:"bytes,2,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	AppID      string `protobuf:"bytes,3,opt,name=appID,proto3" json:"appID,omitempty"` // UUID
}

func (x *ZmetVifInfo) Reset() {
	*x = ZmetVifInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZmetVifInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZmetVifInfo) ProtoMessage() {}

func (x *ZmetVifInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZmetVifInfo.ProtoReflect.Descriptor instead.
func (*ZmetVifInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{2}
}

func (x *ZmetVifInfo) GetVifName() string {
	if x != nil {
		return x.VifName
	}
	return ""
}

func (x *ZmetVifInfo) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ZmetVifInfo) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

// Information about assignable I/O adapter bundles
type ZioBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          evecommon.PhyIoType        `protobuf:"varint,1,opt,name=type,proto3,enum=org.lfedge.eve.common.PhyIoType" json:"type,omitempty"`
	Name          string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`       // Short hand name such as "com"
	Members       []string                   `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"` // E.g., "com1", "com2"
	UsedByAppUUID string                     `protobuf:"bytes,4,opt,name=usedByAppUUID,proto3" json:"usedByAppUUID,omitempty"`
	UsedByBaseOS  bool                       `protobuf:"varint,5,opt,name=usedByBaseOS,proto3" json:"usedByBaseOS,omitempty"`
	IoAddressList []*IoAddresses             `protobuf:"bytes,6,rep,name=ioAddressList,proto3" json:"ioAddressList,omitempty"`                              // One per member
	Usage         evecommon.PhyIoMemberUsage `protobuf:"varint,7,opt,name=usage,proto3,enum=org.lfedge.eve.common.PhyIoMemberUsage" json:"usage,omitempty"` // Usage of the IoBundle
	Err           *ErrorInfo                 `protobuf:"bytes,8,opt,name=err,proto3" json:"err,omitempty"`                                                  // Any errors on the IoBundle
}

func (x *ZioBundle) Reset() {
	*x = ZioBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZioBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZioBundle) ProtoMessage() {}

func (x *ZioBundle) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZioBundle.ProtoReflect.Descriptor instead.
func (*ZioBundle) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{3}
}

func (x *ZioBundle) GetType() evecommon.PhyIoType {
	if x != nil {
		return x.Type
	}
	return evecommon.PhyIoType(0)
}

func (x *ZioBundle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ZioBundle) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ZioBundle) GetUsedByAppUUID() string {
	if x != nil {
		return x.UsedByAppUUID
	}
	return ""
}

func (x *ZioBundle) GetUsedByBaseOS() bool {
	if x != nil {
		return x.UsedByBaseOS
	}
	return false
}

func (x *ZioBundle) GetIoAddressList() []*IoAddresses {
	if x != nil {
		return x.IoAddressList
	}
	return nil
}

func (x *ZioBundle) GetUsage() evecommon.PhyIoMemberUsage {
	if x != nil {
		return x.Usage
	}
	return evecommon.PhyIoMemberUsage(0)
}

func (x *ZioBundle) GetErr() *ErrorInfo {
	if x != nil {
		return x.Err
	}
	return nil
}

type IoAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress string           `protobuf:"bytes,1,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	VfInfo     *VfPublishedInfo `protobuf:"bytes,2,opt,name=vf_info,json=vfInfo,proto3" json:"vf_info,omitempty"`
}

func (x *IoAddresses) Reset() {
	*x = IoAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IoAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IoAddresses) ProtoMessage() {}

func (x *IoAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IoAddresses.ProtoReflect.Descriptor instead.
func (*IoAddresses) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{4}
}

func (x *IoAddresses) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *IoAddresses) GetVfInfo() *VfPublishedInfo {
	if x != nil {
		return x.VfInfo
	}
	return nil
}

// Information published for Virtual Function (VF) created by SR-IOV
// Used only for Virtual Functions (VFs) not Physical Functions (PFs)
// Reference structure in pkg/pillar/assignableadapters.go VfInfo
type VfPublishedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	VlanId uint32 `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *VfPublishedInfo) Reset() {
	*x = VfPublishedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VfPublishedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VfPublishedInfo) ProtoMessage() {}

func (x *VfPublishedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VfPublishedInfo.ProtoReflect.Descriptor instead.
func (*VfPublishedInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{5}
}

func (x *VfPublishedInfo) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *VfPublishedInfo) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

// Manufacturing info, product name, model, version etc.
// From dmidecode/BIOS on Intel
type ZInfoManufacturer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manufacturer    string `protobuf:"bytes,1,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	ProductName     string `protobuf:"bytes,2,opt,name=productName,proto3" json:"productName,omitempty"`
	Version         string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	SerialNumber    string `protobuf:"bytes,4,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	UUID            string `protobuf:"bytes,5,opt,name=UUID,proto3" json:"UUID,omitempty"`             // From BIOS; different than device UUID
	Compatible      string `protobuf:"bytes,6,opt,name=compatible,proto3" json:"compatible,omitempty"` // From /proc/device-tree/compatible on ARM
	BiosVendor      string `protobuf:"bytes,7,opt,name=biosVendor,proto3" json:"biosVendor,omitempty"`
	BiosVersion     string `protobuf:"bytes,8,opt,name=biosVersion,proto3" json:"biosVersion,omitempty"`
	BiosReleaseDate string `protobuf:"bytes,9,opt,name=biosReleaseDate,proto3" json:"biosReleaseDate,omitempty"`
}

func (x *ZInfoManufacturer) Reset() {
	*x = ZInfoManufacturer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoManufacturer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoManufacturer) ProtoMessage() {}

func (x *ZInfoManufacturer) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoManufacturer.ProtoReflect.Descriptor instead.
func (*ZInfoManufacturer) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{6}
}

func (x *ZInfoManufacturer) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ZInfoManufacturer) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ZInfoManufacturer) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ZInfoManufacturer) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *ZInfoManufacturer) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *ZInfoManufacturer) GetCompatible() string {
	if x != nil {
		return x.Compatible
	}
	return ""
}

func (x *ZInfoManufacturer) GetBiosVendor() string {
	if x != nil {
		return x.BiosVendor
	}
	return ""
}

func (x *ZInfoManufacturer) GetBiosVersion() string {
	if x != nil {
		return x.BiosVersion
	}
	return ""
}

func (x *ZInfoManufacturer) GetBiosReleaseDate() string {
	if x != nil {
		return x.BiosReleaseDate
	}
	return ""
}

type ZInfoNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deprecated = 1;
	// deprecated = 2;
	MacAddr string `protobuf:"bytes,3,opt,name=macAddr,proto3" json:"macAddr,omitempty"`
	// devName - Must be set to SystemAdapter.Name which is the Logicallabel
	DevName string `protobuf:"bytes,4,opt,name=devName,proto3" json:"devName,omitempty"`
	// alias - Must be set to SystemAdapter.alias
	Alias          string     `protobuf:"bytes,40,opt,name=alias,proto3" json:"alias,omitempty"`
	IPAddrs        []string   `protobuf:"bytes,5,rep,name=IPAddrs,proto3" json:"IPAddrs,omitempty"`               // All IP addresses with /N for subnet
	DefaultRouters []string   `protobuf:"bytes,6,rep,name=defaultRouters,proto3" json:"defaultRouters,omitempty"` // If DHCP assigned
	Dns            *ZInfoDNS  `protobuf:"bytes,7,opt,name=dns,proto3" json:"dns,omitempty"`                       // If DHCP assigned
	Ipv4Up         bool       `protobuf:"varint,8,opt,name=ipv4_up,json=ipv4Up,proto3" json:"ipv4_up,omitempty"`  // operational up/down status.
	Location       *GeoLoc    `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	Uplink         bool       `protobuf:"varint,10,opt,name=uplink,proto3" json:"uplink,omitempty"`        // Uplink interface  // XXX rename to isMgmt
	NetworkErr     *ErrorInfo `protobuf:"bytes,11,opt,name=networkErr,proto3" json:"networkErr,omitempty"` // For instance bad proxy config
	// Ifname from PhysicalIo - eth0, eth1 etc
	LocalName string       `protobuf:"bytes,12,opt,name=localName,proto3" json:"localName,omitempty"`
	Proxy     *ProxyStatus `protobuf:"bytes,13,opt,name=proxy,proto3" json:"proxy,omitempty"`
	// IP address leased by dnsmasq to app does not match the IP address allocated by zedrouter
	IpAddrMisMatch bool `protobuf:"varint,14,opt,name=ip_addr_mis_match,json=ipAddrMisMatch,proto3" json:"ip_addr_mis_match,omitempty"`
	// IP addresses of NTP servers being used
	NtpServers []string `protobuf:"bytes,15,rep,name=ntp_servers,json=ntpServers,proto3" json:"ntp_servers,omitempty"`
}

func (x *ZInfoNetwork) Reset() {
	*x = ZInfoNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoNetwork) ProtoMessage() {}

func (x *ZInfoNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoNetwork.ProtoReflect.Descriptor instead.
func (*ZInfoNetwork) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{7}
}

func (x *ZInfoNetwork) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *ZInfoNetwork) GetDevName() string {
	if x != nil {
		return x.DevName
	}
	return ""
}

func (x *ZInfoNetwork) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *ZInfoNetwork) GetIPAddrs() []string {
	if x != nil {
		return x.IPAddrs
	}
	return nil
}

func (x *ZInfoNetwork) GetDefaultRouters() []string {
	if x != nil {
		return x.DefaultRouters
	}
	return nil
}

func (x *ZInfoNetwork) GetDns() *ZInfoDNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *ZInfoNetwork) GetIpv4Up() bool {
	if x != nil {
		return x.Ipv4Up
	}
	return false
}

func (x *ZInfoNetwork) GetLocation() *GeoLoc {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ZInfoNetwork) GetUplink() bool {
	if x != nil {
		return x.Uplink
	}
	return false
}

func (x *ZInfoNetwork) GetNetworkErr() *ErrorInfo {
	if x != nil {
		return x.NetworkErr
	}
	return nil
}

func (x *ZInfoNetwork) GetLocalName() string {
	if x != nil {
		return x.LocalName
	}
	return ""
}

func (x *ZInfoNetwork) GetProxy() *ProxyStatus {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *ZInfoNetwork) GetIpAddrMisMatch() bool {
	if x != nil {
		return x.IpAddrMisMatch
	}
	return false
}

func (x *ZInfoNetwork) GetNtpServers() []string {
	if x != nil {
		return x.NtpServers
	}
	return nil
}

// From an IP address-based geolocation service
// XXX later define GPS coordinates from device
type GeoLoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnderlayIP string `protobuf:"bytes,1,opt,name=UnderlayIP,proto3" json:"UnderlayIP,omitempty"`
	Hostname   string `protobuf:"bytes,2,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	City       string `protobuf:"bytes,3,opt,name=City,proto3" json:"City,omitempty"`
	Region     string `protobuf:"bytes,4,opt,name=Region,proto3" json:"Region,omitempty"`
	Country    string `protobuf:"bytes,5,opt,name=Country,proto3" json:"Country,omitempty"`
	Loc        string `protobuf:"bytes,6,opt,name=Loc,proto3" json:"Loc,omitempty"`
	Org        string `protobuf:"bytes,7,opt,name=Org,proto3" json:"Org,omitempty"`
	Postal     string `protobuf:"bytes,8,opt,name=Postal,proto3" json:"Postal,omitempty"`
}

func (x *GeoLoc) Reset() {
	*x = GeoLoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoLoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLoc) ProtoMessage() {}

func (x *GeoLoc) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLoc.ProtoReflect.Descriptor instead.
func (*GeoLoc) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{8}
}

func (x *GeoLoc) GetUnderlayIP() string {
	if x != nil {
		return x.UnderlayIP
	}
	return ""
}

func (x *GeoLoc) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GeoLoc) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GeoLoc) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GeoLoc) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GeoLoc) GetLoc() string {
	if x != nil {
		return x.Loc
	}
	return ""
}

func (x *GeoLoc) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GeoLoc) GetPostal() string {
	if x != nil {
		return x.Postal
	}
	return ""
}

// This is used both to represent the information we receive from DHCP
// for each interface, and the information the device is using
// (from /etc/resolv.conf). The latter could be different than what's received
// from DHCP on all the interfaces
type ZInfoDNS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DNSservers []string `protobuf:"bytes,1,rep,name=DNSservers,proto3" json:"DNSservers,omitempty"`
	DNSdomain  string   `protobuf:"bytes,2,opt,name=DNSdomain,proto3" json:"DNSdomain,omitempty"`
	DNSsearch  []string `protobuf:"bytes,3,rep,name=DNSsearch,proto3" json:"DNSsearch,omitempty"`
}

func (x *ZInfoDNS) Reset() {
	*x = ZInfoDNS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoDNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoDNS) ProtoMessage() {}

func (x *ZInfoDNS) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoDNS.ProtoReflect.Descriptor instead.
func (*ZInfoDNS) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{9}
}

func (x *ZInfoDNS) GetDNSservers() []string {
	if x != nil {
		return x.DNSservers
	}
	return nil
}

func (x *ZInfoDNS) GetDNSdomain() string {
	if x != nil {
		return x.DNSdomain
	}
	return ""
}

func (x *ZInfoDNS) GetDNSsearch() []string {
	if x != nil {
		return x.DNSsearch
	}
	return nil
}

// SW Info for Apps
// XXX to be deprecated once we've completely moved to volumes
type ZInfoSW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwVersion        string   `protobuf:"bytes,2,opt,name=swVersion,proto3" json:"swVersion,omitempty"`
	SwHash           string   `protobuf:"bytes,3,opt,name=swHash,proto3" json:"swHash,omitempty"`
	State            ZSwState `protobuf:"varint,4,opt,name=state,proto3,enum=org.lfedge.eve.info.ZSwState" json:"state,omitempty"` // State of Software Image download/install
	Target           string   `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"`                                  // E.g., "disk", "kernel", "device-tree"
	Vdev             string   `protobuf:"bytes,7,opt,name=vdev,proto3" json:"vdev,omitempty"`                                      // E.g., "xvda"
	DownloadProgress uint32   `protobuf:"varint,8,opt,name=downloadProgress,proto3" json:"downloadProgress,omitempty"`             // Download progress; 0-100 percent
	ImageName        string   `protobuf:"bytes,9,opt,name=imageName,proto3" json:"imageName,omitempty"`                            // Name of the disk image
}

func (x *ZInfoSW) Reset() {
	*x = ZInfoSW{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoSW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoSW) ProtoMessage() {}

func (x *ZInfoSW) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoSW.ProtoReflect.Descriptor instead.
func (*ZInfoSW) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{10}
}

func (x *ZInfoSW) GetSwVersion() string {
	if x != nil {
		return x.SwVersion
	}
	return ""
}

func (x *ZInfoSW) GetSwHash() string {
	if x != nil {
		return x.SwHash
	}
	return ""
}

func (x *ZInfoSW) GetState() ZSwState {
	if x != nil {
		return x.State
	}
	return ZSwState_INVALID
}

func (x *ZInfoSW) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ZInfoSW) GetVdev() string {
	if x != nil {
		return x.Vdev
	}
	return ""
}

func (x *ZInfoSW) GetDownloadProgress() uint32 {
	if x != nil {
		return x.DownloadProgress
	}
	return 0
}

func (x *ZInfoSW) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

// Errors in response to the application of configuration
type ErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description    string                 `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Timestamp      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                  // Timestamp at which error had occurred
	Severity       Severity               `protobuf:"varint,3,opt,name=severity,proto3,enum=org.lfedge.eve.info.Severity" json:"severity,omitempty"` // Severity of the error
	Entities       []*DeviceEntity        `protobuf:"bytes,4,rep,name=entities,proto3" json:"entities,omitempty"`                                    // objects referenced by the description or retry_condition
	RetryCondition string                 `protobuf:"bytes,5,opt,name=retry_condition,json=retryCondition,proto3" json:"retry_condition,omitempty"`  // condition to retry
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{11}
}

func (x *ErrorInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ErrorInfo) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ErrorInfo) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *ErrorInfo) GetEntities() []*DeviceEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ErrorInfo) GetRetryCondition() string {
	if x != nil {
		return x.RetryCondition
	}
	return ""
}

// DeviceEntity contains the device entity details
type DeviceEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity     Entity `protobuf:"varint,1,opt,name=entity,proto3,enum=org.lfedge.eve.info.Entity" json:"entity,omitempty"` // entity type
	EntityId   string `protobuf:"bytes,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`              // entity uuid
	EntityName string `protobuf:"bytes,3,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`        // entity name
}

func (x *DeviceEntity) Reset() {
	*x = DeviceEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEntity) ProtoMessage() {}

func (x *DeviceEntity) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEntity.ProtoReflect.Descriptor instead.
func (*DeviceEntity) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{12}
}

func (x *DeviceEntity) GetEntity() Entity {
	if x != nil {
		return x.Entity
	}
	return Entity_ENTITY_UNSPECIFIED
}

func (x *DeviceEntity) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *DeviceEntity) GetEntityName() string {
	if x != nil {
		return x.EntityName
	}
	return ""
}

type VaultInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                   //Name of the vault
	Status    DataSecAtRestStatus `protobuf:"varint,2,opt,name=status,proto3,enum=org.lfedge.eve.info.DataSecAtRestStatus" json:"status,omitempty"` //Status of the vault
	VaultErr  *ErrorInfo          `protobuf:"bytes,3,opt,name=vaultErr,proto3" json:"vaultErr,omitempty"`                                           //Additional info in case of failure
	PcrStatus PCRStatus           `protobuf:"varint,4,opt,name=pcrStatus,proto3,enum=org.lfedge.eve.info.PCRStatus" json:"pcrStatus,omitempty"`     //Status of the PCR
}

func (x *VaultInfo) Reset() {
	*x = VaultInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultInfo) ProtoMessage() {}

func (x *VaultInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultInfo.ProtoReflect.Descriptor instead.
func (*VaultInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{13}
}

func (x *VaultInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultInfo) GetStatus() DataSecAtRestStatus {
	if x != nil {
		return x.Status
	}
	return DataSecAtRestStatus_DATASEC_AT_REST_UNKNOWN
}

func (x *VaultInfo) GetVaultErr() *ErrorInfo {
	if x != nil {
		return x.VaultErr
	}
	return nil
}

func (x *VaultInfo) GetPcrStatus() PCRStatus {
	if x != nil {
		return x.PcrStatus
	}
	return PCRStatus_PCR_UNKNOWN
}

type DataSecAtRest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    DataSecAtRestStatus `protobuf:"varint,1,opt,name=status,proto3,enum=org.lfedge.eve.info.DataSecAtRestStatus" json:"status,omitempty"` // Deprecated
	Info      string              `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`                                                   // Deprecated
	VaultList []*VaultInfo        `protobuf:"bytes,3,rep,name=vaultList,proto3" json:"vaultList,omitempty"`                                         // per-Vault Info
}

func (x *DataSecAtRest) Reset() {
	*x = DataSecAtRest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSecAtRest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSecAtRest) ProtoMessage() {}

func (x *DataSecAtRest) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSecAtRest.ProtoReflect.Descriptor instead.
func (*DataSecAtRest) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{14}
}

func (x *DataSecAtRest) GetStatus() DataSecAtRestStatus {
	if x != nil {
		return x.Status
	}
	return DataSecAtRestStatus_DATASEC_AT_REST_UNKNOWN
}

func (x *DataSecAtRest) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *DataSecAtRest) GetVaultList() []*VaultInfo {
	if x != nil {
		return x.VaultList
	}
	return nil
}

type SecurityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShaRootCa    []byte `protobuf:"bytes,1,opt,name=sha_root_ca,json=shaRootCa,proto3" json:"sha_root_ca,omitempty"`            // sha256 of /config/root-certificate.pem
	ShaTlsRootCa []byte `protobuf:"bytes,2,opt,name=sha_tls_root_ca,json=shaTlsRootCa,proto3" json:"sha_tls_root_ca,omitempty"` // sha256 of /config/v2tlsbaseroot-certificates.pem
}

func (x *SecurityInfo) Reset() {
	*x = SecurityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityInfo) ProtoMessage() {}

func (x *SecurityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityInfo.ProtoReflect.Descriptor instead.
func (*SecurityInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{15}
}

func (x *SecurityInfo) GetShaRootCa() []byte {
	if x != nil {
		return x.ShaRootCa
	}
	return nil
}

func (x *SecurityInfo) GetShaTlsRootCa() []byte {
	if x != nil {
		return x.ShaTlsRootCa
	}
	return nil
}

type ZInfoConfigItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ZInfoConfigItem) Reset() {
	*x = ZInfoConfigItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoConfigItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoConfigItem) ProtoMessage() {}

func (x *ZInfoConfigItem) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoConfigItem.ProtoReflect.Descriptor instead.
func (*ZInfoConfigItem) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{16}
}

func (x *ZInfoConfigItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ZInfoConfigItem) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ZInfoConfigItemStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigItems        map[string]*ZInfoConfigItem `protobuf:"bytes,1,rep,name=configItems,proto3" json:"configItems,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UnknownConfigItems map[string]*ZInfoConfigItem `protobuf:"bytes,2,rep,name=unknownConfigItems,proto3" json:"unknownConfigItems,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ZInfoConfigItemStatus) Reset() {
	*x = ZInfoConfigItemStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoConfigItemStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoConfigItemStatus) ProtoMessage() {}

func (x *ZInfoConfigItemStatus) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoConfigItemStatus.ProtoReflect.Descriptor instead.
func (*ZInfoConfigItemStatus) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{17}
}

func (x *ZInfoConfigItemStatus) GetConfigItems() map[string]*ZInfoConfigItem {
	if x != nil {
		return x.ConfigItems
	}
	return nil
}

func (x *ZInfoConfigItemStatus) GetUnknownConfigItems() map[string]*ZInfoConfigItem {
	if x != nil {
		return x.UnknownConfigItems
	}
	return nil
}

// ZInfoAppInstance - send a summary of App Instance so that controller knows
// how many App Instances are still present on the device. Controller
// can then use it to wait for an app to be fully deleted etc.
type ZInfoAppInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DomainName string `protobuf:"bytes,3,opt,name=domainName,proto3" json:"domainName,omitempty"`
}

func (x *ZInfoAppInstance) Reset() {
	*x = ZInfoAppInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoAppInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoAppInstance) ProtoMessage() {}

func (x *ZInfoAppInstance) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoAppInstance.ProtoReflect.Descriptor instead.
func (*ZInfoAppInstance) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{18}
}

func (x *ZInfoAppInstance) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ZInfoAppInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ZInfoAppInstance) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

// ZInfoDeviceTasks - send a summary of tasks so that controller knows
// how many app instance tasks are still present on the device. Controller
// can then use it to wait for an app to be fully deleted etc.
type ZInfoDeviceTasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"` // deprecated 3
}

func (x *ZInfoDeviceTasks) Reset() {
	*x = ZInfoDeviceTasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoDeviceTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoDeviceTasks) ProtoMessage() {}

func (x *ZInfoDeviceTasks) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoDeviceTasks.ProtoReflect.Descriptor instead.
func (*ZInfoDeviceTasks) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{19}
}

func (x *ZInfoDeviceTasks) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ZInfoDeviceTasks) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// ZSimcardInfo describes either empty SIM slot or a slot with a SIM card inserted.
type ZSimcardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is a SIM card/slot identifier.
	// Guaranteed to be unique only in the scope of the edge node.
	// Used as a reference from ZCellularStatus.sim_cards.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Reference to ZCellularModuleInfo.name
	CellModuleName string `protobuf:"bytes,2,opt,name=cell_module_name,json=cellModuleName,proto3" json:"cell_module_name,omitempty"`
	// International Mobile Subscriber Identity.
	Imsi string `protobuf:"bytes,3,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// Integrated Circuit Card Identifier.
	Iccid string `protobuf:"bytes,4,opt,name=iccid,proto3" json:"iccid,omitempty"`
	// The current state of the SIM card (absent, initialized, not recognized, etc.).
	// This state is not modeled using enum because the set of possible values differs
	// between QMI and MBIM protocols (used to control cellular modules) and there is
	// no 1:1 mapping between them.
	State string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	// SIM slot number (of the modem referenced by cell_module_name) which this ZSimcardInfo
	// describes.
	SlotNumber uint32 `protobuf:"varint,7,opt,name=slot_number,json=slotNumber,proto3" json:"slot_number,omitempty"`
	// True if this SIM slot is activated (i.e. inserted SIM card can be used to connect
	// to cellular network).
	SlotActivated bool `protobuf:"varint,8,opt,name=slot_activated,json=slotActivated,proto3" json:"slot_activated,omitempty"`
	// Type of the SIM card.
	Type SimType `protobuf:"varint,9,opt,name=type,proto3,enum=org.lfedge.eve.info.SimType" json:"type,omitempty"`
}

func (x *ZSimcardInfo) Reset() {
	*x = ZSimcardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZSimcardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZSimcardInfo) ProtoMessage() {}

func (x *ZSimcardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZSimcardInfo.ProtoReflect.Descriptor instead.
func (*ZSimcardInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{20}
}

func (x *ZSimcardInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ZSimcardInfo) GetCellModuleName() string {
	if x != nil {
		return x.CellModuleName
	}
	return ""
}

func (x *ZSimcardInfo) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

func (x *ZSimcardInfo) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *ZSimcardInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ZSimcardInfo) GetSlotNumber() uint32 {
	if x != nil {
		return x.SlotNumber
	}
	return 0
}

func (x *ZSimcardInfo) GetSlotActivated() bool {
	if x != nil {
		return x.SlotActivated
	}
	return false
}

func (x *ZSimcardInfo) GetType() SimType {
	if x != nil {
		return x.Type
	}
	return SimType_SIM_TYPE_UNSPECIFIED
}

type ZCellularModuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is a module identifier. For example IMEI if available.
	// Guaranteed to be unique only in the scope of the edge node.
	Name            string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Imei            string                   `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
	FirmwareVersion string                   `protobuf:"bytes,3,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	Model           string                   `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	OperatingState  ZCellularOperatingState  `protobuf:"varint,5,opt,name=operating_state,json=operatingState,proto3,enum=org.lfedge.eve.info.ZCellularOperatingState" json:"operating_state,omitempty"`
	ControlProtocol ZCellularControlProtocol `protobuf:"varint,6,opt,name=control_protocol,json=controlProtocol,proto3,enum=org.lfedge.eve.info.ZCellularControlProtocol" json:"control_protocol,omitempty"`
	Manufacturer    string                   `protobuf:"bytes,7,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
}

func (x *ZCellularModuleInfo) Reset() {
	*x = ZCellularModuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZCellularModuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZCellularModuleInfo) ProtoMessage() {}

func (x *ZCellularModuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZCellularModuleInfo.ProtoReflect.Descriptor instead.
func (*ZCellularModuleInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{21}
}

func (x *ZCellularModuleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ZCellularModuleInfo) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *ZCellularModuleInfo) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *ZCellularModuleInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ZCellularModuleInfo) GetOperatingState() ZCellularOperatingState {
	if x != nil {
		return x.OperatingState
	}
	return ZCellularOperatingState_Z_CELLULAR_OPERATING_STATE_UNSPECIFIED
}

func (x *ZCellularModuleInfo) GetControlProtocol() ZCellularControlProtocol {
	if x != nil {
		return x.ControlProtocol
	}
	return ZCellularControlProtocol_Z_CELLULAR_CONTROL_PROTOCOL_UNSPECIFIED
}

func (x *ZCellularModuleInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

type ZCellularProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Public land mobile network code.
	Plmn        string `protobuf:"bytes,1,opt,name=plmn,proto3" json:"plmn,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// True if this is the provider currently being used.
	CurrentServing bool `protobuf:"varint,3,opt,name=current_serving,json=currentServing,proto3" json:"current_serving,omitempty"`
	Roaming        bool `protobuf:"varint,4,opt,name=roaming,proto3" json:"roaming,omitempty"`
	// True if this provider is forbidden by SIM card config.
	Forbidden bool `protobuf:"varint,5,opt,name=forbidden,proto3" json:"forbidden,omitempty"`
}

func (x *ZCellularProvider) Reset() {
	*x = ZCellularProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZCellularProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZCellularProvider) ProtoMessage() {}

func (x *ZCellularProvider) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZCellularProvider.ProtoReflect.Descriptor instead.
func (*ZCellularProvider) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{22}
}

func (x *ZCellularProvider) GetPlmn() string {
	if x != nil {
		return x.Plmn
	}
	return ""
}

func (x *ZCellularProvider) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ZCellularProvider) GetCurrentServing() bool {
	if x != nil {
		return x.CurrentServing
	}
	return false
}

func (x *ZCellularProvider) GetRoaming() bool {
	if x != nil {
		return x.Roaming
	}
	return false
}

func (x *ZCellularProvider) GetForbidden() bool {
	if x != nil {
		return x.Forbidden
	}
	return false
}

type StorageDiskState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskName *evecommon.DiskDescription `protobuf:"bytes,1,opt,name=disk_name,json=diskName,proto3" json:"disk_name,omitempty"`
	Status   StorageStatus              `protobuf:"varint,2,opt,name=status,proto3,enum=org.lfedge.eve.info.StorageStatus" json:"status,omitempty"` // In ZFS
	State    string                     `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`                                           // VDev aux state
}

func (x *StorageDiskState) Reset() {
	*x = StorageDiskState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageDiskState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageDiskState) ProtoMessage() {}

func (x *StorageDiskState) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageDiskState.ProtoReflect.Descriptor instead.
func (*StorageDiskState) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{23}
}

func (x *StorageDiskState) GetDiskName() *evecommon.DiskDescription {
	if x != nil {
		return x.DiskName
	}
	return nil
}

func (x *StorageDiskState) GetStatus() StorageStatus {
	if x != nil {
		return x.Status
	}
	return StorageStatus_STORAGE_STATUS_UNSPECIFIED
}

func (x *StorageDiskState) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type SmartAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value      uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`                            // the current value of the parameter
	Worst      uint64 `protobuf:"varint,3,opt,name=worst,proto3" json:"worst,omitempty"`                            // worst value that Value has ever reached
	Thresh     uint64 `protobuf:"varint,4,opt,name=thresh,proto3" json:"thresh,omitempty"`                          // the value that the Value of the same attribute must reach for the attribute's state to be considered critical.
	WhenFailed string `protobuf:"bytes,5,opt,name=when_failed,json=whenFailed,proto3" json:"when_failed,omitempty"` // critical state if no empty
	RawValue   uint64 `protobuf:"varint,6,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`      // Contains miscellaneous meter readings (where applicable)
}

func (x *SmartAttr) Reset() {
	*x = SmartAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartAttr) ProtoMessage() {}

func (x *SmartAttr) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartAttr.ProtoReflect.Descriptor instead.
func (*SmartAttr) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{24}
}

func (x *SmartAttr) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SmartAttr) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SmartAttr) GetWorst() uint64 {
	if x != nil {
		return x.Worst
	}
	return 0
}

func (x *SmartAttr) GetThresh() uint64 {
	if x != nil {
		return x.Thresh
	}
	return 0
}

func (x *SmartAttr) GetWhenFailed() string {
	if x != nil {
		return x.WhenFailed
	}
	return ""
}

func (x *SmartAttr) GetRawValue() uint64 {
	if x != nil {
		return x.RawValue
	}
	return 0
}

type SmartMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReallocatedSectorCt   *SmartAttr `protobuf:"bytes,1,opt,name=reallocated_sector_ct,json=reallocatedSectorCt,proto3" json:"reallocated_sector_ct,omitempty"`       // Count of reallocated sectors. The higher the attribute value, the more sectors were reallocated
	PowerOnHours          *SmartAttr `protobuf:"bytes,2,opt,name=power_on_hours,json=powerOnHours,proto3" json:"power_on_hours,omitempty"`                            // Count of hours in power-on state.
	PowerCycleCount       *SmartAttr `protobuf:"bytes,3,opt,name=power_cycle_count,json=powerCycleCount,proto3" json:"power_cycle_count,omitempty"`                   // This attribute indicates the count of full hard disk power on/off cycles
	ReallocatedEventCount *SmartAttr `protobuf:"bytes,4,opt,name=reallocated_event_count,json=reallocatedEventCount,proto3" json:"reallocated_event_count,omitempty"` // Count of remap operations. Shows the total count of attempts.
	CurrentPendingSector  *SmartAttr `protobuf:"bytes,5,opt,name=current_pending_sector,json=currentPendingSector,proto3" json:"current_pending_sector,omitempty"`    // Count of "unstable" sectors (waiting to be remapped, because of unrecoverable read errors)
	NeedUpdate            bool       `protobuf:"varint,6,opt,name=need_update,json=needUpdate,proto3" json:"need_update,omitempty"`                                   // Indicates that data has changed
	Temperature           *SmartAttr `protobuf:"bytes,7,opt,name=temperature,proto3" json:"temperature,omitempty"`                                                    // Indicates the device temperature, if the appropriate sensor is fitted.
}

func (x *SmartMetric) Reset() {
	*x = SmartMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartMetric) ProtoMessage() {}

func (x *SmartMetric) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartMetric.ProtoReflect.Descriptor instead.
func (*SmartMetric) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{25}
}

func (x *SmartMetric) GetReallocatedSectorCt() *SmartAttr {
	if x != nil {
		return x.ReallocatedSectorCt
	}
	return nil
}

func (x *SmartMetric) GetPowerOnHours() *SmartAttr {
	if x != nil {
		return x.PowerOnHours
	}
	return nil
}

func (x *SmartMetric) GetPowerCycleCount() *SmartAttr {
	if x != nil {
		return x.PowerCycleCount
	}
	return nil
}

func (x *SmartMetric) GetReallocatedEventCount() *SmartAttr {
	if x != nil {
		return x.ReallocatedEventCount
	}
	return nil
}

func (x *SmartMetric) GetCurrentPendingSector() *SmartAttr {
	if x != nil {
		return x.CurrentPendingSector
	}
	return nil
}

func (x *SmartMetric) GetNeedUpdate() bool {
	if x != nil {
		return x.NeedUpdate
	}
	return false
}

func (x *SmartMetric) GetTemperature() *SmartAttr {
	if x != nil {
		return x.Temperature
	}
	return nil
}

type StorageDiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskName        string         `protobuf:"bytes,1,opt,name=disk_name,json=diskName,proto3" json:"disk_name,omitempty"`
	SmartData       []*SmartMetric `protobuf:"bytes,3,rep,name=smart_data,json=smartData,proto3" json:"smart_data,omitempty"` // smartctl output
	Wwn             string         `protobuf:"bytes,4,opt,name=wwn,proto3" json:"wwn,omitempty"`
	SerialNumber    string         `protobuf:"bytes,5,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Model           string         `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`                                            // Intel 123456F
	CollectorErrors string         `protobuf:"bytes,7,opt,name=collector_errors,json=collectorErrors,proto3" json:"collector_errors,omitempty"` // Reports errors when collecting information. Default and normal value = ""
}

func (x *StorageDiskInfo) Reset() {
	*x = StorageDiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageDiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageDiskInfo) ProtoMessage() {}

func (x *StorageDiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageDiskInfo.ProtoReflect.Descriptor instead.
func (*StorageDiskInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{26}
}

func (x *StorageDiskInfo) GetDiskName() string {
	if x != nil {
		return x.DiskName
	}
	return ""
}

func (x *StorageDiskInfo) GetSmartData() []*SmartMetric {
	if x != nil {
		return x.SmartData
	}
	return nil
}

func (x *StorageDiskInfo) GetWwn() string {
	if x != nil {
		return x.Wwn
	}
	return ""
}

func (x *StorageDiskInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *StorageDiskInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *StorageDiskInfo) GetCollectorErrors() string {
	if x != nil {
		return x.CollectorErrors
	}
	return ""
}

// For nested structures like pool of stripes of mirrors we should define this structure
type StorageChildren struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentRaid StorageRaidType     `protobuf:"varint,1,opt,name=current_raid,json=currentRaid,proto3,enum=org.lfedge.eve.info.StorageRaidType" json:"current_raid,omitempty"`
	Disks       []*StorageDiskState `protobuf:"bytes,2,rep,name=disks,proto3" json:"disks,omitempty"`
	Children    []*StorageChildren  `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	DisplayName string              `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"` // A string which can be used to organize the display. Not unique.
	GUID        uint64              `protobuf:"varint,5,opt,name=g_u_i_d,json=gUID,proto3" json:"g_u_i_d,omitempty"`                 // A unique identifier for the storage object (RAID or mirror)
}

func (x *StorageChildren) Reset() {
	*x = StorageChildren{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageChildren) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageChildren) ProtoMessage() {}

func (x *StorageChildren) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageChildren.ProtoReflect.Descriptor instead.
func (*StorageChildren) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{27}
}

func (x *StorageChildren) GetCurrentRaid() StorageRaidType {
	if x != nil {
		return x.CurrentRaid
	}
	return StorageRaidType_STORAGE_RAID_TYPE_UNSPECIFIED
}

func (x *StorageChildren) GetDisks() []*StorageDiskState {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *StorageChildren) GetChildren() []*StorageChildren {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *StorageChildren) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *StorageChildren) GetGUID() uint64 {
	if x != nil {
		return x.GUID
	}
	return 0
}

// Information about storage system
type StorageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolName         string              `protobuf:"bytes,1,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	StorageType      StorageTypeInfo     `protobuf:"varint,2,opt,name=storage_type,json=storageType,proto3,enum=org.lfedge.eve.info.StorageTypeInfo" json:"storage_type,omitempty"` // Storage type zfs or ext4
	ZfsVersion       string              `protobuf:"bytes,3,opt,name=zfs_version,json=zfsVersion,proto3" json:"zfs_version,omitempty"`
	CurrentRaid      StorageRaidType     `protobuf:"varint,4,opt,name=current_raid,json=currentRaid,proto3,enum=org.lfedge.eve.info.StorageRaidType" json:"current_raid,omitempty"`  // Current RAID configuration. When no have RAID send STORAGE_RAID_TYPE_NORAID
	CompressionRatio float64             `protobuf:"fixed64,5,opt,name=compression_ratio,json=compressionRatio,proto3" json:"compression_ratio,omitempty"`                           // Compression ratio
	ZpoolSize        uint64              `protobuf:"varint,6,opt,name=zpool_size,json=zpoolSize,proto3" json:"zpool_size,omitempty"`                                                 // Storage pool size.
	CountZvols       uint32              `protobuf:"varint,7,opt,name=count_zvols,json=countZvols,proto3" json:"count_zvols,omitempty"`                                              // zvols count
	StorageState     StorageStatus       `protobuf:"varint,8,opt,name=storage_state,json=storageState,proto3,enum=org.lfedge.eve.info.StorageStatus" json:"storage_state,omitempty"` // zfs zpool status
	Disks            []*StorageDiskState `protobuf:"bytes,9,rep,name=disks,proto3" json:"disks,omitempty"`                                                                           // Disks lists in EVE (use in storage)
	CollectorErrors  string              `protobuf:"bytes,10,opt,name=collector_errors,json=collectorErrors,proto3" json:"collector_errors,omitempty"`                               // Reports errors when collecting information. Default and normal value = ""
	Children         []*StorageChildren  `protobuf:"bytes,11,rep,name=children,proto3" json:"children,omitempty"`                                                                    // If we have nested objects we should define them here
	PoolStatusMsg    string              `protobuf:"bytes,12,opt,name=pool_status_msg,json=poolStatusMsg,proto3" json:"pool_status_msg,omitempty"`                                   // pool status msg
}

func (x *StorageInfo) Reset() {
	*x = StorageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageInfo) ProtoMessage() {}

func (x *StorageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageInfo.ProtoReflect.Descriptor instead.
func (*StorageInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{28}
}

func (x *StorageInfo) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *StorageInfo) GetStorageType() StorageTypeInfo {
	if x != nil {
		return x.StorageType
	}
	return StorageTypeInfo_STORAGE_TYPE_INFO_UNSPECIFIED
}

func (x *StorageInfo) GetZfsVersion() string {
	if x != nil {
		return x.ZfsVersion
	}
	return ""
}

func (x *StorageInfo) GetCurrentRaid() StorageRaidType {
	if x != nil {
		return x.CurrentRaid
	}
	return StorageRaidType_STORAGE_RAID_TYPE_UNSPECIFIED
}

func (x *StorageInfo) GetCompressionRatio() float64 {
	if x != nil {
		return x.CompressionRatio
	}
	return 0
}

func (x *StorageInfo) GetZpoolSize() uint64 {
	if x != nil {
		return x.ZpoolSize
	}
	return 0
}

func (x *StorageInfo) GetCountZvols() uint32 {
	if x != nil {
		return x.CountZvols
	}
	return 0
}

func (x *StorageInfo) GetStorageState() StorageStatus {
	if x != nil {
		return x.StorageState
	}
	return StorageStatus_STORAGE_STATUS_UNSPECIFIED
}

func (x *StorageInfo) GetDisks() []*StorageDiskState {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *StorageInfo) GetCollectorErrors() string {
	if x != nil {
		return x.CollectorErrors
	}
	return ""
}

func (x *StorageInfo) GetChildren() []*StorageChildren {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *StorageInfo) GetPoolStatusMsg() string {
	if x != nil {
		return x.PoolStatusMsg
	}
	return ""
}

// Information about the system that is sent once when the system boots
type ZInfoHardware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disks []*StorageDiskInfo `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty"` // S.M.A.R.T. info for disks
}

func (x *ZInfoHardware) Reset() {
	*x = ZInfoHardware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoHardware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoHardware) ProtoMessage() {}

func (x *ZInfoHardware) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoHardware.ProtoReflect.Descriptor instead.
func (*ZInfoHardware) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{29}
}

func (x *ZInfoHardware) GetDisks() []*StorageDiskInfo {
	if x != nil {
		return x.Disks
	}
	return nil
}

// Base device info, as discovered by Xen (or OS on bare metal)
type ZInfoDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineArch string `protobuf:"bytes,4,opt,name=machineArch,proto3" json:"machineArch,omitempty"`
	CpuArch     string `protobuf:"bytes,5,opt,name=cpuArch,proto3" json:"cpuArch,omitempty"`
	Platform    string `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	Ncpu        uint32 `protobuf:"varint,7,opt,name=ncpu,proto3" json:"ncpu,omitempty"`
	// memory - Total system memory available (in MBytes). Firmware might use
	// some memory making it unavailable to the hypervisor - So this could be
	// less than the amount stated by the hardware manufacturer
	Memory  uint64 `protobuf:"varint,8,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage uint64 `protobuf:"varint,9,opt,name=storage,proto3" json:"storage,omitempty"` // in MBytes for the currently active image filesystem
	// Value of'Power_Cycle_Count' from SMART.
	// -1 is assigned if SMART is disabled or 'Power_Cycle_Count' is unavailable.
	PowerCycleCounter int64              `protobuf:"varint,10,opt,name=powerCycleCounter,proto3" json:"powerCycleCounter,omitempty"`
	Minfo             *ZInfoManufacturer `protobuf:"bytes,11,opt,name=minfo,proto3" json:"minfo,omitempty"`
	// OBSOLETE. The information will be provided by DevicePort instead.
	// Newer versions will not fill in this information. Controller Needs
	// to check check if this is empty - if yes, use the DevicePortStatus instead.
	Network            []*ZInfoNetwork         `protobuf:"bytes,13,rep,name=network,proto3" json:"network,omitempty"`
	AssignableAdapters []*ZioBundle            `protobuf:"bytes,15,rep,name=assignableAdapters,proto3" json:"assignableAdapters,omitempty"`
	Dns                *ZInfoDNS               `protobuf:"bytes,16,opt,name=dns,proto3" json:"dns,omitempty"` // What is used in resolv.conf
	StorageList        []*ZInfoStorage         `protobuf:"bytes,17,rep,name=storageList,proto3" json:"storageList,omitempty"`
	BootTime           *timestamppb.Timestamp  `protobuf:"bytes,18,opt,name=bootTime,proto3" json:"bootTime,omitempty"`
	SwList             []*ZInfoDevSW           `protobuf:"bytes,19,rep,name=swList,proto3" json:"swList,omitempty"`
	HostName           string                  `protobuf:"bytes,20,opt,name=HostName,proto3" json:"HostName,omitempty"`
	MetricItems        []*DeprecatedMetricItem `protobuf:"bytes,21,rep,name=metricItems,proto3" json:"metricItems,omitempty"` // For instance, static LTE network info
	LastRebootReason   string                  `protobuf:"bytes,22,opt,name=lastRebootReason,proto3" json:"lastRebootReason,omitempty"`
	LastRebootTime     *timestamppb.Timestamp  `protobuf:"bytes,23,opt,name=lastRebootTime,proto3" json:"lastRebootTime,omitempty"`
	SystemAdapter      *SystemAdapterInfo      `protobuf:"bytes,24,opt,name=systemAdapter,proto3" json:"systemAdapter,omitempty"`
	RestartCounter     uint32                  `protobuf:"varint,25,opt,name=restartCounter,proto3" json:"restartCounter,omitempty"`                                       // Number of times zedagent has restarted i.e., device reboot
	HSMStatus          HwSecurityModuleStatus  `protobuf:"varint,26,opt,name=HSMStatus,proto3,enum=org.lfedge.eve.info.HwSecurityModuleStatus" json:"HSMStatus,omitempty"` //State of hardware security modules, like TPM
	HSMInfo            string                  `protobuf:"bytes,27,opt,name=HSMInfo,proto3" json:"HSMInfo,omitempty"`                                                      //Information about HSM like TPM vendor, TEE type etc.
	LastRebootStack    string                  `protobuf:"bytes,28,opt,name=lastRebootStack,proto3" json:"lastRebootStack,omitempty"`
	DataSecAtRestInfo  *DataSecAtRest          `protobuf:"bytes,29,opt,name=dataSecAtRestInfo,proto3" json:"dataSecAtRestInfo,omitempty"` //Info about Data At Rest Security
	SecInfo            *SecurityInfo           `protobuf:"bytes,30,opt,name=sec_info,json=secInfo,proto3" json:"sec_info,omitempty"`
	ConfigItemStatus   *ZInfoConfigItemStatus  `protobuf:"bytes,31,opt,name=configItemStatus,proto3" json:"configItemStatus,omitempty"`
	AppInstances       []*ZInfoAppInstance     `protobuf:"bytes,32,rep,name=appInstances,proto3" json:"appInstances,omitempty"`
	// rebootConfigCounter - reboot command counter from config last processed by
	// eve
	RebootConfigCounter uint32     `protobuf:"varint,33,opt,name=rebootConfigCounter,proto3" json:"rebootConfigCounter,omitempty"`
	LastBootReason      BootReason `protobuf:"varint,34,opt,name=last_boot_reason,json=lastBootReason,proto3,enum=org.lfedge.eve.info.BootReason" json:"last_boot_reason,omitempty"`
	// Cellular / LTE related information
	CellRadios      []*ZCellularModuleInfo `protobuf:"bytes,35,rep,name=cell_radios,json=cellRadios,proto3" json:"cell_radios,omitempty"`
	Sims            []*ZSimcardInfo        `protobuf:"bytes,36,rep,name=sims,proto3" json:"sims,omitempty"`
	Tasks           []*ZInfoDeviceTasks    `protobuf:"bytes,37,rep,name=tasks,proto3" json:"tasks,omitempty"`
	MaintenanceMode bool                   `protobuf:"varint,38,opt,name=maintenance_mode,json=maintenanceMode,proto3" json:"maintenance_mode,omitempty"`
	// XXX to be deprecated in favor of maintenance_mode_reasons
	MaintenanceModeReason MaintenanceModeReason `protobuf:"varint,39,opt,name=maintenance_mode_reason,json=maintenanceModeReason,proto3,enum=org.lfedge.eve.info.MaintenanceModeReason" json:"maintenance_mode_reason,omitempty"`
	// Is /dev/watchdog present in the system
	HardwareWatchdogPresent bool `protobuf:"varint,40,opt,name=hardware_watchdog_present,json=hardwareWatchdogPresent,proto3" json:"hardware_watchdog_present,omitempty"`
	// Are we in the process of rebooting EVE?
	RebootInprogress bool `protobuf:"varint,41,opt,name=reboot_inprogress,json=rebootInprogress,proto3" json:"reboot_inprogress,omitempty"`
	// Information about hardware capabilities
	Capabilities *Capabilities `protobuf:"bytes,42,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// BaseOsUpdate Counter. This must be updated only when:
	// 1) if the configured BaseOs partition is set to UPDATED, mirror
	// the current value of baseos_update.counter
	// 2) At the start if a BaseOs update (either from a partition in error state
	// or from UPDATED state of another version), copy over current
	// deviceConfig.baseOs_update_counter
	BaseosUpdateCounter uint32 `protobuf:"varint,43,opt,name=baseos_update_counter,json=baseosUpdateCounter,proto3" json:"baseos_update_counter,omitempty"`
	// Device State
	State ZDeviceState `protobuf:"varint,44,opt,name=state,proto3,enum=org.lfedge.eve.info.ZDeviceState" json:"state,omitempty"`
	// Is there a local_profile from a local_profile_server?
	// The global_profile from the controller is not echoed in this field.
	LocalProfile           string                  `protobuf:"bytes,45,opt,name=local_profile,json=localProfile,proto3" json:"local_profile,omitempty"`
	MaintenanceModeReasons []MaintenanceModeReason `protobuf:"varint,46,rep,packed,name=maintenance_mode_reasons,json=maintenanceModeReasons,proto3,enum=org.lfedge.eve.info.MaintenanceModeReason" json:"maintenance_mode_reasons,omitempty"`
	// Deprecated: Marked as deprecated in info/info.proto.
	DormantTime string         `protobuf:"bytes,47,opt,name=dormant_time,json=dormantTime,proto3" json:"dormant_time,omitempty"`
	StorageInfo []*StorageInfo `protobuf:"bytes,48,rep,name=storage_info,json=storageInfo,proto3" json:"storage_info,omitempty"`
	// shutdown command counter from EdgeDevConfig last processed by eve
	ShutdownConfigCounter uint32 `protobuf:"varint,49,opt,name=shutdown_config_counter,json=shutdownConfigCounter,proto3" json:"shutdown_config_counter,omitempty"`
	// state of attestation process of eve
	AttestationInfo *AttestationInfo `protobuf:"bytes,50,opt,name=attestation_info,json=attestationInfo,proto3" json:"attestation_info,omitempty"`
	// Capability indicating which new EdgeDevConfig fields which are supported
	ApiCapability APICapability `protobuf:"varint,51,opt,name=api_capability,json=apiCapability,proto3,enum=org.lfedge.eve.info.APICapability" json:"api_capability,omitempty"`
	// Reports the remote access status
	RemoteAccessDisabled bool `protobuf:"varint,52,opt,name=remote_access_disabled,json=remoteAccessDisabled,proto3" json:"remote_access_disabled,omitempty"`
	// OptionalCapabilities of the device
	OptionalCapabilities *OptionalCapabilities `protobuf:"bytes,53,opt,name=optional_capabilities,json=optionalCapabilities,proto3" json:"optional_capabilities,omitempty"`
}

func (x *ZInfoDevice) Reset() {
	*x = ZInfoDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoDevice) ProtoMessage() {}

func (x *ZInfoDevice) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoDevice.ProtoReflect.Descriptor instead.
func (*ZInfoDevice) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{30}
}

func (x *ZInfoDevice) GetMachineArch() string {
	if x != nil {
		return x.MachineArch
	}
	return ""
}

func (x *ZInfoDevice) GetCpuArch() string {
	if x != nil {
		return x.CpuArch
	}
	return ""
}

func (x *ZInfoDevice) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ZInfoDevice) GetNcpu() uint32 {
	if x != nil {
		return x.Ncpu
	}
	return 0
}

func (x *ZInfoDevice) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ZInfoDevice) GetStorage() uint64 {
	if x != nil {
		return x.Storage
	}
	return 0
}

func (x *ZInfoDevice) GetPowerCycleCounter() int64 {
	if x != nil {
		return x.PowerCycleCounter
	}
	return 0
}

func (x *ZInfoDevice) GetMinfo() *ZInfoManufacturer {
	if x != nil {
		return x.Minfo
	}
	return nil
}

func (x *ZInfoDevice) GetNetwork() []*ZInfoNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ZInfoDevice) GetAssignableAdapters() []*ZioBundle {
	if x != nil {
		return x.AssignableAdapters
	}
	return nil
}

func (x *ZInfoDevice) GetDns() *ZInfoDNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *ZInfoDevice) GetStorageList() []*ZInfoStorage {
	if x != nil {
		return x.StorageList
	}
	return nil
}

func (x *ZInfoDevice) GetBootTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BootTime
	}
	return nil
}

func (x *ZInfoDevice) GetSwList() []*ZInfoDevSW {
	if x != nil {
		return x.SwList
	}
	return nil
}

func (x *ZInfoDevice) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ZInfoDevice) GetMetricItems() []*DeprecatedMetricItem {
	if x != nil {
		return x.MetricItems
	}
	return nil
}

func (x *ZInfoDevice) GetLastRebootReason() string {
	if x != nil {
		return x.LastRebootReason
	}
	return ""
}

func (x *ZInfoDevice) GetLastRebootTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRebootTime
	}
	return nil
}

func (x *ZInfoDevice) GetSystemAdapter() *SystemAdapterInfo {
	if x != nil {
		return x.SystemAdapter
	}
	return nil
}

func (x *ZInfoDevice) GetRestartCounter() uint32 {
	if x != nil {
		return x.RestartCounter
	}
	return 0
}

func (x *ZInfoDevice) GetHSMStatus() HwSecurityModuleStatus {
	if x != nil {
		return x.HSMStatus
	}
	return HwSecurityModuleStatus_UNKNOWN
}

func (x *ZInfoDevice) GetHSMInfo() string {
	if x != nil {
		return x.HSMInfo
	}
	return ""
}

func (x *ZInfoDevice) GetLastRebootStack() string {
	if x != nil {
		return x.LastRebootStack
	}
	return ""
}

func (x *ZInfoDevice) GetDataSecAtRestInfo() *DataSecAtRest {
	if x != nil {
		return x.DataSecAtRestInfo
	}
	return nil
}

func (x *ZInfoDevice) GetSecInfo() *SecurityInfo {
	if x != nil {
		return x.SecInfo
	}
	return nil
}

func (x *ZInfoDevice) GetConfigItemStatus() *ZInfoConfigItemStatus {
	if x != nil {
		return x.ConfigItemStatus
	}
	return nil
}

func (x *ZInfoDevice) GetAppInstances() []*ZInfoAppInstance {
	if x != nil {
		return x.AppInstances
	}
	return nil
}

func (x *ZInfoDevice) GetRebootConfigCounter() uint32 {
	if x != nil {
		return x.RebootConfigCounter
	}
	return 0
}

func (x *ZInfoDevice) GetLastBootReason() BootReason {
	if x != nil {
		return x.LastBootReason
	}
	return BootReason_BOOT_REASON_UNSPECIFIED
}

func (x *ZInfoDevice) GetCellRadios() []*ZCellularModuleInfo {
	if x != nil {
		return x.CellRadios
	}
	return nil
}

func (x *ZInfoDevice) GetSims() []*ZSimcardInfo {
	if x != nil {
		return x.Sims
	}
	return nil
}

func (x *ZInfoDevice) GetTasks() []*ZInfoDeviceTasks {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *ZInfoDevice) GetMaintenanceMode() bool {
	if x != nil {
		return x.MaintenanceMode
	}
	return false
}

func (x *ZInfoDevice) GetMaintenanceModeReason() MaintenanceModeReason {
	if x != nil {
		return x.MaintenanceModeReason
	}
	return MaintenanceModeReason_MAINTENANCE_MODE_REASON_NONE
}

func (x *ZInfoDevice) GetHardwareWatchdogPresent() bool {
	if x != nil {
		return x.HardwareWatchdogPresent
	}
	return false
}

func (x *ZInfoDevice) GetRebootInprogress() bool {
	if x != nil {
		return x.RebootInprogress
	}
	return false
}

func (x *ZInfoDevice) GetCapabilities() *Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *ZInfoDevice) GetBaseosUpdateCounter() uint32 {
	if x != nil {
		return x.BaseosUpdateCounter
	}
	return 0
}

func (x *ZInfoDevice) GetState() ZDeviceState {
	if x != nil {
		return x.State
	}
	return ZDeviceState_ZDEVICE_STATE_UNSPECIFIED
}

func (x *ZInfoDevice) GetLocalProfile() string {
	if x != nil {
		return x.LocalProfile
	}
	return ""
}

func (x *ZInfoDevice) GetMaintenanceModeReasons() []MaintenanceModeReason {
	if x != nil {
		return x.MaintenanceModeReasons
	}
	return nil
}

// Deprecated: Marked as deprecated in info/info.proto.
func (x *ZInfoDevice) GetDormantTime() string {
	if x != nil {
		return x.DormantTime
	}
	return ""
}

func (x *ZInfoDevice) GetStorageInfo() []*StorageInfo {
	if x != nil {
		return x.StorageInfo
	}
	return nil
}

func (x *ZInfoDevice) GetShutdownConfigCounter() uint32 {
	if x != nil {
		return x.ShutdownConfigCounter
	}
	return 0
}

func (x *ZInfoDevice) GetAttestationInfo() *AttestationInfo {
	if x != nil {
		return x.AttestationInfo
	}
	return nil
}

func (x *ZInfoDevice) GetApiCapability() APICapability {
	if x != nil {
		return x.ApiCapability
	}
	return APICapability_API_CAPABILITY_UNSPECIFIED
}

func (x *ZInfoDevice) GetRemoteAccessDisabled() bool {
	if x != nil {
		return x.RemoteAccessDisabled
	}
	return false
}

func (x *ZInfoDevice) GetOptionalCapabilities() *OptionalCapabilities {
	if x != nil {
		return x.OptionalCapabilities
	}
	return nil
}

// OptionalCapabilities indicates any additional capabilities device wants
// to publish to controller. For example Kubevirt hypervisor is not supported by
// all eve flavors.
type OptionalCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Virtualization type Kubevirt
	HvTypeKubevirt bool `protobuf:"varint,1,opt,name=hv_type_kubevirt,json=hvTypeKubevirt,proto3" json:"hv_type_kubevirt,omitempty"`
}

func (x *OptionalCapabilities) Reset() {
	*x = OptionalCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalCapabilities) ProtoMessage() {}

func (x *OptionalCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalCapabilities.ProtoReflect.Descriptor instead.
func (*OptionalCapabilities) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{31}
}

func (x *OptionalCapabilities) GetHvTypeKubevirt() bool {
	if x != nil {
		return x.HvTypeKubevirt
	}
	return false
}

// Information about attestation process
type AttestationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State AttestationState `protobuf:"varint,1,opt,name=state,proto3,enum=org.lfedge.eve.info.AttestationState" json:"state,omitempty"` //current state of attestation
	Error *ErrorInfo       `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`                                            //last error
}

func (x *AttestationInfo) Reset() {
	*x = AttestationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestationInfo) ProtoMessage() {}

func (x *AttestationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestationInfo.ProtoReflect.Descriptor instead.
func (*AttestationInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{32}
}

func (x *AttestationInfo) GetState() AttestationState {
	if x != nil {
		return x.State
	}
	return AttestationState_ATTESTATION_STATE_UNSPECIFIED
}

func (x *AttestationInfo) GetError() *ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

// The current and fallback system adapter information
type SystemAdapterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentIndex uint32              `protobuf:"varint,1,opt,name=currentIndex,proto3" json:"currentIndex,omitempty"` // Zero means the first/highest priority is used
	Status       []*DevicePortStatus `protobuf:"bytes,2,rep,name=status,proto3" json:"status,omitempty"`
}

func (x *SystemAdapterInfo) Reset() {
	*x = SystemAdapterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemAdapterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemAdapterInfo) ProtoMessage() {}

func (x *SystemAdapterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemAdapterInfo.ProtoReflect.Descriptor instead.
func (*SystemAdapterInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{33}
}

func (x *SystemAdapterInfo) GetCurrentIndex() uint32 {
	if x != nil {
		return x.CurrentIndex
	}
	return 0
}

func (x *SystemAdapterInfo) GetStatus() []*DevicePortStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type DevicePortStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version       uint32                 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	TimePriority  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timePriority,proto3" json:"timePriority,omitempty"`
	LastFailed    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=lastFailed,proto3" json:"lastFailed,omitempty"`
	LastSucceeded *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lastSucceeded,proto3" json:"lastSucceeded,omitempty"`
	Ports         []*DevicePort          `protobuf:"bytes,6,rep,name=ports,proto3" json:"ports,omitempty"`
	LastError     string                 `protobuf:"bytes,7,opt,name=lastError,proto3" json:"lastError,omitempty"`
}

func (x *DevicePortStatus) Reset() {
	*x = DevicePortStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePortStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePortStatus) ProtoMessage() {}

func (x *DevicePortStatus) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePortStatus.ProtoReflect.Descriptor instead.
func (*DevicePortStatus) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{34}
}

func (x *DevicePortStatus) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DevicePortStatus) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DevicePortStatus) GetTimePriority() *timestamppb.Timestamp {
	if x != nil {
		return x.TimePriority
	}
	return nil
}

func (x *DevicePortStatus) GetLastFailed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastFailed
	}
	return nil
}

func (x *DevicePortStatus) GetLastSucceeded() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSucceeded
	}
	return nil
}

func (x *DevicePortStatus) GetPorts() []*DevicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *DevicePortStatus) GetLastError() string {
	if x != nil {
		return x.LastError
	}
	return ""
}

type DevicePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ifname string `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // Logical name set by controller; same as logicallabel
	IsMgmt bool   `protobuf:"varint,3,opt,name=isMgmt,proto3" json:"isMgmt,omitempty"`
	Free   bool   `protobuf:"varint,4,opt,name=free,proto3" json:"free,omitempty"` // DEPRECATED - use cost instead with zero cost meaning free
	// DhcpConfig
	DhcpType uint32 `protobuf:"varint,11,opt,name=dhcpType,proto3" json:"dhcpType,omitempty"`
	Subnet   string `protobuf:"bytes,12,opt,name=subnet,proto3" json:"subnet,omitempty"`
	// gateway - OBSOLETE - obsoleted by defaultRouters
	Gateway string `protobuf:"bytes,13,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// domainname - OBSOLETE - obsoleted by dns
	Domainname string `protobuf:"bytes,14,opt,name=domainname,proto3" json:"domainname,omitempty"`
	NtpServer  string `protobuf:"bytes,15,opt,name=ntpServer,proto3" json:"ntpServer,omitempty"`
	// dnsServers - OBSOLETE - obsoleted by dns
	DnsServers     []string                   `protobuf:"bytes,16,rep,name=dnsServers,proto3" json:"dnsServers,omitempty"`
	DhcpRangeLow   string                     `protobuf:"bytes,17,opt,name=dhcpRangeLow,proto3" json:"dhcpRangeLow,omitempty"`
	DhcpRangeHigh  string                     `protobuf:"bytes,18,opt,name=dhcpRangeHigh,proto3" json:"dhcpRangeHigh,omitempty"`
	Proxy          *ProxyStatus               `protobuf:"bytes,21,opt,name=proxy,proto3" json:"proxy,omitempty"`
	MacAddr        string                     `protobuf:"bytes,22,opt,name=macAddr,proto3" json:"macAddr,omitempty"`
	IPAddrs        []string                   `protobuf:"bytes,23,rep,name=IPAddrs,proto3" json:"IPAddrs,omitempty"`               // All IP addresses with /N for subnet
	DefaultRouters []string                   `protobuf:"bytes,24,rep,name=defaultRouters,proto3" json:"defaultRouters,omitempty"` // If DHCP assigned
	Dns            *ZInfoDNS                  `protobuf:"bytes,25,opt,name=dns,proto3" json:"dns,omitempty"`                       // If DHCP assigned
	Up             bool                       `protobuf:"varint,26,opt,name=up,proto3" json:"up,omitempty"`                        // operational up/down status.
	Location       *GeoLoc                    `protobuf:"bytes,27,opt,name=location,proto3" json:"location,omitempty"`
	Err            *ErrorInfo                 `protobuf:"bytes,29,opt,name=err,proto3" json:"err,omitempty"`                                                  // Any errors on the interface.
	Usage          evecommon.PhyIoMemberUsage `protobuf:"varint,30,opt,name=usage,proto3,enum=org.lfedge.eve.common.PhyIoMemberUsage" json:"usage,omitempty"` // Usage of the Device port
	NetworkUUID    string                     `protobuf:"bytes,31,opt,name=networkUUID,proto3" json:"networkUUID,omitempty"`                                  // Network UUID configured for the port.
	Cost           uint32                     `protobuf:"varint,32,opt,name=cost,proto3" json:"cost,omitempty"`                                               // Zero is free. Max is 255.
	WirelessStatus *WirelessStatus            `protobuf:"bytes,33,opt,name=wireless_status,json=wirelessStatus,proto3" json:"wireless_status,omitempty"`      // defined for cellular/WiFi ports only
	Mtu            uint32                     `protobuf:"varint,34,opt,name=mtu,proto3" json:"mtu,omitempty"`                                                 // MTU of the port
}

func (x *DevicePort) Reset() {
	*x = DevicePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicePort) ProtoMessage() {}

func (x *DevicePort) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicePort.ProtoReflect.Descriptor instead.
func (*DevicePort) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{35}
}

func (x *DevicePort) GetIfname() string {
	if x != nil {
		return x.Ifname
	}
	return ""
}

func (x *DevicePort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DevicePort) GetIsMgmt() bool {
	if x != nil {
		return x.IsMgmt
	}
	return false
}

func (x *DevicePort) GetFree() bool {
	if x != nil {
		return x.Free
	}
	return false
}

func (x *DevicePort) GetDhcpType() uint32 {
	if x != nil {
		return x.DhcpType
	}
	return 0
}

func (x *DevicePort) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *DevicePort) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DevicePort) GetDomainname() string {
	if x != nil {
		return x.Domainname
	}
	return ""
}

func (x *DevicePort) GetNtpServer() string {
	if x != nil {
		return x.NtpServer
	}
	return ""
}

func (x *DevicePort) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *DevicePort) GetDhcpRangeLow() string {
	if x != nil {
		return x.DhcpRangeLow
	}
	return ""
}

func (x *DevicePort) GetDhcpRangeHigh() string {
	if x != nil {
		return x.DhcpRangeHigh
	}
	return ""
}

func (x *DevicePort) GetProxy() *ProxyStatus {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *DevicePort) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *DevicePort) GetIPAddrs() []string {
	if x != nil {
		return x.IPAddrs
	}
	return nil
}

func (x *DevicePort) GetDefaultRouters() []string {
	if x != nil {
		return x.DefaultRouters
	}
	return nil
}

func (x *DevicePort) GetDns() *ZInfoDNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *DevicePort) GetUp() bool {
	if x != nil {
		return x.Up
	}
	return false
}

func (x *DevicePort) GetLocation() *GeoLoc {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DevicePort) GetErr() *ErrorInfo {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *DevicePort) GetUsage() evecommon.PhyIoMemberUsage {
	if x != nil {
		return x.Usage
	}
	return evecommon.PhyIoMemberUsage(0)
}

func (x *DevicePort) GetNetworkUUID() string {
	if x != nil {
		return x.NetworkUUID
	}
	return ""
}

func (x *DevicePort) GetCost() uint32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *DevicePort) GetWirelessStatus() *WirelessStatus {
	if x != nil {
		return x.WirelessStatus
	}
	return nil
}

func (x *DevicePort) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

type ProxyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxies            []*ProxyEntry `protobuf:"bytes,1,rep,name=proxies,proto3" json:"proxies,omitempty"`
	Exceptions         string        `protobuf:"bytes,2,opt,name=exceptions,proto3" json:"exceptions,omitempty"`
	Pacfile            string        `protobuf:"bytes,3,opt,name=pacfile,proto3" json:"pacfile,omitempty"`
	NetworkProxyEnable bool          `protobuf:"varint,4,opt,name=networkProxyEnable,proto3" json:"networkProxyEnable,omitempty"`
	NetworkProxyURL    string        `protobuf:"bytes,5,opt,name=networkProxyURL,proto3" json:"networkProxyURL,omitempty"`
	WpadURL            string        `protobuf:"bytes,6,opt,name=wpadURL,proto3" json:"wpadURL,omitempty"`
}

func (x *ProxyStatus) Reset() {
	*x = ProxyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyStatus) ProtoMessage() {}

func (x *ProxyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyStatus.ProtoReflect.Descriptor instead.
func (*ProxyStatus) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{36}
}

func (x *ProxyStatus) GetProxies() []*ProxyEntry {
	if x != nil {
		return x.Proxies
	}
	return nil
}

func (x *ProxyStatus) GetExceptions() string {
	if x != nil {
		return x.Exceptions
	}
	return ""
}

func (x *ProxyStatus) GetPacfile() string {
	if x != nil {
		return x.Pacfile
	}
	return ""
}

func (x *ProxyStatus) GetNetworkProxyEnable() bool {
	if x != nil {
		return x.NetworkProxyEnable
	}
	return false
}

func (x *ProxyStatus) GetNetworkProxyURL() string {
	if x != nil {
		return x.NetworkProxyURL
	}
	return ""
}

func (x *ProxyStatus) GetWpadURL() string {
	if x != nil {
		return x.WpadURL
	}
	return ""
}

type ProxyEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // From NPT_ types aka proxyProto
	Server string `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Port   uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ProxyEntry) Reset() {
	*x = ProxyEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyEntry) ProtoMessage() {}

func (x *ProxyEntry) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyEntry.ProtoReflect.Descriptor instead.
func (*ProxyEntry) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{37}
}

func (x *ProxyEntry) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ProxyEntry) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *ProxyEntry) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type WirelessStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     WirelessType     `protobuf:"varint,1,opt,name=type,proto3,enum=org.lfedge.eve.info.WirelessType" json:"type,omitempty"`
	Cellular *ZCellularStatus `protobuf:"bytes,2,opt,name=cellular,proto3" json:"cellular,omitempty"` // later we may add status for WiFi
}

func (x *WirelessStatus) Reset() {
	*x = WirelessStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirelessStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirelessStatus) ProtoMessage() {}

func (x *WirelessStatus) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirelessStatus.ProtoReflect.Descriptor instead.
func (*WirelessStatus) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{38}
}

func (x *WirelessStatus) GetType() WirelessType {
	if x != nil {
		return x.Type
	}
	return WirelessType_WIRELESS_TYPE_UNSPECIFIED
}

func (x *WirelessStatus) GetCellular() *ZCellularStatus {
	if x != nil {
		return x.Cellular
	}
	return nil
}

type ZCellularStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name reference (ZCellularModuleInfo.name) to the corresponding cellular module
	// from the list ZInfoDevice.cell_radios.
	CellularModule string `protobuf:"bytes,1,opt,name=cellular_module,json=cellularModule,proto3" json:"cellular_module,omitempty"`
	// Each item is a name reference (ZSimcardInfo.name) to a SIM card from the list ZInfoDevice.sims.
	// Ordered by slot numbers.
	SimCards []string `protobuf:"bytes,2,rep,name=sim_cards,json=simCards,proto3" json:"sim_cards,omitempty"`
	// List of available cellular service providers.
	// If the modem is registered to a network, the list is guaranteed to contain an entry
	// with ZCellularProvider.current_serving set to true, describing the current provider.
	Providers []*ZCellularProvider `protobuf:"bytes,3,rep,name=providers,proto3" json:"providers,omitempty"`
	// The list of Radio Access Technologies (RATs) currently used for registering/connecting
	// to the network (typically just one).
	CurrentRats []evecommon.RadioAccessTechnology `protobuf:"varint,4,rep,packed,name=current_rats,json=currentRats,proto3,enum=org.lfedge.eve.common.RadioAccessTechnology" json:"current_rats,omitempty"`
	// Time when the current connection was established.
	// Zero timestamp if the modem is not connected.
	ConnectedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=connected_at,json=connectedAt,proto3" json:"connected_at,omitempty"`
	// If EVE failed to configure the cellular connection, the error is published here.
	ConfigError string `protobuf:"bytes,10,opt,name=config_error,json=configError,proto3" json:"config_error,omitempty"`
	// if the connectivity probing is failing, error is reported here
	// (see CellularConnectivityProbe).
	ProbeError string `protobuf:"bytes,11,opt,name=probe_error,json=probeError,proto3" json:"probe_error,omitempty"`
}

func (x *ZCellularStatus) Reset() {
	*x = ZCellularStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZCellularStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZCellularStatus) ProtoMessage() {}

func (x *ZCellularStatus) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZCellularStatus.ProtoReflect.Descriptor instead.
func (*ZCellularStatus) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{39}
}

func (x *ZCellularStatus) GetCellularModule() string {
	if x != nil {
		return x.CellularModule
	}
	return ""
}

func (x *ZCellularStatus) GetSimCards() []string {
	if x != nil {
		return x.SimCards
	}
	return nil
}

func (x *ZCellularStatus) GetProviders() []*ZCellularProvider {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *ZCellularStatus) GetCurrentRats() []evecommon.RadioAccessTechnology {
	if x != nil {
		return x.CurrentRats
	}
	return nil
}

func (x *ZCellularStatus) GetConnectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ConnectedAt
	}
	return nil
}

func (x *ZCellularStatus) GetConfigError() string {
	if x != nil {
		return x.ConfigError
	}
	return ""
}

func (x *ZCellularStatus) GetProbeError() string {
	if x != nil {
		return x.ProbeError
	}
	return ""
}

// SW Info for the device base OS
// Many of these fields are for debug purposes. The ones intended
// for the UI/cli are userStatus, subStatus*, shortVersion, and swErr
type ZInfoDevSW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activated       bool   `protobuf:"varint,2,opt,name=activated,proto3" json:"activated,omitempty"`
	PartitionLabel  string `protobuf:"bytes,3,opt,name=partitionLabel,proto3" json:"partitionLabel,omitempty"`   // E.g., "IMGA"
	PartitionDevice string `protobuf:"bytes,4,opt,name=partitionDevice,proto3" json:"partitionDevice,omitempty"` // /dev/something
	PartitionState  string `protobuf:"bytes,5,opt,name=partitionState,proto3" json:"partitionState,omitempty"`   // state obtained from cboot
	// Once BaseOs start using ContentTrees, this field may be deprecated.
	Status            ZSwState        `protobuf:"varint,6,opt,name=status,proto3,enum=org.lfedge.eve.info.ZSwState" json:"status,omitempty"` // E.g., "DOWNLOADED"
	ShortVersion      string          `protobuf:"bytes,7,opt,name=shortVersion,proto3" json:"shortVersion,omitempty"`                        // From rootfs i.e., image
	LongVersion       string          `protobuf:"bytes,8,opt,name=longVersion,proto3" json:"longVersion,omitempty"`                          // E.g., the yml file content from build
	SwErr             *ErrorInfo      `protobuf:"bytes,9,opt,name=swErr,proto3" json:"swErr,omitempty"`
	DownloadProgress  uint32          `protobuf:"varint,10,opt,name=downloadProgress,proto3" json:"downloadProgress,omitempty"` // Download progress; 0-100 percent
	UserStatus        BaseOsStatus    `protobuf:"varint,11,opt,name=userStatus,proto3,enum=org.lfedge.eve.info.BaseOsStatus" json:"userStatus,omitempty"`
	SubStatusStr      string          `protobuf:"bytes,12,opt,name=subStatusStr,proto3" json:"subStatusStr,omitempty"` // English formatted string
	SubStatus         BaseOsSubStatus `protobuf:"varint,13,opt,name=subStatus,proto3,enum=org.lfedge.eve.info.BaseOsSubStatus" json:"subStatus,omitempty"`
	SubStatusProgress uint32          `protobuf:"varint,14,opt,name=subStatusProgress,proto3" json:"subStatusProgress,omitempty"` // Context-dependent; percentage or time
}

func (x *ZInfoDevSW) Reset() {
	*x = ZInfoDevSW{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoDevSW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoDevSW) ProtoMessage() {}

func (x *ZInfoDevSW) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoDevSW.ProtoReflect.Descriptor instead.
func (*ZInfoDevSW) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{40}
}

func (x *ZInfoDevSW) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *ZInfoDevSW) GetPartitionLabel() string {
	if x != nil {
		return x.PartitionLabel
	}
	return ""
}

func (x *ZInfoDevSW) GetPartitionDevice() string {
	if x != nil {
		return x.PartitionDevice
	}
	return ""
}

func (x *ZInfoDevSW) GetPartitionState() string {
	if x != nil {
		return x.PartitionState
	}
	return ""
}

func (x *ZInfoDevSW) GetStatus() ZSwState {
	if x != nil {
		return x.Status
	}
	return ZSwState_INVALID
}

func (x *ZInfoDevSW) GetShortVersion() string {
	if x != nil {
		return x.ShortVersion
	}
	return ""
}

func (x *ZInfoDevSW) GetLongVersion() string {
	if x != nil {
		return x.LongVersion
	}
	return ""
}

func (x *ZInfoDevSW) GetSwErr() *ErrorInfo {
	if x != nil {
		return x.SwErr
	}
	return nil
}

func (x *ZInfoDevSW) GetDownloadProgress() uint32 {
	if x != nil {
		return x.DownloadProgress
	}
	return 0
}

func (x *ZInfoDevSW) GetUserStatus() BaseOsStatus {
	if x != nil {
		return x.UserStatus
	}
	return BaseOsStatus_NONE
}

func (x *ZInfoDevSW) GetSubStatusStr() string {
	if x != nil {
		return x.SubStatusStr
	}
	return ""
}

func (x *ZInfoDevSW) GetSubStatus() BaseOsSubStatus {
	if x != nil {
		return x.SubStatus
	}
	return BaseOsSubStatus_NONE_SUBSTATUS
}

func (x *ZInfoDevSW) GetSubStatusProgress() uint32 {
	if x != nil {
		return x.SubStatusProgress
	}
	return 0
}

// Per filesystem/partition information
type ZInfoStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device          string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`                    // E.g., "sda3"
	MountPath       string `protobuf:"bytes,2,opt,name=mountPath,proto3" json:"mountPath,omitempty"`              // E.g., "/", or "/config"
	Total           uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                     // in MBytes
	StorageLocation bool   `protobuf:"varint,4,opt,name=storageLocation,proto3" json:"storageLocation,omitempty"` // Storage location for app disks, images etc.
}

func (x *ZInfoStorage) Reset() {
	*x = ZInfoStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoStorage) ProtoMessage() {}

func (x *ZInfoStorage) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoStorage.ProtoReflect.Descriptor instead.
func (*ZInfoStorage) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{41}
}

func (x *ZInfoStorage) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *ZInfoStorage) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *ZInfoStorage) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ZInfoStorage) GetStorageLocation() bool {
	if x != nil {
		return x.StorageLocation
	}
	return false
}

// Per snapshot information
type ZInfoSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identifier for the snapshot, required
	// The format of the ID is a standard UUIDv4.
	// Should be unique within the app instance. If the snapshot creation was
	// triggered on the Controller side, the Controller should have generate the
	// ID, so here the device just sends it back. If the snapshot creation was
	// triggered locally, the Controller doesn't know the ID, so EVE should
	// generate it and report back to the Controller.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// an app instance configuration id and version, optional
	// EVE needs to send these fields only in the cases when the snapshot was
	// triggered locally. In this case, the fields contain the value of the
	// EdgeDevConfig.id field that has come from the Controller with the latest
	// received EdgeDevConfig message. The field in that message is described in
	// the `devconfig.proto` file and has the UUIDandVersion type. It contains
	// both the id and the version of the configuration.
	// In this message EVE has to send the id and the version of the
	// configuration in two different fields, because the UUIDandVersion type
	// is not available here.
	ConfigId string `protobuf:"bytes,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	// see the comment for the config_id field
	ConfigVersion string `protobuf:"bytes,3,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	// a timestamp when the snapshot was created
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// a reason for the snapshot creation
	Type SnapshotType `protobuf:"varint,5,opt,name=type,proto3,enum=org.lfedge.eve.info.SnapshotType" json:"type,omitempty"`
	// an error that happened during the snapshot handling (creation/deletion/rollback)
	SnapErr *ErrorInfo `protobuf:"bytes,6,opt,name=snap_err,json=snapErr,proto3" json:"snap_err,omitempty"`
}

func (x *ZInfoSnapshot) Reset() {
	*x = ZInfoSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoSnapshot) ProtoMessage() {}

func (x *ZInfoSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoSnapshot.ProtoReflect.Descriptor instead.
func (*ZInfoSnapshot) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{42}
}

func (x *ZInfoSnapshot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ZInfoSnapshot) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *ZInfoSnapshot) GetConfigVersion() string {
	if x != nil {
		return x.ConfigVersion
	}
	return ""
}

func (x *ZInfoSnapshot) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ZInfoSnapshot) GetType() SnapshotType {
	if x != nil {
		return x.Type
	}
	return SnapshotType_SNAPSHOT_TYPE_UNSPECIFIED
}

func (x *ZInfoSnapshot) GetSnapErr() *ErrorInfo {
	if x != nil {
		return x.SnapErr
	}
	return nil
}

type ZInfoClusterNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeStatus ZInfoClusterNodeStatus `protobuf:"varint,1,opt,name=node_status,json=nodeStatus,proto3,enum=org.lfedge.eve.info.ZInfoClusterNodeStatus" json:"node_status,omitempty"`
}

func (x *ZInfoClusterNode) Reset() {
	*x = ZInfoClusterNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoClusterNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoClusterNode) ProtoMessage() {}

func (x *ZInfoClusterNode) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoClusterNode.ProtoReflect.Descriptor instead.
func (*ZInfoClusterNode) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{43}
}

func (x *ZInfoClusterNode) GetNodeStatus() ZInfoClusterNodeStatus {
	if x != nil {
		return x.NodeStatus
	}
	return ZInfoClusterNodeStatus_Z_INFO_CLUSTER_NODE_STATUS_UNSPECIFIED
}

type ZInfoApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID      string `protobuf:"bytes,1,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppVersion string `protobuf:"bytes,2,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	SystemApp  bool   `protobuf:"varint,6,opt,name=systemApp,proto3" json:"systemApp,omitempty"`
	AppName    string `protobuf:"bytes,7,opt,name=AppName,proto3" json:"AppName,omitempty"`
	// EVE stopped sending this. Can be removed.
	SoftwareList     []*ZInfoSW             `protobuf:"bytes,8,rep,name=softwareList,proto3" json:"softwareList,omitempty"` // XXX to be deprecated in favor of volumeRefs
	BootTime         *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=bootTime,proto3" json:"bootTime,omitempty"`
	AssignedAdapters []*ZioBundle           `protobuf:"bytes,13,rep,name=assignedAdapters,proto3" json:"assignedAdapters,omitempty"`
	AppErr           []*ErrorInfo           `protobuf:"bytes,14,rep,name=appErr,proto3" json:"appErr,omitempty"`
	State            ZSwState               `protobuf:"varint,15,opt,name=state,proto3,enum=org.lfedge.eve.info.ZSwState" json:"state,omitempty"`
	Network          []*ZInfoNetwork        `protobuf:"bytes,16,rep,name=network,proto3" json:"network,omitempty"`       // up/down; allocated IP
	VolumeRefs       []string               `protobuf:"bytes,17,rep,name=volumeRefs,proto3" json:"volumeRefs,omitempty"` // volume UUIDs
	Snapshots        []*ZInfoSnapshot       `protobuf:"bytes,18,rep,name=snapshots,proto3" json:"snapshots,omitempty"`   // optional field, used to send list of snapshots on device
	// Deployed app is scheduled, or rescheduled and launched on this node,
	// it has the Pod Spec-name of this node, the app can be in any operating state.
	ClusterAppRunning bool `protobuf:"varint,20,opt,name=cluster_app_running,json=clusterAppRunning,proto3" json:"cluster_app_running,omitempty"`
}

func (x *ZInfoApp) Reset() {
	*x = ZInfoApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoApp) ProtoMessage() {}

func (x *ZInfoApp) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoApp.ProtoReflect.Descriptor instead.
func (*ZInfoApp) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{44}
}

func (x *ZInfoApp) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *ZInfoApp) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *ZInfoApp) GetSystemApp() bool {
	if x != nil {
		return x.SystemApp
	}
	return false
}

func (x *ZInfoApp) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *ZInfoApp) GetSoftwareList() []*ZInfoSW {
	if x != nil {
		return x.SoftwareList
	}
	return nil
}

func (x *ZInfoApp) GetBootTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BootTime
	}
	return nil
}

func (x *ZInfoApp) GetAssignedAdapters() []*ZioBundle {
	if x != nil {
		return x.AssignedAdapters
	}
	return nil
}

func (x *ZInfoApp) GetAppErr() []*ErrorInfo {
	if x != nil {
		return x.AppErr
	}
	return nil
}

func (x *ZInfoApp) GetState() ZSwState {
	if x != nil {
		return x.State
	}
	return ZSwState_INVALID
}

func (x *ZInfoApp) GetNetwork() []*ZInfoNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ZInfoApp) GetVolumeRefs() []string {
	if x != nil {
		return x.VolumeRefs
	}
	return nil
}

func (x *ZInfoApp) GetSnapshots() []*ZInfoSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *ZInfoApp) GetClusterAppRunning() bool {
	if x != nil {
		return x.ClusterAppRunning
	}
	return false
}

// tunnel link details
type ZInfoVpnLinkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpiId     string `protobuf:"bytes,1,opt,name=spiId,proto3" json:"spiId,omitempty"`          // Security Parameter Index
	SubNet    string `protobuf:"bytes,2,opt,name=subNet,proto3" json:"subNet,omitempty"`        // Associate Subnet
	Direction bool   `protobuf:"varint,3,opt,name=direction,proto3" json:"direction,omitempty"` // 0 = local, 1 = remote
}

func (x *ZInfoVpnLinkInfo) Reset() {
	*x = ZInfoVpnLinkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoVpnLinkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoVpnLinkInfo) ProtoMessage() {}

func (x *ZInfoVpnLinkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoVpnLinkInfo.ProtoReflect.Descriptor instead.
func (*ZInfoVpnLinkInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{45}
}

func (x *ZInfoVpnLinkInfo) GetSpiId() string {
	if x != nil {
		return x.SpiId
	}
	return ""
}

func (x *ZInfoVpnLinkInfo) GetSubNet() string {
	if x != nil {
		return x.SubNet
	}
	return ""
}

func (x *ZInfoVpnLinkInfo) GetDirection() bool {
	if x != nil {
		return x.Direction
	}
	return false
}

// Esp details
type ZInfoVpnLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                               // esp id
	Name     string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                           // connection name
	ReqId    string            `protobuf:"bytes,3,opt,name=reqId,proto3" json:"reqId,omitempty"`                                         // request id
	InstTime uint64            `protobuf:"varint,4,opt,name=instTime,proto3" json:"instTime,omitempty"`                                  // in seconds
	EspInfo  string            `protobuf:"bytes,5,opt,name=espInfo,proto3" json:"espInfo,omitempty"`                                     // esp info
	State    ZInfoVpnState     `protobuf:"varint,6,opt,name=state,proto3,enum=org.lfedge.eve.info.ZInfoVpnState" json:"state,omitempty"` // esp state
	LInfo    *ZInfoVpnLinkInfo `protobuf:"bytes,10,opt,name=lInfo,proto3" json:"lInfo,omitempty"`                                        // local
	RInfo    *ZInfoVpnLinkInfo `protobuf:"bytes,11,opt,name=rInfo,proto3" json:"rInfo,omitempty"`                                        // remote
}

func (x *ZInfoVpnLink) Reset() {
	*x = ZInfoVpnLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoVpnLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoVpnLink) ProtoMessage() {}

func (x *ZInfoVpnLink) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoVpnLink.ProtoReflect.Descriptor instead.
func (*ZInfoVpnLink) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{46}
}

func (x *ZInfoVpnLink) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ZInfoVpnLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ZInfoVpnLink) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ZInfoVpnLink) GetInstTime() uint64 {
	if x != nil {
		return x.InstTime
	}
	return 0
}

func (x *ZInfoVpnLink) GetEspInfo() string {
	if x != nil {
		return x.EspInfo
	}
	return ""
}

func (x *ZInfoVpnLink) GetState() ZInfoVpnState {
	if x != nil {
		return x.State
	}
	return ZInfoVpnState_VPN_INVALID
}

func (x *ZInfoVpnLink) GetLInfo() *ZInfoVpnLinkInfo {
	if x != nil {
		return x.LInfo
	}
	return nil
}

func (x *ZInfoVpnLink) GetRInfo() *ZInfoVpnLinkInfo {
	if x != nil {
		return x.RInfo
	}
	return nil
}

// ipsec left/right end-point info
type ZInfoVpnEndPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // ipSec id
	IpAddr string `protobuf:"bytes,2,opt,name=ipAddr,proto3" json:"ipAddr,omitempty"` // Ip Address
	Port   uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`    // udp port
}

func (x *ZInfoVpnEndPoint) Reset() {
	*x = ZInfoVpnEndPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoVpnEndPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoVpnEndPoint) ProtoMessage() {}

func (x *ZInfoVpnEndPoint) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoVpnEndPoint.ProtoReflect.Descriptor instead.
func (*ZInfoVpnEndPoint) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{47}
}

func (x *ZInfoVpnEndPoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ZInfoVpnEndPoint) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

func (x *ZInfoVpnEndPoint) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Ike details
type ZInfoVpnConn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                               // ike id
	Name    string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                           // connection name
	Version string            `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                                     // ike-v1/v2
	EstTime uint64            `protobuf:"varint,4,opt,name=estTime,proto3" json:"estTime,omitempty"`                                    // in seconds
	Ikes    string            `protobuf:"bytes,5,opt,name=ikes,proto3" json:"ikes,omitempty"`                                           // ike proposals
	State   ZInfoVpnState     `protobuf:"varint,6,opt,name=state,proto3,enum=org.lfedge.eve.info.ZInfoVpnState" json:"state,omitempty"` // ike state
	LInfo   *ZInfoVpnEndPoint `protobuf:"bytes,7,opt,name=lInfo,proto3" json:"lInfo,omitempty"`                                         // local
	RInfo   *ZInfoVpnEndPoint `protobuf:"bytes,8,opt,name=rInfo,proto3" json:"rInfo,omitempty"`                                         // remote
	Links   []*ZInfoVpnLink   `protobuf:"bytes,10,rep,name=links,proto3" json:"links,omitempty"`                                        // can be more than one
}

func (x *ZInfoVpnConn) Reset() {
	*x = ZInfoVpnConn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoVpnConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoVpnConn) ProtoMessage() {}

func (x *ZInfoVpnConn) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoVpnConn.ProtoReflect.Descriptor instead.
func (*ZInfoVpnConn) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{48}
}

func (x *ZInfoVpnConn) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ZInfoVpnConn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ZInfoVpnConn) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ZInfoVpnConn) GetEstTime() uint64 {
	if x != nil {
		return x.EstTime
	}
	return 0
}

func (x *ZInfoVpnConn) GetIkes() string {
	if x != nil {
		return x.Ikes
	}
	return ""
}

func (x *ZInfoVpnConn) GetState() ZInfoVpnState {
	if x != nil {
		return x.State
	}
	return ZInfoVpnState_VPN_INVALID
}

func (x *ZInfoVpnConn) GetLInfo() *ZInfoVpnEndPoint {
	if x != nil {
		return x.LInfo
	}
	return nil
}

func (x *ZInfoVpnConn) GetRInfo() *ZInfoVpnEndPoint {
	if x != nil {
		return x.RInfo
	}
	return nil
}

func (x *ZInfoVpnConn) GetLinks() []*ZInfoVpnLink {
	if x != nil {
		return x.Links
	}
	return nil
}

// ipsec level information
type ZInfoVpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpTime           uint64          `protobuf:"varint,1,opt,name=upTime,proto3" json:"upTime,omitempty"`                    // in seconds
	PolicyBased      bool            `protobuf:"varint,2,opt,name=policyBased,proto3" json:"policyBased,omitempty"`          // Policy-based vs. VTI-based IPSEC VPN
	ListeningIpAddrs []string        `protobuf:"bytes,3,rep,name=listeningIpAddrs,proto3" json:"listeningIpAddrs,omitempty"` //listening on
	Conn             []*ZInfoVpnConn `protobuf:"bytes,10,rep,name=conn,proto3" json:"conn,omitempty"`                        // Connection Information
}

func (x *ZInfoVpn) Reset() {
	*x = ZInfoVpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoVpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoVpn) ProtoMessage() {}

func (x *ZInfoVpn) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoVpn.ProtoReflect.Descriptor instead.
func (*ZInfoVpn) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{49}
}

func (x *ZInfoVpn) GetUpTime() uint64 {
	if x != nil {
		return x.UpTime
	}
	return 0
}

func (x *ZInfoVpn) GetPolicyBased() bool {
	if x != nil {
		return x.PolicyBased
	}
	return false
}

func (x *ZInfoVpn) GetListeningIpAddrs() []string {
	if x != nil {
		return x.ListeningIpAddrs
	}
	return nil
}

func (x *ZInfoVpn) GetConn() []*ZInfoVpnConn {
	if x != nil {
		return x.Conn
	}
	return nil
}

// Network Instance information
type ZInfoNetworkInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkID      string                 `protobuf:"bytes,2,opt,name=networkID,proto3" json:"networkID,omitempty"`           // UUID
	NetworkVersion string                 `protobuf:"bytes,3,opt,name=networkVersion,proto3" json:"networkVersion,omitempty"` // From Network Instance config
	InstType       uint32                 `protobuf:"varint,5,opt,name=instType,proto3" json:"instType,omitempty"`            // ZNetworkInstType
	Displayname    string                 `protobuf:"bytes,6,opt,name=displayname,proto3" json:"displayname,omitempty"`       // From NetworkInstance config
	Activated      bool                   `protobuf:"varint,7,opt,name=activated,proto3" json:"activated,omitempty"`          // Forwarding enabled
	UpTimeStamp    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=upTimeStamp,proto3" json:"upTimeStamp,omitempty"`
	// OBSOLETE - No longer used.
	SoftwareList *ZInfoSW `protobuf:"bytes,9,opt,name=softwareList,proto3" json:"softwareList,omitempty"` // E.g., VPN version; XXX to be deprecated?
	// Current uplink interface in use by this NI.
	// Deprecated - network instance can be associated with multiple device ports,
	// not just one. To find out which ports are being used by network instance,
	// read the reported field "ports" instead (see below). Additionally, "routes"
	// informs about the routes configured for the NI and which ports are currently
	// used to route the traffic out (this includes info for the default route).
	//
	// Deprecated: Marked as deprecated in info/info.proto.
	CurrentUplinkIntf string `protobuf:"bytes,10,opt,name=CurrentUplinkIntf,proto3" json:"CurrentUplinkIntf,omitempty"`
	// User defined namestring alias to this CurrentUplinkIntf.
	// Deprecated for the same reason as CurrentUplinkIntf. Additionally, logical
	// labels are preferred over aliases.
	//
	// Deprecated: Marked as deprecated in info/info.proto.
	CurrentUplinkAlias string `protobuf:"bytes,11,opt,name=CurrentUplinkAlias,proto3" json:"CurrentUplinkAlias,omitempty"`
	// List of device ports used for external connectivity.
	// Ports are referenced by logical labels.
	// Empty if network instance is air-gapped.
	Ports            []string                 `protobuf:"bytes,12,rep,name=ports,proto3" json:"ports,omitempty"`
	BridgeNum        uint32                   `protobuf:"varint,20,opt,name=bridgeNum,proto3" json:"bridgeNum,omitempty"`
	BridgeName       string                   `protobuf:"bytes,21,opt,name=bridgeName,proto3" json:"bridgeName,omitempty"`
	BridgeIPAddr     string                   `protobuf:"bytes,22,opt,name=bridgeIPAddr,proto3" json:"bridgeIPAddr,omitempty"`
	IpAssignments    []*ZmetIPAssignmentEntry `protobuf:"bytes,23,rep,name=ipAssignments,proto3" json:"ipAssignments,omitempty"`
	Vifs             []*ZmetVifInfo           `protobuf:"bytes,25,rep,name=vifs,proto3" json:"vifs,omitempty"`        // Set of vifs on this bridge
	Ipv4Eid          bool                     `protobuf:"varint,26,opt,name=ipv4Eid,proto3" json:"ipv4Eid,omitempty"` // Track if this is a CryptoEid with IPv4 EIDs
	AssignedAdapters []*ZioBundle             `protobuf:"bytes,30,rep,name=assignedAdapters,proto3" json:"assignedAdapters,omitempty"`
	// Types that are assignable to InfoContent:
	//
	//	*ZInfoNetworkInstance_Vinfo
	InfoContent isZInfoNetworkInstance_InfoContent `protobuf_oneof:"InfoContent"`
	NetworkErr  []*ErrorInfo                       `protobuf:"bytes,40,rep,name=networkErr,proto3" json:"networkErr,omitempty"`
	State       ZNetworkInstanceState              `protobuf:"varint,41,opt,name=state,proto3,enum=org.lfedge.eve.info.ZNetworkInstanceState" json:"state,omitempty"`
	// The Maximum Transmission Unit (MTU) in bytes set for this network instance and all
	// connected application interfaces.
	// Please note that while EVE fully manages the MTU of application interfaces on the host
	// side, it has limited or no control over the MTUs used by the connected applications
	// on their guest side and cannot determine and report what their values are.
	// The MTU configured for the network instance by the user may differ from the actual MTU
	// used and reported here if the configured MTU is invalid or conflicts with the MTU
	// of the associated device port(s) (see NetworkInstanceConfig.mtu in netinst.proto).
	Mtu uint32 `protobuf:"varint,42,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// Routes configured for the network instance.
	// This includes connected routes, DHCP-received routes, user-defined static routes
	// (NetworkInstanceConfig.static_routes) and the default route (if any).
	// Note that some user-defined static routes might not be applied (and thus not reported
	// here) if they do not match IP config of currently used device ports.
	// Additionally, static routes with shared port labels (matching multiple ports)
	// are reported here each with the logical label of the (single) port, currently selected
	// for the route (selected based on connectivity status, port costs, wwan signal strength,
	// etc.).
	IpRoutes []*IPRoute `protobuf:"bytes,43,rep,name=ip_routes,json=ipRoutes,proto3" json:"ip_routes,omitempty"`
}

func (x *ZInfoNetworkInstance) Reset() {
	*x = ZInfoNetworkInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoNetworkInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoNetworkInstance) ProtoMessage() {}

func (x *ZInfoNetworkInstance) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoNetworkInstance.ProtoReflect.Descriptor instead.
func (*ZInfoNetworkInstance) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{50}
}

func (x *ZInfoNetworkInstance) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *ZInfoNetworkInstance) GetNetworkVersion() string {
	if x != nil {
		return x.NetworkVersion
	}
	return ""
}

func (x *ZInfoNetworkInstance) GetInstType() uint32 {
	if x != nil {
		return x.InstType
	}
	return 0
}

func (x *ZInfoNetworkInstance) GetDisplayname() string {
	if x != nil {
		return x.Displayname
	}
	return ""
}

func (x *ZInfoNetworkInstance) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *ZInfoNetworkInstance) GetUpTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.UpTimeStamp
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetSoftwareList() *ZInfoSW {
	if x != nil {
		return x.SoftwareList
	}
	return nil
}

// Deprecated: Marked as deprecated in info/info.proto.
func (x *ZInfoNetworkInstance) GetCurrentUplinkIntf() string {
	if x != nil {
		return x.CurrentUplinkIntf
	}
	return ""
}

// Deprecated: Marked as deprecated in info/info.proto.
func (x *ZInfoNetworkInstance) GetCurrentUplinkAlias() string {
	if x != nil {
		return x.CurrentUplinkAlias
	}
	return ""
}

func (x *ZInfoNetworkInstance) GetPorts() []string {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetBridgeNum() uint32 {
	if x != nil {
		return x.BridgeNum
	}
	return 0
}

func (x *ZInfoNetworkInstance) GetBridgeName() string {
	if x != nil {
		return x.BridgeName
	}
	return ""
}

func (x *ZInfoNetworkInstance) GetBridgeIPAddr() string {
	if x != nil {
		return x.BridgeIPAddr
	}
	return ""
}

func (x *ZInfoNetworkInstance) GetIpAssignments() []*ZmetIPAssignmentEntry {
	if x != nil {
		return x.IpAssignments
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetVifs() []*ZmetVifInfo {
	if x != nil {
		return x.Vifs
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetIpv4Eid() bool {
	if x != nil {
		return x.Ipv4Eid
	}
	return false
}

func (x *ZInfoNetworkInstance) GetAssignedAdapters() []*ZioBundle {
	if x != nil {
		return x.AssignedAdapters
	}
	return nil
}

func (m *ZInfoNetworkInstance) GetInfoContent() isZInfoNetworkInstance_InfoContent {
	if m != nil {
		return m.InfoContent
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetVinfo() *ZInfoVpn {
	if x, ok := x.GetInfoContent().(*ZInfoNetworkInstance_Vinfo); ok {
		return x.Vinfo
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetNetworkErr() []*ErrorInfo {
	if x != nil {
		return x.NetworkErr
	}
	return nil
}

func (x *ZInfoNetworkInstance) GetState() ZNetworkInstanceState {
	if x != nil {
		return x.State
	}
	return ZNetworkInstanceState_ZNETINST_STATE_UNSPECIFIED
}

func (x *ZInfoNetworkInstance) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *ZInfoNetworkInstance) GetIpRoutes() []*IPRoute {
	if x != nil {
		return x.IpRoutes
	}
	return nil
}

type isZInfoNetworkInstance_InfoContent interface {
	isZInfoNetworkInstance_InfoContent()
}

type ZInfoNetworkInstance_Vinfo struct {
	Vinfo *ZInfoVpn `protobuf:"bytes,31,opt,name=vinfo,proto3,oneof"` // deprecated = 32; ZInfoLisp linfo = 32
}

func (*ZInfoNetworkInstance_Vinfo) isZInfoNetworkInstance_InfoContent() {}

// Information about an IP route configured for a network instance.
// The next-hop for the IP route is specified by the "gateway" IP address
// (empty for a connected route) and the output "port". However, if the gateway
// is one of the applications running on the device, the port is actually a virtual
// interface with an EVE-generated interface name and no user-assigned logical label.
// Therefore, in such cases, it is more useful to leave "port" empty and instead use
// the "gateway_app" field to publish the UUID of the application used as the gateway.
type IPRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination network address in the CIDR format: <IP-address>/<prefix-length>
	DestinationNetwork string `protobuf:"bytes,1,opt,name=destination_network,json=destinationNetwork,proto3" json:"destination_network,omitempty"`
	// Gateway IP address.
	// Empty for connected route.
	Gateway string `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// Logical label of the output device port for the routed traffic.
	// Empty if the gateway is IP address of one of the applications. In that case,
	// 'gateway_app' is defined instead.
	Port string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	// UUID of the application used as the gateway for the route.
	// Empty if the gateway is external (not one of the apps but outside of the device)
	// or this is a connected route for a port (thus gateway is empty).
	// In that case, 'port' is defined instead.
	GatewayApp string `protobuf:"bytes,4,opt,name=gateway_app,json=gatewayApp,proto3" json:"gateway_app,omitempty"`
}

func (x *IPRoute) Reset() {
	*x = IPRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPRoute) ProtoMessage() {}

func (x *IPRoute) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPRoute.ProtoReflect.Descriptor instead.
func (*IPRoute) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{51}
}

func (x *IPRoute) GetDestinationNetwork() string {
	if x != nil {
		return x.DestinationNetwork
	}
	return ""
}

func (x *IPRoute) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *IPRoute) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *IPRoute) GetGatewayApp() string {
	if x != nil {
		return x.GatewayApp
	}
	return ""
}

type UsageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTime             *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=createTime,proto3" json:"createTime,omitempty"`
	RefCount               uint32                 `protobuf:"varint,2,opt,name=refCount,proto3" json:"refCount,omitempty"`
	LastRefcountChangeTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=lastRefcountChangeTime,proto3" json:"lastRefcountChangeTime,omitempty"` // Last time when refCount changed
}

func (x *UsageInfo) Reset() {
	*x = UsageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageInfo) ProtoMessage() {}

func (x *UsageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageInfo.ProtoReflect.Descriptor instead.
func (*UsageInfo) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{52}
}

func (x *UsageInfo) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *UsageInfo) GetRefCount() uint32 {
	if x != nil {
		return x.RefCount
	}
	return 0
}

func (x *UsageInfo) GetLastRefcountChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRefcountChangeTime
	}
	return nil
}

type VolumeResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSizeBytes uint64 `protobuf:"varint,1,opt,name=maxSizeBytes,proto3" json:"maxSizeBytes,omitempty"` // From config
	CurSizeBytes uint64 `protobuf:"varint,2,opt,name=curSizeBytes,proto3" json:"curSizeBytes,omitempty"` // Current disk usage
}

func (x *VolumeResources) Reset() {
	*x = VolumeResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeResources) ProtoMessage() {}

func (x *VolumeResources) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeResources.ProtoReflect.Descriptor instead.
func (*VolumeResources) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{53}
}

func (x *VolumeResources) GetMaxSizeBytes() uint64 {
	if x != nil {
		return x.MaxSizeBytes
	}
	return 0
}

func (x *VolumeResources) GetCurSizeBytes() uint64 {
	if x != nil {
		return x.CurSizeBytes
	}
	return 0
}

// Information about a particular volume based on the Volume config
type ZInfoVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string           `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	DisplayName string           `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Usage       *UsageInfo       `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
	Resources   *VolumeResources `protobuf:"bytes,4,opt,name=resources,proto3" json:"resources,omitempty"`
	// Allowed States:
	//
	//	UNSPECIFIED
	//	INITIAL
	//	CREATED_VOLUME  ( Terminal State )
	//	DOWNLOADING
	//	VERIFYING
	//	LOADING
	//	ERROR    ( Terminal State )
	State              ZSwState   `protobuf:"varint,5,opt,name=state,proto3,enum=org.lfedge.eve.info.ZSwState" json:"state,omitempty"`
	ProgressPercentage uint32     `protobuf:"varint,6,opt,name=progressPercentage,proto3" json:"progressPercentage,omitempty"` // 0-100% Use depends on state i.e., download vs. verification vs. volume creation
	VolumeErr          *ErrorInfo `protobuf:"bytes,7,opt,name=volumeErr,proto3" json:"volumeErr,omitempty"`
	GenerationCount    int64      `protobuf:"varint,8,opt,name=generation_count,json=generationCount,proto3" json:"generation_count,omitempty"` // version of volume
}

func (x *ZInfoVolume) Reset() {
	*x = ZInfoVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoVolume) ProtoMessage() {}

func (x *ZInfoVolume) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoVolume.ProtoReflect.Descriptor instead.
func (*ZInfoVolume) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{54}
}

func (x *ZInfoVolume) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ZInfoVolume) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ZInfoVolume) GetUsage() *UsageInfo {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *ZInfoVolume) GetResources() *VolumeResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ZInfoVolume) GetState() ZSwState {
	if x != nil {
		return x.State
	}
	return ZSwState_INVALID
}

func (x *ZInfoVolume) GetProgressPercentage() uint32 {
	if x != nil {
		return x.ProgressPercentage
	}
	return 0
}

func (x *ZInfoVolume) GetVolumeErr() *ErrorInfo {
	if x != nil {
		return x.VolumeErr
	}
	return nil
}

func (x *ZInfoVolume) GetGenerationCount() int64 {
	if x != nil {
		return x.GenerationCount
	}
	return 0
}

type ContentResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurSizeBytes uint64 `protobuf:"varint,1,opt,name=curSizeBytes,proto3" json:"curSizeBytes,omitempty"` // Current disk usage
}

func (x *ContentResources) Reset() {
	*x = ContentResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentResources) ProtoMessage() {}

func (x *ContentResources) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentResources.ProtoReflect.Descriptor instead.
func (*ContentResources) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{55}
}

func (x *ContentResources) GetCurSizeBytes() uint64 {
	if x != nil {
		return x.CurSizeBytes
	}
	return 0
}

// ZInfoContentTree is used to describe the top of a tree, which has
// a UUID (and displayName) from the config ContentTree message.
// The components (or blobs) used by that are referenced by the compoentShaList
// and in a separate ZInfoBlobList info message
type ZInfoContentTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	DisplayName string            `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Sha256      string            `protobuf:"bytes,3,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Resources   *ContentResources `protobuf:"bytes,4,opt,name=resources,proto3" json:"resources,omitempty"`
	Usage       *UsageInfo        `protobuf:"bytes,5,opt,name=usage,proto3" json:"usage,omitempty"`
	// Allowed States:
	//
	//	UNSPECIFIED
	//	INITIAL
	//	DOWNLOADING
	//	VERIFYING
	//	LOADING
	//	LOADED   ( Terminal State )
	//	ERROR    ( Terminal State )
	State              ZSwState   `protobuf:"varint,6,opt,name=state,proto3,enum=org.lfedge.eve.info.ZSwState" json:"state,omitempty"`
	ProgressPercentage uint32     `protobuf:"varint,7,opt,name=progressPercentage,proto3" json:"progressPercentage,omitempty"` // 0-100% Depending on state if it is download or verification
	Err                *ErrorInfo `protobuf:"bytes,8,opt,name=err,proto3" json:"err,omitempty"`
	ComponentShaList   []string   `protobuf:"bytes,9,rep,name=componentShaList,proto3" json:"componentShaList,omitempty"`                        // sha's for the referenced blobs
	GenerationCount    int64      `protobuf:"varint,10,opt,name=generation_count,json=generationCount,proto3" json:"generation_count,omitempty"` // version of content tree
}

func (x *ZInfoContentTree) Reset() {
	*x = ZInfoContentTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoContentTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoContentTree) ProtoMessage() {}

func (x *ZInfoContentTree) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoContentTree.ProtoReflect.Descriptor instead.
func (*ZInfoContentTree) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{56}
}

func (x *ZInfoContentTree) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ZInfoContentTree) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ZInfoContentTree) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *ZInfoContentTree) GetResources() *ContentResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ZInfoContentTree) GetUsage() *UsageInfo {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *ZInfoContentTree) GetState() ZSwState {
	if x != nil {
		return x.State
	}
	return ZSwState_INVALID
}

func (x *ZInfoContentTree) GetProgressPercentage() uint32 {
	if x != nil {
		return x.ProgressPercentage
	}
	return 0
}

func (x *ZInfoContentTree) GetErr() *ErrorInfo {
	if x != nil {
		return x.Err
	}
	return nil
}

func (x *ZInfoContentTree) GetComponentShaList() []string {
	if x != nil {
		return x.ComponentShaList
	}
	return nil
}

func (x *ZInfoContentTree) GetGenerationCount() int64 {
	if x != nil {
		return x.GenerationCount
	}
	return 0
}

type ZInfoBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha256    string            `protobuf:"bytes,1,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Resources *ContentResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	Usage     *UsageInfo        `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
	// Allowed States:
	//
	//	UNSPECIFIED
	//	INITIAL
	//	DOWNLOADING
	//	VERIFYING
	//	LOADING
	//	LOADED   ( Terminal State )
	//	ERROR    ( Terminal State )
	State              ZSwState   `protobuf:"varint,4,opt,name=state,proto3,enum=org.lfedge.eve.info.ZSwState" json:"state,omitempty"`
	ProgressPercentage uint32     `protobuf:"varint,5,opt,name=progressPercentage,proto3" json:"progressPercentage,omitempty"` // 0-100% Depending on state if it is download or verification
	Err                *ErrorInfo `protobuf:"bytes,6,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ZInfoBlob) Reset() {
	*x = ZInfoBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoBlob) ProtoMessage() {}

func (x *ZInfoBlob) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoBlob.ProtoReflect.Descriptor instead.
func (*ZInfoBlob) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{57}
}

func (x *ZInfoBlob) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *ZInfoBlob) GetResources() *ContentResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ZInfoBlob) GetUsage() *UsageInfo {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *ZInfoBlob) GetState() ZSwState {
	if x != nil {
		return x.State
	}
	return ZSwState_INVALID
}

func (x *ZInfoBlob) GetProgressPercentage() uint32 {
	if x != nil {
		return x.ProgressPercentage
	}
	return 0
}

func (x *ZInfoBlob) GetErr() *ErrorInfo {
	if x != nil {
		return x.Err
	}
	return nil
}

// For efficiency EVE can send many/all the blobs in one info message
type ZInfoBlobList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blob []*ZInfoBlob `protobuf:"bytes,1,rep,name=blob,proto3" json:"blob,omitempty"`
}

func (x *ZInfoBlobList) Reset() {
	*x = ZInfoBlobList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoBlobList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoBlobList) ProtoMessage() {}

func (x *ZInfoBlobList) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoBlobList.ProtoReflect.Descriptor instead.
func (*ZInfoBlobList) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{58}
}

func (x *ZInfoBlobList) GetBlob() []*ZInfoBlob {
	if x != nil {
		return x.Blob
	}
	return nil
}

//  This is the request payload for POST /api/v1/edgeDevice/info
// ZInfoMsg carries event-triggered state changes for one object (a device,
// an app instance, or a network instance). As such the messages are retransmitted
// until they make it to the controller, however subsequent state change to the
// object will replace any attempts to (re)transmit the previous message for
// that object.
type ZInfoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ztype ZInfoTypes `protobuf:"varint,1,opt,name=ztype,proto3,enum=org.lfedge.eve.info.ZInfoTypes" json:"ztype,omitempty"`
	DevId string     `protobuf:"bytes,2,opt,name=devId,proto3" json:"devId,omitempty"`
	// Types that are assignable to InfoContent:
	//
	//	*ZInfoMsg_Dinfo
	//	*ZInfoMsg_Ainfo
	//	*ZInfoMsg_Niinfo
	//	*ZInfoMsg_Vinfo
	//	*ZInfoMsg_Cinfo
	//	*ZInfoMsg_Binfo
	//	*ZInfoMsg_Amdinfo
	//	*ZInfoMsg_Evinfo
	//	*ZInfoMsg_Hwinfo
	//	*ZInfoMsg_Locinfo
	//	*ZInfoMsg_PatchInfo
	//	*ZInfoMsg_ClusterNode
	//	*ZInfoMsg_NtpSources
	InfoContent isZInfoMsg_InfoContent `protobuf_oneof:"InfoContent"`
	AtTimeStamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=atTimeStamp,proto3" json:"atTimeStamp,omitempty"`
}

func (x *ZInfoMsg) Reset() {
	*x = ZInfoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoMsg) ProtoMessage() {}

func (x *ZInfoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoMsg.ProtoReflect.Descriptor instead.
func (*ZInfoMsg) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{59}
}

func (x *ZInfoMsg) GetZtype() ZInfoTypes {
	if x != nil {
		return x.Ztype
	}
	return ZInfoTypes_ZiNop
}

func (x *ZInfoMsg) GetDevId() string {
	if x != nil {
		return x.DevId
	}
	return ""
}

func (m *ZInfoMsg) GetInfoContent() isZInfoMsg_InfoContent {
	if m != nil {
		return m.InfoContent
	}
	return nil
}

func (x *ZInfoMsg) GetDinfo() *ZInfoDevice {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Dinfo); ok {
		return x.Dinfo
	}
	return nil
}

func (x *ZInfoMsg) GetAinfo() *ZInfoApp {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Ainfo); ok {
		return x.Ainfo
	}
	return nil
}

func (x *ZInfoMsg) GetNiinfo() *ZInfoNetworkInstance {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Niinfo); ok {
		return x.Niinfo
	}
	return nil
}

func (x *ZInfoMsg) GetVinfo() *ZInfoVolume {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Vinfo); ok {
		return x.Vinfo
	}
	return nil
}

func (x *ZInfoMsg) GetCinfo() *ZInfoContentTree {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Cinfo); ok {
		return x.Cinfo
	}
	return nil
}

func (x *ZInfoMsg) GetBinfo() *ZInfoBlobList {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Binfo); ok {
		return x.Binfo
	}
	return nil
}

func (x *ZInfoMsg) GetAmdinfo() *ZInfoAppInstMetaData {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Amdinfo); ok {
		return x.Amdinfo
	}
	return nil
}

func (x *ZInfoMsg) GetEvinfo() *ZInfoEdgeview {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Evinfo); ok {
		return x.Evinfo
	}
	return nil
}

func (x *ZInfoMsg) GetHwinfo() *ZInfoHardware {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Hwinfo); ok {
		return x.Hwinfo
	}
	return nil
}

func (x *ZInfoMsg) GetLocinfo() *ZInfoLocation {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_Locinfo); ok {
		return x.Locinfo
	}
	return nil
}

func (x *ZInfoMsg) GetPatchInfo() *ZInfoPatchEnvelope {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_PatchInfo); ok {
		return x.PatchInfo
	}
	return nil
}

func (x *ZInfoMsg) GetClusterNode() *ZInfoClusterNode {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_ClusterNode); ok {
		return x.ClusterNode
	}
	return nil
}

func (x *ZInfoMsg) GetNtpSources() *ZInfoNTPSources {
	if x, ok := x.GetInfoContent().(*ZInfoMsg_NtpSources); ok {
		return x.NtpSources
	}
	return nil
}

func (x *ZInfoMsg) GetAtTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTimeStamp
	}
	return nil
}

type isZInfoMsg_InfoContent interface {
	isZInfoMsg_InfoContent()
}

type ZInfoMsg_Dinfo struct {
	Dinfo *ZInfoDevice `protobuf:"bytes,3,opt,name=dinfo,proto3,oneof"`
}

type ZInfoMsg_Ainfo struct {
	Ainfo *ZInfoApp `protobuf:"bytes,5,opt,name=ainfo,proto3,oneof"`
}

type ZInfoMsg_Niinfo struct {
	// deprecated = 10;
	// deprecated = 11;
	Niinfo *ZInfoNetworkInstance `protobuf:"bytes,12,opt,name=niinfo,proto3,oneof"`
}

type ZInfoMsg_Vinfo struct {
	Vinfo *ZInfoVolume `protobuf:"bytes,13,opt,name=vinfo,proto3,oneof"`
}

type ZInfoMsg_Cinfo struct {
	Cinfo *ZInfoContentTree `protobuf:"bytes,14,opt,name=cinfo,proto3,oneof"`
}

type ZInfoMsg_Binfo struct {
	Binfo *ZInfoBlobList `protobuf:"bytes,15,opt,name=binfo,proto3,oneof"`
}

type ZInfoMsg_Amdinfo struct {
	Amdinfo *ZInfoAppInstMetaData `protobuf:"bytes,16,opt,name=amdinfo,proto3,oneof"`
}

type ZInfoMsg_Evinfo struct {
	// evinfo include only if the edge-view is running on device
	Evinfo *ZInfoEdgeview `protobuf:"bytes,17,opt,name=evinfo,proto3,oneof"`
}

type ZInfoMsg_Hwinfo struct {
	Hwinfo *ZInfoHardware `protobuf:"bytes,18,opt,name=hwinfo,proto3,oneof"`
}

type ZInfoMsg_Locinfo struct {
	Locinfo *ZInfoLocation `protobuf:"bytes,19,opt,name=locinfo,proto3,oneof"`
}

type ZInfoMsg_PatchInfo struct {
	PatchInfo *ZInfoPatchEnvelope `protobuf:"bytes,20,opt,name=patchInfo,proto3,oneof"`
}

type ZInfoMsg_ClusterNode struct {
	// 21 reserved
	ClusterNode *ZInfoClusterNode `protobuf:"bytes,22,opt,name=cluster_node,json=clusterNode,proto3,oneof"`
}

type ZInfoMsg_NtpSources struct {
	NtpSources *ZInfoNTPSources `protobuf:"bytes,23,opt,name=ntp_sources,json=ntpSources,proto3,oneof"`
}

func (*ZInfoMsg_Dinfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Ainfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Niinfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Vinfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Cinfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Binfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Amdinfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Evinfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Hwinfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_Locinfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_PatchInfo) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_ClusterNode) isZInfoMsg_InfoContent() {}

func (*ZInfoMsg_NtpSources) isZInfoMsg_InfoContent() {}

// Information about hardware capabilities of node
type Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VMX/SVM for amd64 or Arm virtualization extensions for arm64
	HWAssistedVirtualization bool `protobuf:"varint,2,opt,name=HWAssistedVirtualization,proto3" json:"HWAssistedVirtualization,omitempty"`
	// I/O Virtualization support
	IOVirtualization bool `protobuf:"varint,3,opt,name=IOVirtualization,proto3" json:"IOVirtualization,omitempty"`
}

func (x *Capabilities) Reset() {
	*x = Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities) ProtoMessage() {}

func (x *Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities.ProtoReflect.Descriptor instead.
func (*Capabilities) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{60}
}

func (x *Capabilities) GetHWAssistedVirtualization() bool {
	if x != nil {
		return x.HWAssistedVirtualization
	}
	return false
}

func (x *Capabilities) GetIOVirtualization() bool {
	if x != nil {
		return x.IOVirtualization
	}
	return false
}

// AppInstMetaData sends meta data of an application instance
// e.g kubeconfig, etc
// Size of app meta data <= 32KB
type ZInfoAppInstMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string              `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Type AppInstMetaDataType `protobuf:"varint,2,opt,name=type,proto3,enum=org.lfedge.eve.info.AppInstMetaDataType" json:"type,omitempty"`
	Data []byte              `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ZInfoAppInstMetaData) Reset() {
	*x = ZInfoAppInstMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoAppInstMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoAppInstMetaData) ProtoMessage() {}

func (x *ZInfoAppInstMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoAppInstMetaData.ProtoReflect.Descriptor instead.
func (*ZInfoAppInstMetaData) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{61}
}

func (x *ZInfoAppInstMetaData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ZInfoAppInstMetaData) GetType() AppInstMetaDataType {
	if x != nil {
		return x.Type
	}
	return AppInstMetaDataType_APP_INST_META_DATA_TYPE_NONE
}

func (x *ZInfoAppInstMetaData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// ZInfoEdgeview - edge-view operation status/event
type ZInfoEdgeview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// expires on timestamp
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// started timestamp
	StartedTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	// total number of device related cmds edge-view has processed
	CountDev uint32 `protobuf:"varint,3,opt,name=count_dev,json=countDev,proto3" json:"count_dev,omitempty"`
	// total number of app related cmds edge-view has processed
	CountApp uint32 `protobuf:"varint,4,opt,name=count_app,json=countApp,proto3" json:"count_app,omitempty"`
	// total number of external related cmds edge-view has processed
	CountExt uint32 `protobuf:"varint,5,opt,name=count_ext,json=countExt,proto3" json:"count_ext,omitempty"`
}

func (x *ZInfoEdgeview) Reset() {
	*x = ZInfoEdgeview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoEdgeview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoEdgeview) ProtoMessage() {}

func (x *ZInfoEdgeview) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoEdgeview.ProtoReflect.Descriptor instead.
func (*ZInfoEdgeview) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{62}
}

func (x *ZInfoEdgeview) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *ZInfoEdgeview) GetStartedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTime
	}
	return nil
}

func (x *ZInfoEdgeview) GetCountDev() uint32 {
	if x != nil {
		return x.CountDev
	}
	return 0
}

func (x *ZInfoEdgeview) GetCountApp() uint32 {
	if x != nil {
		return x.CountApp
	}
	return 0
}

func (x *ZInfoEdgeview) GetCountExt() uint32 {
	if x != nil {
		return x.CountExt
	}
	return 0
}

// ZInfoLocation - geographic location of the device obtained from a GNSS receiver.
type ZInfoLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latitude in the Decimal degrees (DD) notation.
	// Valid values are in the range <-90, 90>. Anything outside of this range
	// should be treated as an unavailable value.
	// However, note that EVE avoids publishing location updates without valid
	// latitude and longitude values.
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Longitude in the Decimal degrees (DD) notation.
	// Valid values are in the range <-180, 180>. Anything outside of this range
	// should be treated as an unavailable value.
	// However, note that EVE avoids publishing location updates without valid
	// latitude and longitude values.
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// Altitude w.r.t. mean sea level in meters.
	// Value of -32768 is reported when altitude is not known.
	Altitude float64 `protobuf:"fixed64,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// UTC timestamp for the location measurement
	// (recorded by the GNSS clock).
	// Currently, this timestamp is limited to millisecond resolution.
	// When the timestamp is not available, EVE returns the Unix epoch time
	// (UTC midnight on January 1, 1970).
	UtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=utc_timestamp,json=utcTimestamp,proto3" json:"utc_timestamp,omitempty"`
	// Reliability of the provided information for latitude and longitude.
	HorizontalReliability LocReliability `protobuf:"varint,5,opt,name=horizontal_reliability,json=horizontalReliability,proto3,enum=org.lfedge.eve.info.LocReliability" json:"horizontal_reliability,omitempty"`
	// Reliability of the provided information for altitude.
	VerticalReliability LocReliability `protobuf:"varint,6,opt,name=vertical_reliability,json=verticalReliability,proto3,enum=org.lfedge.eve.info.LocReliability" json:"vertical_reliability,omitempty"`
	// Circular horizontal position uncertainty in meters.
	// Negative values are not valid and represent unavailable uncertainty.
	HorizontalUncertainty float32 `protobuf:"fixed32,7,opt,name=horizontal_uncertainty,json=horizontalUncertainty,proto3" json:"horizontal_uncertainty,omitempty"`
	// Vertical position uncertainty in meters.
	// Negative values are not valid and represent unavailable uncertainty.
	VerticalUncertainty float32 `protobuf:"fixed32,8,opt,name=vertical_uncertainty,json=verticalUncertainty,proto3" json:"vertical_uncertainty,omitempty"`
	// Logical label of the device used to obtain this location information.
	// If the GNSS receiver is integrated with an LTE modem, then this is the logical
	// label from the modem's PhysicalIO entry.
	Logicallabel string `protobuf:"bytes,9,opt,name=logicallabel,proto3" json:"logicallabel,omitempty"`
}

func (x *ZInfoLocation) Reset() {
	*x = ZInfoLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_info_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoLocation) ProtoMessage() {}

func (x *ZInfoLocation) ProtoReflect() protoreflect.Message {
	mi := &file_info_info_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoLocation.ProtoReflect.Descriptor instead.
func (*ZInfoLocation) Descriptor() ([]byte, []int) {
	return file_info_info_proto_rawDescGZIP(), []int{63}
}

func (x *ZInfoLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ZInfoLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *ZInfoLocation) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *ZInfoLocation) GetUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.UtcTimestamp
	}
	return nil
}

func (x *ZInfoLocation) GetHorizontalReliability() LocReliability {
	if x != nil {
		return x.HorizontalReliability
	}
	return LocReliability_LOC_RELIABILITY_UNSPECIFIED
}

func (x *ZInfoLocation) GetVerticalReliability() LocReliability {
	if x != nil {
		return x.VerticalReliability
	}
	return LocReliability_LOC_RELIABILITY_UNSPECIFIED
}

func (x *ZInfoLocation) GetHorizontalUncertainty() float32 {
	if x != nil {
		return x.HorizontalUncertainty
	}
	return 0
}

func (x *ZInfoLocation) GetVerticalUncertainty() float32 {
	if x != nil {
		return x.VerticalUncertainty
	}
	return 0
}

func (x *ZInfoLocation) GetLogicallabel() string {
	if x != nil {
		return x.Logicallabel
	}
	return ""
}

var File_info_info_proto protoreflect.FileDescriptor

var file_info_info_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x76, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x65, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x69,
	0x6e, 0x66, 0x6f, 0x2f, 0x6e, 0x74, 0x70, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x02, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x22, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x15,
	0x5a, 0x6d, 0x65, 0x74, 0x49, 0x50, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x5d, 0x0a, 0x0b, 0x5a, 0x6d, 0x65, 0x74, 0x56, 0x69, 0x66, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x44, 0x22, 0xf2, 0x02, 0x0a, 0x09, 0x5a, 0x69, 0x6f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x79, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x55, 0x55, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x55, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x64, 0x42, 0x79, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x53, 0x12, 0x46,
	0x0a, 0x0d, 0x69, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x68,
	0x79, 0x49, 0x6f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x6c, 0x0a, 0x0b, 0x49, 0x6f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x76, 0x66, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x66,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x76,
	0x66, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x40, 0x0a, 0x0f, 0x56, 0x66, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17,
	0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xb7, 0x02, 0x0a, 0x11, 0x5a, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x6f, 0x73, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6f, 0x73, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x6f, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x69, 0x6f, 0x73, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x62, 0x69, 0x6f, 0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x97, 0x04, 0x0a, 0x0c, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2f,
	0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x4e, 0x53, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x70, 0x76, 0x34, 0x55, 0x70, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x3e, 0x0a, 0x0a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x29, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d, 0x69, 0x73, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x4d, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x74,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x06,
	0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x49, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x6f, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4c, 0x6f, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x72,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4f, 0x72, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x22, 0x66, 0x0a, 0x08, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x4e, 0x53,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x4e, 0x53, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x4e, 0x53, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x44, 0x4e, 0x53, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x4e, 0x53, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x44, 0x4e, 0x53, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x44, 0x4e, 0x53, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0xea, 0x01, 0x0a,
	0x07, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x57, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x77, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x77, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x77, 0x48, 0x61, 0x73, 0x68, 0x12, 0x33,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x53, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x64, 0x65, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x64, 0x65, 0x76, 0x12,
	0x2a, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3d,
	0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x09, 0x56,
	0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x41, 0x74, 0x52, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a,
	0x0a, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x72, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x63,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x43, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x70,
	0x63, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x63, 0x41, 0x74, 0x52, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x41, 0x74, 0x52, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x3c, 0x0a, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x55,
	0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0b, 0x73, 0x68, 0x61, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x68, 0x61, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x61, 0x12, 0x25,
	0x0a, 0x0f, 0x73, 0x68, 0x61, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x54, 0x6c, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x43, 0x61, 0x22, 0x3d, 0x0a, 0x0f, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xbd, 0x03, 0x0a, 0x15, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5d,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x72, 0x0a,
	0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x1a, 0x64, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6b, 0x0a, 0x17, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x10, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x44, 0x0a, 0x10, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x0c, 0x5a, 0x53, 0x69, 0x6d, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x63, 0x63,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6c, 0x6f, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x73, 0x6c, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x53, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x4a,
	0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xd3, 0x02, 0x0a, 0x13, 0x5a, 0x43, 0x65, 0x6c, 0x6c, 0x75,
	0x6c, 0x61, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x55, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x43,
	0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x22, 0xaa, 0x01, 0x0a, 0x11,
	0x5a, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6c, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x72, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f,
	0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a,
	0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x09, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x68, 0x65,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x61, 0x77, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x04, 0x0a, 0x0b, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x52, 0x0a, 0x15, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x52, 0x13, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x4a,
	0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x17, 0x72, 0x65,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x15, 0x72, 0x65, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x54, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e,
	0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x0f,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x09, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x77, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x77, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x69,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x69, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12,
	0x40, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x07, 0x67, 0x5f, 0x75, 0x5f, 0x69, 0x5f, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x55, 0x49, 0x44, 0x22, 0xe5, 0x04, 0x0a, 0x0b,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x7a, 0x66, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x7a, 0x66, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c,
	0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x7a, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x7a, 0x70,
	0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x7a, 0x76, 0x6f, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5a, 0x76, 0x6f, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x73, 0x67, 0x22, 0x4b, 0x0a, 0x0d, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73,
	0x22, 0xe5, 0x15, 0x0a, 0x0b, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x41, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70, 0x75, 0x41, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x63, 0x70, 0x75,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x05,
	0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x4e, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x69, 0x6f, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x4e, 0x53, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x08, 0x62, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x62, 0x6f, 0x6f,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66,
	0x6f, 0x44, 0x65, 0x76, 0x53, 0x57, 0x52, 0x06, 0x73, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x62, 0x6f, 0x6f,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a,
	0x09, 0x48, 0x53, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x77, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x48,
	0x53, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x53, 0x4d, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x53, 0x4d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x41, 0x74, 0x52, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x63, 0x41, 0x74, 0x52, 0x65, 0x73, 0x74, 0x52, 0x11, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x63, 0x41, 0x74, 0x52, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c,
	0x0a, 0x08, 0x73, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65,
	0x62, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x49, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61,
	0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x65, 0x6c,
	0x6c, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x69, 0x6d, 0x73, 0x18,
	0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x53, 0x69, 0x6d,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x73, 0x69, 0x6d, 0x73, 0x12, 0x3b,
	0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x15, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x61,
	0x73, 0x65, 0x6f, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x61, 0x73, 0x65, 0x6f,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x18,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x16, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x64, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36,
	0x0a, 0x17, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x15, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x14, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x68, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6b, 0x75, 0x62, 0x65,
	0x76, 0x69, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x76, 0x54, 0x79,
	0x70, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x76, 0x69, 0x72, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x76, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x10, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xef, 0x06,
	0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4d, 0x67,
	0x6d, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x67, 0x6d, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x68, 0x63, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x68, 0x63, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x77,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x68, 0x63, 0x70, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x69, 0x67, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x68, 0x63,
	0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2f,
	0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x4e, 0x53, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x75, 0x70, 0x12,
	0x37, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x3d, 0x0a, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x68, 0x79, 0x49, 0x6f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x55, 0x55, 0x49, 0x44, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12,
	0x4c, 0x0a, 0x0f, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c,
	0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x57,
	0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x77,
	0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x74, 0x75, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x22,
	0xf6, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x39, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x63, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x70, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x70, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x22, 0x4c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x57, 0x69, 0x72, 0x65, 0x6c,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x57, 0x69,
	0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x40, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c,
	0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c,
	0x61, 0x72, 0x22, 0xf1, 0x02, 0x0a, 0x0f, 0x5a, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x69, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x6d, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c,
	0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x65, 0x63, 0x68,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xdc, 0x04, 0x0a, 0x0a, 0x5a, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x76, 0x53, 0x57, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x53, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x6e, 0x67,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x6f, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x77,
	0x45, 0x72, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x77, 0x45, 0x72, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x74, 0x72, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x4f, 0x73, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x73, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x02, 0x0a,
	0x0d, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x65,
	0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c,
	0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x6e, 0x61, 0x70, 0x45, 0x72,
	0x72, 0x22, 0x60, 0x0a, 0x10, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x86, 0x05, 0x0a, 0x08, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x41, 0x70, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x70, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x57, 0x52, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x62, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x69, 0x6f, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x45, 0x72, 0x72, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x70, 0x70, 0x45, 0x72, 0x72, 0x12, 0x33, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x5a, 0x53, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1e,
	0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x73, 0x12, 0x40,
	0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x4a, 0x04, 0x08, 0x09, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x13, 0x10, 0x14, 0x22, 0x5e, 0x0a, 0x10,
	0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x70, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x4e, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x4e, 0x65, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x02, 0x0a,
	0x0c, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e,
	0x66, 0x6f, 0x56, 0x70, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x05, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56,
	0x70, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x4e, 0x0a, 0x10, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x45, 0x6e, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0xe7, 0x02, 0x0a, 0x0c, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x43, 0x6f,
	0x6e, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6b,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49,
	0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x05, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f,
	0x56, 0x70, 0x6e, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x37, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x08,
	0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x35,
	0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x52,
	0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x22, 0x9f, 0x08, 0x0a, 0x14, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40,
	0x0a, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x57, 0x52, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x49, 0x6e, 0x74, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e,
	0x74, 0x66, 0x12, 0x32, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x12, 0x50,
	0x0a, 0x0d, 0x69, 0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x6d, 0x65, 0x74,
	0x49, 0x50, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x69, 0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x34, 0x0a, 0x04, 0x76, 0x69, 0x66, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x6d, 0x65, 0x74, 0x56, 0x69, 0x66, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x76, 0x69, 0x66, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x70, 0x76, 0x34, 0x45, 0x69,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x70, 0x76, 0x34, 0x45, 0x69, 0x64,
	0x12, 0x4a, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x5a, 0x69, 0x6f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72,
	0x72, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x45, 0x72, 0x72, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x49, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x08, 0x69, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4a, 0x04, 0x08, 0x18, 0x10, 0x19, 0x22, 0x89, 0x01, 0x0a, 0x07, 0x49, 0x50, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x70,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x41, 0x70, 0x70, 0x22, 0xb7, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x16, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x66, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x59, 0x0a,
	0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x0b, 0x5a, 0x49, 0x6e,
	0x66, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x53,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a,
	0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xc9,
	0x03, 0x0a, 0x10, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x5a, 0x53, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x30, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x53, 0x68, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb5, 0x02, 0x0a, 0x09, 0x5a,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36,
	0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x5a, 0x53, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x22, 0x43, 0x0a, 0x0d, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6c, 0x6f, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6c, 0x6f,
	0x62, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0xf6, 0x07, 0x0a, 0x08, 0x5a, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x7a, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x05, 0x7a, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x76, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x05, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x05, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x05, 0x61,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x48, 0x00, 0x52, 0x05, 0x61, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x43, 0x0a, 0x06, 0x6e, 0x69, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x6e, 0x69, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e,
	0x66, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x3d, 0x0a, 0x05, 0x63, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x3a, 0x0a, 0x05, 0x62, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x6c, 0x6f, 0x62, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x62, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x07,
	0x61, 0x6d, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x61, 0x6d, 0x64, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x76, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x64, 0x67, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x06, 0x65, 0x76, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x77, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x06, 0x68, 0x77, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x3e, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x47, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x6e, 0x74, 0x70, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x54, 0x50, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x0a, 0x6e, 0x74, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x0b, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x16,
	0x22, 0x76, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x18, 0x48, 0x57, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x48, 0x57, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x49, 0x4f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x49, 0x4f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x14, 0x5a, 0x49, 0x6e, 0x66,
	0x6f, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe2, 0x01, 0x0a, 0x0d, 0x5a, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x64, 0x67, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65,
	0x76, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x22, 0xe8, 0x03, 0x0a, 0x0d,
	0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x75, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x5a, 0x0a, 0x16, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x65,
	0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x15, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x56, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c,
	0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x13, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x6c,
	0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x16, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12,
	0x31, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x63, 0x65,
	0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2a, 0x75, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x65, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x49, 0x74, 0x65, 0x6d, 0x47, 0x61, 0x75, 0x67, 0x65, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x44,
	0x65, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x03, 0x2a, 0xfe, 0x01,
	0x0a, 0x0a, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x09, 0x0a, 0x05,
	0x5a, 0x69, 0x4e, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x5a, 0x69, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x5a, 0x69, 0x41, 0x70, 0x70, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x5a, 0x69, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x5a, 0x69, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x5a, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x5a, 0x69, 0x42, 0x6c,
	0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x5a, 0x69, 0x41, 0x70,
	0x70, 0x49, 0x6e, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x10, 0x0a, 0x12,
	0x0e, 0x0a, 0x0a, 0x5a, 0x69, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x10, 0x0b, 0x12,
	0x0e, 0x0a, 0x0a, 0x5a, 0x69, 0x45, 0x64, 0x67, 0x65, 0x76, 0x69, 0x65, 0x77, 0x10, 0x0c, 0x12,
	0x0e, 0x0a, 0x0a, 0x5a, 0x69, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0d, 0x12,
	0x13, 0x0a, 0x0f, 0x5a, 0x69, 0x50, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x5a, 0x69, 0x4e, 0x54, 0x50, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x10, 0x10, 0x22, 0x04, 0x08, 0x02, 0x10, 0x02, 0x22, 0x04, 0x08, 0x04,
	0x10, 0x04, 0x22, 0x04, 0x08, 0x05, 0x10, 0x05, 0x22, 0x04, 0x08, 0x0f, 0x10, 0x0f, 0x2a, 0x91,
	0x03, 0x0a, 0x08, 0x5a, 0x53, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x44,
	0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x4c, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x08,
	0x12, 0x0a, 0x0a, 0x06, 0x48, 0x41, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x55, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53,
	0x4f, 0x4c, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x0d, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d,
	0x45, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x56,
	0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x59, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x12, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x10, 0x13, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x57, 0x41, 0x49, 0x54, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x45, 0x44, 0x10, 0x16, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47,
	0x10, 0x18, 0x2a, 0x99, 0x02, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x5f, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x56,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x45, 0x45,
	0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x0b, 0x2a, 0x63,
	0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x03, 0x2a, 0x4e, 0x0a, 0x16, 0x48, 0x77, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f,
	0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0x88, 0x01, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x41,
	0x74, 0x52, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x44,
	0x41, 0x54, 0x41, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x41, 0x54, 0x41,
	0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45,
	0x43, 0x5f, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x41, 0x53, 0x45, 0x43, 0x5f, 0x41,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x3f,
	0x0a, 0x09, 0x50, 0x43, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x43, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x43, 0x52, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x43, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a,
	0x4d, 0x0a, 0x07, 0x53, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x49,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x49, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x53, 0x49, 0x4d, 0x10, 0x02, 0x2a, 0xa0,
	0x02, 0x0a, 0x17, 0x5a, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x5a, 0x5f,
	0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x5a, 0x5f, 0x43, 0x45, 0x4c, 0x4c,
	0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x28,
	0x0a, 0x24, 0x5a, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x41, 0x44,
	0x49, 0x4f, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x5a, 0x5f, 0x43, 0x45,
	0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12,
	0x33, 0x0a, 0x2f, 0x5a, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x5a, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c,
	0x41, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x05, 0x2a, 0x92, 0x01, 0x0a, 0x18, 0x5a, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2b,
	0x0a, 0x27, 0x5a, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x5a,
	0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x51, 0x4d, 0x49, 0x10, 0x01,
	0x12, 0x24, 0x0a, 0x20, 0x5a, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x4d, 0x42, 0x49, 0x4d, 0x10, 0x02, 0x2a, 0xb1, 0x02, 0x0a, 0x0c, 0x5a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x5a, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x5a, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x5a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x5a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x5a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4f, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x5a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12,
	0x24, 0x0a, 0x20, 0x5a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x4f, 0x46, 0x46, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x5a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x4f, 0x46, 0x46, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x5a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x44, 0x5f,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x4f, 0x46, 0x46, 0x10, 0x08, 0x2a, 0xf5, 0x01, 0x0a, 0x0d, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x07, 0x2a, 0xe3, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61,
	0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x41, 0x49, 0x44, 0x30, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44,
	0x31, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52,
	0x41, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x35, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x36, 0x10, 0x04, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x37, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x52, 0x41, 0x49, 0x44, 0x10, 0x06, 0x2a, 0x6b, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x45, 0x58, 0x54, 0x34, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x5a, 0x46, 0x53, 0x10, 0x02, 0x2a, 0xe5, 0x02, 0x0a, 0x0d, 0x41, 0x50, 0x49, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x49, 0x5f, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x49, 0x5f, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x49, 0x5f,
	0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x41, 0x50,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x44, 0x45,
	0x4c, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x04, 0x12, 0x23, 0x0a,
	0x1f, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x53,
	0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12,
	0x1c, 0x0a, 0x18, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x4d, 0x54, 0x55, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x50, 0x49, 0x5f, 0x43, 0x41, 0x50,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45, 0x52, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0x09, 0x2a, 0xb9, 0x03,
	0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17,
	0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4f, 0x4f,
	0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x1a,
	0x0a, 0x16, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4f,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10,
	0x06, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x4f, 0x4f, 0x4d, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x44, 0x4f, 0x47, 0x5f, 0x48,
	0x55, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x44, 0x4f, 0x47, 0x5f, 0x50, 0x49,
	0x44, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x42,
	0x4f, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4f, 0x4f, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0c,
	0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x56, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x1c,
	0x0a, 0x18, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x4f, 0x46, 0x46, 0x5f, 0x43, 0x4d, 0x44, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x16,
	0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x53,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xff, 0x01, 0x2a, 0xbe, 0x01, 0x0a, 0x15, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x2a,
	0x0a, 0x26, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49,
	0x53, 0x4b, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x03, 0x2a, 0xb5, 0x02, 0x0a, 0x10, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x1d, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x50, 0x4d, 0x5f, 0x51, 0x55,
	0x4f, 0x54, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x54,
	0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x50, 0x4d, 0x5f, 0x45, 0x53, 0x43, 0x52, 0x4f, 0x57, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x45, 0x53, 0x43, 0x52, 0x4f, 0x57, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x05, 0x12, 0x22,
	0x0a, 0x1e, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x07, 0x2a, 0x8b, 0x01, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50,
	0x50, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23,
	0x41, 0x50, 0x50, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x50, 0x50, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x02,
	0x2a, 0x61, 0x0a, 0x0c, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x57, 0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x49, 0x46, 0x49, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x49, 0x52, 0x45, 0x4c,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41,
	0x52, 0x10, 0x02, 0x2a, 0x71, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xcb, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x4f,
	0x73, 0x53, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f,
	0x4e, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x59, 0x5f, 0x49, 0x4e, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x12, 0x0a,
	0x0e, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x05, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x45, 0x45, 0x44,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x10, 0x06, 0x12,
	0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x52, 0x52,
	0x45, 0x44, 0x10, 0x07, 0x2a, 0x4b, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x2a, 0xb8, 0x01, 0x0a, 0x16, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x26,
	0x5a, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x5a, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x27,
	0x0a, 0x23, 0x5a, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x5a, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x2a, 0x8f, 0x01, 0x0a,
	0x0d, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x70, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x56, 0x50, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x50, 0x4e, 0x5f, 0x45, 0x53, 0x54, 0x41,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x50, 0x4e,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b,
	0x56, 0x50, 0x4e, 0x5f, 0x52, 0x45, 0x4b, 0x45, 0x59, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x56, 0x50, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x2a, 0x85,
	0x01, 0x0a, 0x15, 0x5a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x5a, 0x4e, 0x45, 0x54,
	0x49, 0x4e, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x5a, 0x4e, 0x45, 0x54,
	0x49, 0x4e, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x5a, 0x4e, 0x45, 0x54, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x5a, 0x4e, 0x45, 0x54, 0x49, 0x4e, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x9e, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x52, 0x65,
	0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x4f, 0x43,
	0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f,
	0x43, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x4f, 0x43, 0x5f,
	0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x43, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x4c, 0x4f, 0x43, 0x5f, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x42, 0x39, 0x0a, 0x13, 0x6f, 0x72, 0x67, 0x2e, 0x6c,
	0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x5a, 0x22,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x66, 0x2d, 0x65, 0x64,
	0x67, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6e,
	0x66, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_info_info_proto_rawDescOnce sync.Once
	file_info_info_proto_rawDescData = file_info_info_proto_rawDesc
)

func file_info_info_proto_rawDescGZIP() []byte {
	file_info_info_proto_rawDescOnce.Do(func() {
		file_info_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_info_info_proto_rawDescData)
	})
	return file_info_info_proto_rawDescData
}

var file_info_info_proto_enumTypes = make([]protoimpl.EnumInfo, 28)
var file_info_info_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_info_info_proto_goTypes = []interface{}{
	(DepMetricItemType)(0),               // 0: org.lfedge.eve.info.DepMetricItemType
	(ZInfoTypes)(0),                      // 1: org.lfedge.eve.info.ZInfoTypes
	(ZSwState)(0),                        // 2: org.lfedge.eve.info.ZSwState
	(Entity)(0),                          // 3: org.lfedge.eve.info.Entity
	(Severity)(0),                        // 4: org.lfedge.eve.info.Severity
	(HwSecurityModuleStatus)(0),          // 5: org.lfedge.eve.info.HwSecurityModuleStatus
	(DataSecAtRestStatus)(0),             // 6: org.lfedge.eve.info.DataSecAtRestStatus
	(PCRStatus)(0),                       // 7: org.lfedge.eve.info.PCRStatus
	(SimType)(0),                         // 8: org.lfedge.eve.info.SimType
	(ZCellularOperatingState)(0),         // 9: org.lfedge.eve.info.ZCellularOperatingState
	(ZCellularControlProtocol)(0),        // 10: org.lfedge.eve.info.ZCellularControlProtocol
	(ZDeviceState)(0),                    // 11: org.lfedge.eve.info.ZDeviceState
	(StorageStatus)(0),                   // 12: org.lfedge.eve.info.StorageStatus
	(StorageRaidType)(0),                 // 13: org.lfedge.eve.info.StorageRaidType
	(StorageTypeInfo)(0),                 // 14: org.lfedge.eve.info.StorageTypeInfo
	(APICapability)(0),                   // 15: org.lfedge.eve.info.APICapability
	(BootReason)(0),                      // 16: org.lfedge.eve.info.BootReason
	(MaintenanceModeReason)(0),           // 17: org.lfedge.eve.info.MaintenanceModeReason
	(AttestationState)(0),                // 18: org.lfedge.eve.info.AttestationState
	(AppInstMetaDataType)(0),             // 19: org.lfedge.eve.info.AppInstMetaDataType
	(WirelessType)(0),                    // 20: org.lfedge.eve.info.WirelessType
	(BaseOsStatus)(0),                    // 21: org.lfedge.eve.info.BaseOsStatus
	(BaseOsSubStatus)(0),                 // 22: org.lfedge.eve.info.BaseOsSubStatus
	(SnapshotType)(0),                    // 23: org.lfedge.eve.info.SnapshotType
	(ZInfoClusterNodeStatus)(0),          // 24: org.lfedge.eve.info.ZInfoClusterNodeStatus
	(ZInfoVpnState)(0),                   // 25: org.lfedge.eve.info.ZInfoVpnState
	(ZNetworkInstanceState)(0),           // 26: org.lfedge.eve.info.ZNetworkInstanceState
	(LocReliability)(0),                  // 27: org.lfedge.eve.info.LocReliability
	(*DeprecatedMetricItem)(nil),         // 28: org.lfedge.eve.info.deprecatedMetricItem
	(*ZmetIPAssignmentEntry)(nil),        // 29: org.lfedge.eve.info.ZmetIPAssignmentEntry
	(*ZmetVifInfo)(nil),                  // 30: org.lfedge.eve.info.ZmetVifInfo
	(*ZioBundle)(nil),                    // 31: org.lfedge.eve.info.ZioBundle
	(*IoAddresses)(nil),                  // 32: org.lfedge.eve.info.IoAddresses
	(*VfPublishedInfo)(nil),              // 33: org.lfedge.eve.info.VfPublishedInfo
	(*ZInfoManufacturer)(nil),            // 34: org.lfedge.eve.info.ZInfoManufacturer
	(*ZInfoNetwork)(nil),                 // 35: org.lfedge.eve.info.ZInfoNetwork
	(*GeoLoc)(nil),                       // 36: org.lfedge.eve.info.GeoLoc
	(*ZInfoDNS)(nil),                     // 37: org.lfedge.eve.info.ZInfoDNS
	(*ZInfoSW)(nil),                      // 38: org.lfedge.eve.info.ZInfoSW
	(*ErrorInfo)(nil),                    // 39: org.lfedge.eve.info.ErrorInfo
	(*DeviceEntity)(nil),                 // 40: org.lfedge.eve.info.DeviceEntity
	(*VaultInfo)(nil),                    // 41: org.lfedge.eve.info.VaultInfo
	(*DataSecAtRest)(nil),                // 42: org.lfedge.eve.info.DataSecAtRest
	(*SecurityInfo)(nil),                 // 43: org.lfedge.eve.info.SecurityInfo
	(*ZInfoConfigItem)(nil),              // 44: org.lfedge.eve.info.ZInfoConfigItem
	(*ZInfoConfigItemStatus)(nil),        // 45: org.lfedge.eve.info.ZInfoConfigItemStatus
	(*ZInfoAppInstance)(nil),             // 46: org.lfedge.eve.info.ZInfoAppInstance
	(*ZInfoDeviceTasks)(nil),             // 47: org.lfedge.eve.info.ZInfoDeviceTasks
	(*ZSimcardInfo)(nil),                 // 48: org.lfedge.eve.info.ZSimcardInfo
	(*ZCellularModuleInfo)(nil),          // 49: org.lfedge.eve.info.ZCellularModuleInfo
	(*ZCellularProvider)(nil),            // 50: org.lfedge.eve.info.ZCellularProvider
	(*StorageDiskState)(nil),             // 51: org.lfedge.eve.info.StorageDiskState
	(*SmartAttr)(nil),                    // 52: org.lfedge.eve.info.SmartAttr
	(*SmartMetric)(nil),                  // 53: org.lfedge.eve.info.SmartMetric
	(*StorageDiskInfo)(nil),              // 54: org.lfedge.eve.info.StorageDiskInfo
	(*StorageChildren)(nil),              // 55: org.lfedge.eve.info.StorageChildren
	(*StorageInfo)(nil),                  // 56: org.lfedge.eve.info.StorageInfo
	(*ZInfoHardware)(nil),                // 57: org.lfedge.eve.info.ZInfoHardware
	(*ZInfoDevice)(nil),                  // 58: org.lfedge.eve.info.ZInfoDevice
	(*OptionalCapabilities)(nil),         // 59: org.lfedge.eve.info.OptionalCapabilities
	(*AttestationInfo)(nil),              // 60: org.lfedge.eve.info.AttestationInfo
	(*SystemAdapterInfo)(nil),            // 61: org.lfedge.eve.info.SystemAdapterInfo
	(*DevicePortStatus)(nil),             // 62: org.lfedge.eve.info.DevicePortStatus
	(*DevicePort)(nil),                   // 63: org.lfedge.eve.info.DevicePort
	(*ProxyStatus)(nil),                  // 64: org.lfedge.eve.info.ProxyStatus
	(*ProxyEntry)(nil),                   // 65: org.lfedge.eve.info.ProxyEntry
	(*WirelessStatus)(nil),               // 66: org.lfedge.eve.info.WirelessStatus
	(*ZCellularStatus)(nil),              // 67: org.lfedge.eve.info.ZCellularStatus
	(*ZInfoDevSW)(nil),                   // 68: org.lfedge.eve.info.ZInfoDevSW
	(*ZInfoStorage)(nil),                 // 69: org.lfedge.eve.info.ZInfoStorage
	(*ZInfoSnapshot)(nil),                // 70: org.lfedge.eve.info.ZInfoSnapshot
	(*ZInfoClusterNode)(nil),             // 71: org.lfedge.eve.info.ZInfoClusterNode
	(*ZInfoApp)(nil),                     // 72: org.lfedge.eve.info.ZInfoApp
	(*ZInfoVpnLinkInfo)(nil),             // 73: org.lfedge.eve.info.ZInfoVpnLinkInfo
	(*ZInfoVpnLink)(nil),                 // 74: org.lfedge.eve.info.ZInfoVpnLink
	(*ZInfoVpnEndPoint)(nil),             // 75: org.lfedge.eve.info.ZInfoVpnEndPoint
	(*ZInfoVpnConn)(nil),                 // 76: org.lfedge.eve.info.ZInfoVpnConn
	(*ZInfoVpn)(nil),                     // 77: org.lfedge.eve.info.ZInfoVpn
	(*ZInfoNetworkInstance)(nil),         // 78: org.lfedge.eve.info.ZInfoNetworkInstance
	(*IPRoute)(nil),                      // 79: org.lfedge.eve.info.IPRoute
	(*UsageInfo)(nil),                    // 80: org.lfedge.eve.info.UsageInfo
	(*VolumeResources)(nil),              // 81: org.lfedge.eve.info.VolumeResources
	(*ZInfoVolume)(nil),                  // 82: org.lfedge.eve.info.ZInfoVolume
	(*ContentResources)(nil),             // 83: org.lfedge.eve.info.ContentResources
	(*ZInfoContentTree)(nil),             // 84: org.lfedge.eve.info.ZInfoContentTree
	(*ZInfoBlob)(nil),                    // 85: org.lfedge.eve.info.ZInfoBlob
	(*ZInfoBlobList)(nil),                // 86: org.lfedge.eve.info.ZInfoBlobList
	(*ZInfoMsg)(nil),                     // 87: org.lfedge.eve.info.ZInfoMsg
	(*Capabilities)(nil),                 // 88: org.lfedge.eve.info.Capabilities
	(*ZInfoAppInstMetaData)(nil),         // 89: org.lfedge.eve.info.ZInfoAppInstMetaData
	(*ZInfoEdgeview)(nil),                // 90: org.lfedge.eve.info.ZInfoEdgeview
	(*ZInfoLocation)(nil),                // 91: org.lfedge.eve.info.ZInfoLocation
	nil,                                  // 92: org.lfedge.eve.info.ZInfoConfigItemStatus.ConfigItemsEntry
	nil,                                  // 93: org.lfedge.eve.info.ZInfoConfigItemStatus.UnknownConfigItemsEntry
	(evecommon.PhyIoType)(0),             // 94: org.lfedge.eve.common.PhyIoType
	(evecommon.PhyIoMemberUsage)(0),      // 95: org.lfedge.eve.common.PhyIoMemberUsage
	(*timestamppb.Timestamp)(nil),        // 96: google.protobuf.Timestamp
	(*evecommon.DiskDescription)(nil),    // 97: org.lfedge.eve.common.DiskDescription
	(evecommon.RadioAccessTechnology)(0), // 98: org.lfedge.eve.common.RadioAccessTechnology
	(*ZInfoPatchEnvelope)(nil),           // 99: org.lfedge.eve.info.ZInfoPatchEnvelope
	(*ZInfoNTPSources)(nil),              // 100: org.lfedge.eve.info.ZInfoNTPSources
}
var file_info_info_proto_depIdxs = []int32{
	0,   // 0: org.lfedge.eve.info.deprecatedMetricItem.type:type_name -> org.lfedge.eve.info.DepMetricItemType
	94,  // 1: org.lfedge.eve.info.ZioBundle.type:type_name -> org.lfedge.eve.common.PhyIoType
	32,  // 2: org.lfedge.eve.info.ZioBundle.ioAddressList:type_name -> org.lfedge.eve.info.IoAddresses
	95,  // 3: org.lfedge.eve.info.ZioBundle.usage:type_name -> org.lfedge.eve.common.PhyIoMemberUsage
	39,  // 4: org.lfedge.eve.info.ZioBundle.err:type_name -> org.lfedge.eve.info.ErrorInfo
	33,  // 5: org.lfedge.eve.info.IoAddresses.vf_info:type_name -> org.lfedge.eve.info.VfPublishedInfo
	37,  // 6: org.lfedge.eve.info.ZInfoNetwork.dns:type_name -> org.lfedge.eve.info.ZInfoDNS
	36,  // 7: org.lfedge.eve.info.ZInfoNetwork.location:type_name -> org.lfedge.eve.info.GeoLoc
	39,  // 8: org.lfedge.eve.info.ZInfoNetwork.networkErr:type_name -> org.lfedge.eve.info.ErrorInfo
	64,  // 9: org.lfedge.eve.info.ZInfoNetwork.proxy:type_name -> org.lfedge.eve.info.ProxyStatus
	2,   // 10: org.lfedge.eve.info.ZInfoSW.state:type_name -> org.lfedge.eve.info.ZSwState
	96,  // 11: org.lfedge.eve.info.ErrorInfo.timestamp:type_name -> google.protobuf.Timestamp
	4,   // 12: org.lfedge.eve.info.ErrorInfo.severity:type_name -> org.lfedge.eve.info.Severity
	40,  // 13: org.lfedge.eve.info.ErrorInfo.entities:type_name -> org.lfedge.eve.info.DeviceEntity
	3,   // 14: org.lfedge.eve.info.DeviceEntity.entity:type_name -> org.lfedge.eve.info.Entity
	6,   // 15: org.lfedge.eve.info.VaultInfo.status:type_name -> org.lfedge.eve.info.DataSecAtRestStatus
	39,  // 16: org.lfedge.eve.info.VaultInfo.vaultErr:type_name -> org.lfedge.eve.info.ErrorInfo
	7,   // 17: org.lfedge.eve.info.VaultInfo.pcrStatus:type_name -> org.lfedge.eve.info.PCRStatus
	6,   // 18: org.lfedge.eve.info.DataSecAtRest.status:type_name -> org.lfedge.eve.info.DataSecAtRestStatus
	41,  // 19: org.lfedge.eve.info.DataSecAtRest.vaultList:type_name -> org.lfedge.eve.info.VaultInfo
	92,  // 20: org.lfedge.eve.info.ZInfoConfigItemStatus.configItems:type_name -> org.lfedge.eve.info.ZInfoConfigItemStatus.ConfigItemsEntry
	93,  // 21: org.lfedge.eve.info.ZInfoConfigItemStatus.unknownConfigItems:type_name -> org.lfedge.eve.info.ZInfoConfigItemStatus.UnknownConfigItemsEntry
	8,   // 22: org.lfedge.eve.info.ZSimcardInfo.type:type_name -> org.lfedge.eve.info.SimType
	9,   // 23: org.lfedge.eve.info.ZCellularModuleInfo.operating_state:type_name -> org.lfedge.eve.info.ZCellularOperatingState
	10,  // 24: org.lfedge.eve.info.ZCellularModuleInfo.control_protocol:type_name -> org.lfedge.eve.info.ZCellularControlProtocol
	97,  // 25: org.lfedge.eve.info.StorageDiskState.disk_name:type_name -> org.lfedge.eve.common.DiskDescription
	12,  // 26: org.lfedge.eve.info.StorageDiskState.status:type_name -> org.lfedge.eve.info.StorageStatus
	52,  // 27: org.lfedge.eve.info.SmartMetric.reallocated_sector_ct:type_name -> org.lfedge.eve.info.SmartAttr
	52,  // 28: org.lfedge.eve.info.SmartMetric.power_on_hours:type_name -> org.lfedge.eve.info.SmartAttr
	52,  // 29: org.lfedge.eve.info.SmartMetric.power_cycle_count:type_name -> org.lfedge.eve.info.SmartAttr
	52,  // 30: org.lfedge.eve.info.SmartMetric.reallocated_event_count:type_name -> org.lfedge.eve.info.SmartAttr
	52,  // 31: org.lfedge.eve.info.SmartMetric.current_pending_sector:type_name -> org.lfedge.eve.info.SmartAttr
	52,  // 32: org.lfedge.eve.info.SmartMetric.temperature:type_name -> org.lfedge.eve.info.SmartAttr
	53,  // 33: org.lfedge.eve.info.StorageDiskInfo.smart_data:type_name -> org.lfedge.eve.info.SmartMetric
	13,  // 34: org.lfedge.eve.info.StorageChildren.current_raid:type_name -> org.lfedge.eve.info.StorageRaidType
	51,  // 35: org.lfedge.eve.info.StorageChildren.disks:type_name -> org.lfedge.eve.info.StorageDiskState
	55,  // 36: org.lfedge.eve.info.StorageChildren.children:type_name -> org.lfedge.eve.info.StorageChildren
	14,  // 37: org.lfedge.eve.info.StorageInfo.storage_type:type_name -> org.lfedge.eve.info.StorageTypeInfo
	13,  // 38: org.lfedge.eve.info.StorageInfo.current_raid:type_name -> org.lfedge.eve.info.StorageRaidType
	12,  // 39: org.lfedge.eve.info.StorageInfo.storage_state:type_name -> org.lfedge.eve.info.StorageStatus
	51,  // 40: org.lfedge.eve.info.StorageInfo.disks:type_name -> org.lfedge.eve.info.StorageDiskState
	55,  // 41: org.lfedge.eve.info.StorageInfo.children:type_name -> org.lfedge.eve.info.StorageChildren
	54,  // 42: org.lfedge.eve.info.ZInfoHardware.disks:type_name -> org.lfedge.eve.info.StorageDiskInfo
	34,  // 43: org.lfedge.eve.info.ZInfoDevice.minfo:type_name -> org.lfedge.eve.info.ZInfoManufacturer
	35,  // 44: org.lfedge.eve.info.ZInfoDevice.network:type_name -> org.lfedge.eve.info.ZInfoNetwork
	31,  // 45: org.lfedge.eve.info.ZInfoDevice.assignableAdapters:type_name -> org.lfedge.eve.info.ZioBundle
	37,  // 46: org.lfedge.eve.info.ZInfoDevice.dns:type_name -> org.lfedge.eve.info.ZInfoDNS
	69,  // 47: org.lfedge.eve.info.ZInfoDevice.storageList:type_name -> org.lfedge.eve.info.ZInfoStorage
	96,  // 48: org.lfedge.eve.info.ZInfoDevice.bootTime:type_name -> google.protobuf.Timestamp
	68,  // 49: org.lfedge.eve.info.ZInfoDevice.swList:type_name -> org.lfedge.eve.info.ZInfoDevSW
	28,  // 50: org.lfedge.eve.info.ZInfoDevice.metricItems:type_name -> org.lfedge.eve.info.deprecatedMetricItem
	96,  // 51: org.lfedge.eve.info.ZInfoDevice.lastRebootTime:type_name -> google.protobuf.Timestamp
	61,  // 52: org.lfedge.eve.info.ZInfoDevice.systemAdapter:type_name -> org.lfedge.eve.info.SystemAdapterInfo
	5,   // 53: org.lfedge.eve.info.ZInfoDevice.HSMStatus:type_name -> org.lfedge.eve.info.HwSecurityModuleStatus
	42,  // 54: org.lfedge.eve.info.ZInfoDevice.dataSecAtRestInfo:type_name -> org.lfedge.eve.info.DataSecAtRest
	43,  // 55: org.lfedge.eve.info.ZInfoDevice.sec_info:type_name -> org.lfedge.eve.info.SecurityInfo
	45,  // 56: org.lfedge.eve.info.ZInfoDevice.configItemStatus:type_name -> org.lfedge.eve.info.ZInfoConfigItemStatus
	46,  // 57: org.lfedge.eve.info.ZInfoDevice.appInstances:type_name -> org.lfedge.eve.info.ZInfoAppInstance
	16,  // 58: org.lfedge.eve.info.ZInfoDevice.last_boot_reason:type_name -> org.lfedge.eve.info.BootReason
	49,  // 59: org.lfedge.eve.info.ZInfoDevice.cell_radios:type_name -> org.lfedge.eve.info.ZCellularModuleInfo
	48,  // 60: org.lfedge.eve.info.ZInfoDevice.sims:type_name -> org.lfedge.eve.info.ZSimcardInfo
	47,  // 61: org.lfedge.eve.info.ZInfoDevice.tasks:type_name -> org.lfedge.eve.info.ZInfoDeviceTasks
	17,  // 62: org.lfedge.eve.info.ZInfoDevice.maintenance_mode_reason:type_name -> org.lfedge.eve.info.MaintenanceModeReason
	88,  // 63: org.lfedge.eve.info.ZInfoDevice.capabilities:type_name -> org.lfedge.eve.info.Capabilities
	11,  // 64: org.lfedge.eve.info.ZInfoDevice.state:type_name -> org.lfedge.eve.info.ZDeviceState
	17,  // 65: org.lfedge.eve.info.ZInfoDevice.maintenance_mode_reasons:type_name -> org.lfedge.eve.info.MaintenanceModeReason
	56,  // 66: org.lfedge.eve.info.ZInfoDevice.storage_info:type_name -> org.lfedge.eve.info.StorageInfo
	60,  // 67: org.lfedge.eve.info.ZInfoDevice.attestation_info:type_name -> org.lfedge.eve.info.AttestationInfo
	15,  // 68: org.lfedge.eve.info.ZInfoDevice.api_capability:type_name -> org.lfedge.eve.info.APICapability
	59,  // 69: org.lfedge.eve.info.ZInfoDevice.optional_capabilities:type_name -> org.lfedge.eve.info.OptionalCapabilities
	18,  // 70: org.lfedge.eve.info.AttestationInfo.state:type_name -> org.lfedge.eve.info.AttestationState
	39,  // 71: org.lfedge.eve.info.AttestationInfo.error:type_name -> org.lfedge.eve.info.ErrorInfo
	62,  // 72: org.lfedge.eve.info.SystemAdapterInfo.status:type_name -> org.lfedge.eve.info.DevicePortStatus
	96,  // 73: org.lfedge.eve.info.DevicePortStatus.timePriority:type_name -> google.protobuf.Timestamp
	96,  // 74: org.lfedge.eve.info.DevicePortStatus.lastFailed:type_name -> google.protobuf.Timestamp
	96,  // 75: org.lfedge.eve.info.DevicePortStatus.lastSucceeded:type_name -> google.protobuf.Timestamp
	63,  // 76: org.lfedge.eve.info.DevicePortStatus.ports:type_name -> org.lfedge.eve.info.DevicePort
	64,  // 77: org.lfedge.eve.info.DevicePort.proxy:type_name -> org.lfedge.eve.info.ProxyStatus
	37,  // 78: org.lfedge.eve.info.DevicePort.dns:type_name -> org.lfedge.eve.info.ZInfoDNS
	36,  // 79: org.lfedge.eve.info.DevicePort.location:type_name -> org.lfedge.eve.info.GeoLoc
	39,  // 80: org.lfedge.eve.info.DevicePort.err:type_name -> org.lfedge.eve.info.ErrorInfo
	95,  // 81: org.lfedge.eve.info.DevicePort.usage:type_name -> org.lfedge.eve.common.PhyIoMemberUsage
	66,  // 82: org.lfedge.eve.info.DevicePort.wireless_status:type_name -> org.lfedge.eve.info.WirelessStatus
	65,  // 83: org.lfedge.eve.info.ProxyStatus.proxies:type_name -> org.lfedge.eve.info.ProxyEntry
	20,  // 84: org.lfedge.eve.info.WirelessStatus.type:type_name -> org.lfedge.eve.info.WirelessType
	67,  // 85: org.lfedge.eve.info.WirelessStatus.cellular:type_name -> org.lfedge.eve.info.ZCellularStatus
	50,  // 86: org.lfedge.eve.info.ZCellularStatus.providers:type_name -> org.lfedge.eve.info.ZCellularProvider
	98,  // 87: org.lfedge.eve.info.ZCellularStatus.current_rats:type_name -> org.lfedge.eve.common.RadioAccessTechnology
	96,  // 88: org.lfedge.eve.info.ZCellularStatus.connected_at:type_name -> google.protobuf.Timestamp
	2,   // 89: org.lfedge.eve.info.ZInfoDevSW.status:type_name -> org.lfedge.eve.info.ZSwState
	39,  // 90: org.lfedge.eve.info.ZInfoDevSW.swErr:type_name -> org.lfedge.eve.info.ErrorInfo
	21,  // 91: org.lfedge.eve.info.ZInfoDevSW.userStatus:type_name -> org.lfedge.eve.info.BaseOsStatus
	22,  // 92: org.lfedge.eve.info.ZInfoDevSW.subStatus:type_name -> org.lfedge.eve.info.BaseOsSubStatus
	96,  // 93: org.lfedge.eve.info.ZInfoSnapshot.create_time:type_name -> google.protobuf.Timestamp
	23,  // 94: org.lfedge.eve.info.ZInfoSnapshot.type:type_name -> org.lfedge.eve.info.SnapshotType
	39,  // 95: org.lfedge.eve.info.ZInfoSnapshot.snap_err:type_name -> org.lfedge.eve.info.ErrorInfo
	24,  // 96: org.lfedge.eve.info.ZInfoClusterNode.node_status:type_name -> org.lfedge.eve.info.ZInfoClusterNodeStatus
	38,  // 97: org.lfedge.eve.info.ZInfoApp.softwareList:type_name -> org.lfedge.eve.info.ZInfoSW
	96,  // 98: org.lfedge.eve.info.ZInfoApp.bootTime:type_name -> google.protobuf.Timestamp
	31,  // 99: org.lfedge.eve.info.ZInfoApp.assignedAdapters:type_name -> org.lfedge.eve.info.ZioBundle
	39,  // 100: org.lfedge.eve.info.ZInfoApp.appErr:type_name -> org.lfedge.eve.info.ErrorInfo
	2,   // 101: org.lfedge.eve.info.ZInfoApp.state:type_name -> org.lfedge.eve.info.ZSwState
	35,  // 102: org.lfedge.eve.info.ZInfoApp.network:type_name -> org.lfedge.eve.info.ZInfoNetwork
	70,  // 103: org.lfedge.eve.info.ZInfoApp.snapshots:type_name -> org.lfedge.eve.info.ZInfoSnapshot
	25,  // 104: org.lfedge.eve.info.ZInfoVpnLink.state:type_name -> org.lfedge.eve.info.ZInfoVpnState
	73,  // 105: org.lfedge.eve.info.ZInfoVpnLink.lInfo:type_name -> org.lfedge.eve.info.ZInfoVpnLinkInfo
	73,  // 106: org.lfedge.eve.info.ZInfoVpnLink.rInfo:type_name -> org.lfedge.eve.info.ZInfoVpnLinkInfo
	25,  // 107: org.lfedge.eve.info.ZInfoVpnConn.state:type_name -> org.lfedge.eve.info.ZInfoVpnState
	75,  // 108: org.lfedge.eve.info.ZInfoVpnConn.lInfo:type_name -> org.lfedge.eve.info.ZInfoVpnEndPoint
	75,  // 109: org.lfedge.eve.info.ZInfoVpnConn.rInfo:type_name -> org.lfedge.eve.info.ZInfoVpnEndPoint
	74,  // 110: org.lfedge.eve.info.ZInfoVpnConn.links:type_name -> org.lfedge.eve.info.ZInfoVpnLink
	76,  // 111: org.lfedge.eve.info.ZInfoVpn.conn:type_name -> org.lfedge.eve.info.ZInfoVpnConn
	96,  // 112: org.lfedge.eve.info.ZInfoNetworkInstance.upTimeStamp:type_name -> google.protobuf.Timestamp
	38,  // 113: org.lfedge.eve.info.ZInfoNetworkInstance.softwareList:type_name -> org.lfedge.eve.info.ZInfoSW
	29,  // 114: org.lfedge.eve.info.ZInfoNetworkInstance.ipAssignments:type_name -> org.lfedge.eve.info.ZmetIPAssignmentEntry
	30,  // 115: org.lfedge.eve.info.ZInfoNetworkInstance.vifs:type_name -> org.lfedge.eve.info.ZmetVifInfo
	31,  // 116: org.lfedge.eve.info.ZInfoNetworkInstance.assignedAdapters:type_name -> org.lfedge.eve.info.ZioBundle
	77,  // 117: org.lfedge.eve.info.ZInfoNetworkInstance.vinfo:type_name -> org.lfedge.eve.info.ZInfoVpn
	39,  // 118: org.lfedge.eve.info.ZInfoNetworkInstance.networkErr:type_name -> org.lfedge.eve.info.ErrorInfo
	26,  // 119: org.lfedge.eve.info.ZInfoNetworkInstance.state:type_name -> org.lfedge.eve.info.ZNetworkInstanceState
	79,  // 120: org.lfedge.eve.info.ZInfoNetworkInstance.ip_routes:type_name -> org.lfedge.eve.info.IPRoute
	96,  // 121: org.lfedge.eve.info.UsageInfo.createTime:type_name -> google.protobuf.Timestamp
	96,  // 122: org.lfedge.eve.info.UsageInfo.lastRefcountChangeTime:type_name -> google.protobuf.Timestamp
	80,  // 123: org.lfedge.eve.info.ZInfoVolume.usage:type_name -> org.lfedge.eve.info.UsageInfo
	81,  // 124: org.lfedge.eve.info.ZInfoVolume.resources:type_name -> org.lfedge.eve.info.VolumeResources
	2,   // 125: org.lfedge.eve.info.ZInfoVolume.state:type_name -> org.lfedge.eve.info.ZSwState
	39,  // 126: org.lfedge.eve.info.ZInfoVolume.volumeErr:type_name -> org.lfedge.eve.info.ErrorInfo
	83,  // 127: org.lfedge.eve.info.ZInfoContentTree.resources:type_name -> org.lfedge.eve.info.ContentResources
	80,  // 128: org.lfedge.eve.info.ZInfoContentTree.usage:type_name -> org.lfedge.eve.info.UsageInfo
	2,   // 129: org.lfedge.eve.info.ZInfoContentTree.state:type_name -> org.lfedge.eve.info.ZSwState
	39,  // 130: org.lfedge.eve.info.ZInfoContentTree.err:type_name -> org.lfedge.eve.info.ErrorInfo
	83,  // 131: org.lfedge.eve.info.ZInfoBlob.resources:type_name -> org.lfedge.eve.info.ContentResources
	80,  // 132: org.lfedge.eve.info.ZInfoBlob.usage:type_name -> org.lfedge.eve.info.UsageInfo
	2,   // 133: org.lfedge.eve.info.ZInfoBlob.state:type_name -> org.lfedge.eve.info.ZSwState
	39,  // 134: org.lfedge.eve.info.ZInfoBlob.err:type_name -> org.lfedge.eve.info.ErrorInfo
	85,  // 135: org.lfedge.eve.info.ZInfoBlobList.blob:type_name -> org.lfedge.eve.info.ZInfoBlob
	1,   // 136: org.lfedge.eve.info.ZInfoMsg.ztype:type_name -> org.lfedge.eve.info.ZInfoTypes
	58,  // 137: org.lfedge.eve.info.ZInfoMsg.dinfo:type_name -> org.lfedge.eve.info.ZInfoDevice
	72,  // 138: org.lfedge.eve.info.ZInfoMsg.ainfo:type_name -> org.lfedge.eve.info.ZInfoApp
	78,  // 139: org.lfedge.eve.info.ZInfoMsg.niinfo:type_name -> org.lfedge.eve.info.ZInfoNetworkInstance
	82,  // 140: org.lfedge.eve.info.ZInfoMsg.vinfo:type_name -> org.lfedge.eve.info.ZInfoVolume
	84,  // 141: org.lfedge.eve.info.ZInfoMsg.cinfo:type_name -> org.lfedge.eve.info.ZInfoContentTree
	86,  // 142: org.lfedge.eve.info.ZInfoMsg.binfo:type_name -> org.lfedge.eve.info.ZInfoBlobList
	89,  // 143: org.lfedge.eve.info.ZInfoMsg.amdinfo:type_name -> org.lfedge.eve.info.ZInfoAppInstMetaData
	90,  // 144: org.lfedge.eve.info.ZInfoMsg.evinfo:type_name -> org.lfedge.eve.info.ZInfoEdgeview
	57,  // 145: org.lfedge.eve.info.ZInfoMsg.hwinfo:type_name -> org.lfedge.eve.info.ZInfoHardware
	91,  // 146: org.lfedge.eve.info.ZInfoMsg.locinfo:type_name -> org.lfedge.eve.info.ZInfoLocation
	99,  // 147: org.lfedge.eve.info.ZInfoMsg.patchInfo:type_name -> org.lfedge.eve.info.ZInfoPatchEnvelope
	71,  // 148: org.lfedge.eve.info.ZInfoMsg.cluster_node:type_name -> org.lfedge.eve.info.ZInfoClusterNode
	100, // 149: org.lfedge.eve.info.ZInfoMsg.ntp_sources:type_name -> org.lfedge.eve.info.ZInfoNTPSources
	96,  // 150: org.lfedge.eve.info.ZInfoMsg.atTimeStamp:type_name -> google.protobuf.Timestamp
	19,  // 151: org.lfedge.eve.info.ZInfoAppInstMetaData.type:type_name -> org.lfedge.eve.info.AppInstMetaDataType
	96,  // 152: org.lfedge.eve.info.ZInfoEdgeview.expire_time:type_name -> google.protobuf.Timestamp
	96,  // 153: org.lfedge.eve.info.ZInfoEdgeview.started_time:type_name -> google.protobuf.Timestamp
	96,  // 154: org.lfedge.eve.info.ZInfoLocation.utc_timestamp:type_name -> google.protobuf.Timestamp
	27,  // 155: org.lfedge.eve.info.ZInfoLocation.horizontal_reliability:type_name -> org.lfedge.eve.info.LocReliability
	27,  // 156: org.lfedge.eve.info.ZInfoLocation.vertical_reliability:type_name -> org.lfedge.eve.info.LocReliability
	44,  // 157: org.lfedge.eve.info.ZInfoConfigItemStatus.ConfigItemsEntry.value:type_name -> org.lfedge.eve.info.ZInfoConfigItem
	44,  // 158: org.lfedge.eve.info.ZInfoConfigItemStatus.UnknownConfigItemsEntry.value:type_name -> org.lfedge.eve.info.ZInfoConfigItem
	159, // [159:159] is the sub-list for method output_type
	159, // [159:159] is the sub-list for method input_type
	159, // [159:159] is the sub-list for extension type_name
	159, // [159:159] is the sub-list for extension extendee
	0,   // [0:159] is the sub-list for field type_name
}

func init() { file_info_info_proto_init() }
func file_info_info_proto_init() {
	if File_info_info_proto != nil {
		return
	}
	file_info_patch_envelope_proto_init()
	file_info_ntpsources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_info_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprecatedMetricItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZmetIPAssignmentEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZmetVifInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZioBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IoAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VfPublishedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoManufacturer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoLoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoDNS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoSW); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSecAtRest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoConfigItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoConfigItemStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoAppInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoDeviceTasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZSimcardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZCellularModuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZCellularProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageDiskState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageDiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageChildren); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoHardware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemAdapterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicePortStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirelessStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZCellularStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoDevSW); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoClusterNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoVpnLinkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoVpnLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoVpnEndPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoVpnConn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoVpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoNetworkInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoContentTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoBlobList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoAppInstMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoEdgeview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_info_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_info_info_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DeprecatedMetricItem_BoolValue)(nil),
		(*DeprecatedMetricItem_Uint32Value)(nil),
		(*DeprecatedMetricItem_Uint64Value)(nil),
		(*DeprecatedMetricItem_FloatValue)(nil),
		(*DeprecatedMetricItem_StringValue)(nil),
	}
	file_info_info_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*ZInfoNetworkInstance_Vinfo)(nil),
	}
	file_info_info_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*ZInfoMsg_Dinfo)(nil),
		(*ZInfoMsg_Ainfo)(nil),
		(*ZInfoMsg_Niinfo)(nil),
		(*ZInfoMsg_Vinfo)(nil),
		(*ZInfoMsg_Cinfo)(nil),
		(*ZInfoMsg_Binfo)(nil),
		(*ZInfoMsg_Amdinfo)(nil),
		(*ZInfoMsg_Evinfo)(nil),
		(*ZInfoMsg_Hwinfo)(nil),
		(*ZInfoMsg_Locinfo)(nil),
		(*ZInfoMsg_PatchInfo)(nil),
		(*ZInfoMsg_ClusterNode)(nil),
		(*ZInfoMsg_NtpSources)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_info_info_proto_rawDesc,
			NumEnums:      28,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_info_info_proto_goTypes,
		DependencyIndexes: file_info_info_proto_depIdxs,
		EnumInfos:         file_info_info_proto_enumTypes,
		MessageInfos:      file_info_info_proto_msgTypes,
	}.Build()
	File_info_info_proto = out.File
	file_info_info_proto_rawDesc = nil
	file_info_info_proto_goTypes = nil
	file_info_info_proto_depIdxs = nil
}
