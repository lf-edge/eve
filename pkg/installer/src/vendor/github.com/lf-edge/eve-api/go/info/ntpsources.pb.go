// Copyright(c) 2024 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: info/ntpsources.proto

package info

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for describing the NTP source state, see chrony client
// sources https://gitlab.com/chrony/chrony/-/blob/master/client.c
// and its output of the command 'sources'.
type NTPSourceState int32

const (
	NTPSourceState_NTP_SOURCE_STATE_UNSPECIFIED NTPSourceState = 0 //
	NTPSourceState_NTP_SOURCE_STATE_SYNC        NTPSourceState = 1 // '*' = current best
	NTPSourceState_NTP_SOURCE_STATE_UNREACH     NTPSourceState = 2 // '?' = unusable
	NTPSourceState_NTP_SOURCE_STATE_FALSETICKER NTPSourceState = 3 // 'x' = may be in error
	NTPSourceState_NTP_SOURCE_STATE_JITTERY     NTPSourceState = 4 // '~' = too variable
	NTPSourceState_NTP_SOURCE_STATE_CANDIDATE   NTPSourceState = 5 // '+' = combined
	NTPSourceState_NTP_SOURCE_STATE_OUTLIER     NTPSourceState = 6 // '-' = not combined
)

// Enum value maps for NTPSourceState.
var (
	NTPSourceState_name = map[int32]string{
		0: "NTP_SOURCE_STATE_UNSPECIFIED",
		1: "NTP_SOURCE_STATE_SYNC",
		2: "NTP_SOURCE_STATE_UNREACH",
		3: "NTP_SOURCE_STATE_FALSETICKER",
		4: "NTP_SOURCE_STATE_JITTERY",
		5: "NTP_SOURCE_STATE_CANDIDATE",
		6: "NTP_SOURCE_STATE_OUTLIER",
	}
	NTPSourceState_value = map[string]int32{
		"NTP_SOURCE_STATE_UNSPECIFIED": 0,
		"NTP_SOURCE_STATE_SYNC":        1,
		"NTP_SOURCE_STATE_UNREACH":     2,
		"NTP_SOURCE_STATE_FALSETICKER": 3,
		"NTP_SOURCE_STATE_JITTERY":     4,
		"NTP_SOURCE_STATE_CANDIDATE":   5,
		"NTP_SOURCE_STATE_OUTLIER":     6,
	}
)

func (x NTPSourceState) Enum() *NTPSourceState {
	p := new(NTPSourceState)
	*p = x
	return p
}

func (x NTPSourceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NTPSourceState) Descriptor() protoreflect.EnumDescriptor {
	return file_info_ntpsources_proto_enumTypes[0].Descriptor()
}

func (NTPSourceState) Type() protoreflect.EnumType {
	return &file_info_ntpsources_proto_enumTypes[0]
}

func (x NTPSourceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NTPSourceState.Descriptor instead.
func (NTPSourceState) EnumDescriptor() ([]byte, []int) {
	return file_info_ntpsources_proto_rawDescGZIP(), []int{0}
}

// Enum for describing the NTP source mode, see chrony client
// https://gitlab.com/chrony/chrony/-/blob/master/client.c
// and its output of the command 'sources'.
type NTPSourceMode int32

const (
	NTPSourceMode_NTP_SOURCE_MODE_UNSPECIFIED NTPSourceMode = 0 //
	NTPSourceMode_NTP_SOURCE_MODE_CLIENT      NTPSourceMode = 1 // '^' = server
	NTPSourceMode_NTP_SOURCE_MODE_PEER        NTPSourceMode = 2 // '=' = peer
	NTPSourceMode_NTP_SOURCE_MODE_REF         NTPSourceMode = 3 // '#' = local clock
)

// Enum value maps for NTPSourceMode.
var (
	NTPSourceMode_name = map[int32]string{
		0: "NTP_SOURCE_MODE_UNSPECIFIED",
		1: "NTP_SOURCE_MODE_CLIENT",
		2: "NTP_SOURCE_MODE_PEER",
		3: "NTP_SOURCE_MODE_REF",
	}
	NTPSourceMode_value = map[string]int32{
		"NTP_SOURCE_MODE_UNSPECIFIED": 0,
		"NTP_SOURCE_MODE_CLIENT":      1,
		"NTP_SOURCE_MODE_PEER":        2,
		"NTP_SOURCE_MODE_REF":         3,
	}
)

func (x NTPSourceMode) Enum() *NTPSourceMode {
	p := new(NTPSourceMode)
	*p = x
	return p
}

func (x NTPSourceMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NTPSourceMode) Descriptor() protoreflect.EnumDescriptor {
	return file_info_ntpsources_proto_enumTypes[1].Descriptor()
}

func (NTPSourceMode) Type() protoreflect.EnumType {
	return &file_info_ntpsources_proto_enumTypes[1]
}

func (x NTPSourceMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NTPSourceMode.Descriptor instead.
func (NTPSourceMode) EnumDescriptor() ([]byte, []int) {
	return file_info_ntpsources_proto_rawDescGZIP(), []int{1}
}

// Flags from RFC 5905 + defined by chrony
type NTPSourceBitmap int32

const (
	NTPSourceBitmap_NTP_SOURCE_BITMAP_UNSPECIFIED          NTPSourceBitmap = 0
	NTPSourceBitmap_NTP_SOURCE_BITMAP_PKT_DUP              NTPSourceBitmap = 1
	NTPSourceBitmap_NTP_SOURCE_BITMAP_PKT_BOGUS            NTPSourceBitmap = 2
	NTPSourceBitmap_NTP_SOURCE_BITMAP_PKT_INVALID          NTPSourceBitmap = 4
	NTPSourceBitmap_NTP_SOURCE_BITMAP_PKT_AUTH             NTPSourceBitmap = 8
	NTPSourceBitmap_NTP_SOURCE_BITMAP_PKT_STRATUM          NTPSourceBitmap = 16
	NTPSourceBitmap_NTP_SOURCE_BITMAP_PKT_HEADER           NTPSourceBitmap = 32
	NTPSourceBitmap_NTP_SOURCE_BITMAP_TST_MAX_DELAY        NTPSourceBitmap = 64
	NTPSourceBitmap_NTP_SOURCE_BITMAP_TST_DELAY_RATIO      NTPSourceBitmap = 128
	NTPSourceBitmap_NTP_SOURCE_BITMAP_TST_DELAY_DEV_RATION NTPSourceBitmap = 256
	NTPSourceBitmap_NTP_SOURCE_BITMAP_TST_SYNC_LOOP        NTPSourceBitmap = 512
)

// Enum value maps for NTPSourceBitmap.
var (
	NTPSourceBitmap_name = map[int32]string{
		0:   "NTP_SOURCE_BITMAP_UNSPECIFIED",
		1:   "NTP_SOURCE_BITMAP_PKT_DUP",
		2:   "NTP_SOURCE_BITMAP_PKT_BOGUS",
		4:   "NTP_SOURCE_BITMAP_PKT_INVALID",
		8:   "NTP_SOURCE_BITMAP_PKT_AUTH",
		16:  "NTP_SOURCE_BITMAP_PKT_STRATUM",
		32:  "NTP_SOURCE_BITMAP_PKT_HEADER",
		64:  "NTP_SOURCE_BITMAP_TST_MAX_DELAY",
		128: "NTP_SOURCE_BITMAP_TST_DELAY_RATIO",
		256: "NTP_SOURCE_BITMAP_TST_DELAY_DEV_RATION",
		512: "NTP_SOURCE_BITMAP_TST_SYNC_LOOP",
	}
	NTPSourceBitmap_value = map[string]int32{
		"NTP_SOURCE_BITMAP_UNSPECIFIED":          0,
		"NTP_SOURCE_BITMAP_PKT_DUP":              1,
		"NTP_SOURCE_BITMAP_PKT_BOGUS":            2,
		"NTP_SOURCE_BITMAP_PKT_INVALID":          4,
		"NTP_SOURCE_BITMAP_PKT_AUTH":             8,
		"NTP_SOURCE_BITMAP_PKT_STRATUM":          16,
		"NTP_SOURCE_BITMAP_PKT_HEADER":           32,
		"NTP_SOURCE_BITMAP_TST_MAX_DELAY":        64,
		"NTP_SOURCE_BITMAP_TST_DELAY_RATIO":      128,
		"NTP_SOURCE_BITMAP_TST_DELAY_DEV_RATION": 256,
		"NTP_SOURCE_BITMAP_TST_SYNC_LOOP":        512,
	}
)

func (x NTPSourceBitmap) Enum() *NTPSourceBitmap {
	p := new(NTPSourceBitmap)
	*p = x
	return p
}

func (x NTPSourceBitmap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NTPSourceBitmap) Descriptor() protoreflect.EnumDescriptor {
	return file_info_ntpsources_proto_enumTypes[2].Descriptor()
}

func (NTPSourceBitmap) Type() protoreflect.EnumType {
	return &file_info_ntpsources_proto_enumTypes[2]
}

func (x NTPSourceBitmap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NTPSourceBitmap.Descriptor instead.
func (NTPSourceBitmap) EnumDescriptor() ([]byte, []int) {
	return file_info_ntpsources_proto_rawDescGZIP(), []int{2}
}

// As described in http://doc.ntp.org/current-stable/ntpq.html
type NTPSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authenticated bool                   `protobuf:"varint,1,opt,name=authenticated,proto3" json:"authenticated,omitempty"`
	Reachable     bool                   `protobuf:"varint,2,opt,name=reachable,proto3" json:"reachable,omitempty"` // (reachability == 0xff), i.e. 8 attempts
	Reachability  uint32                 `protobuf:"varint,3,opt,name=reachability,proto3" json:"reachability,omitempty"`
	State         NTPSourceState         `protobuf:"varint,4,opt,name=state,proto3,enum=org.lfedge.eve.info.NTPSourceState" json:"state,omitempty"`
	Mode          NTPSourceMode          `protobuf:"varint,5,opt,name=mode,proto3,enum=org.lfedge.eve.info.NTPSourceMode" json:"mode,omitempty"`
	Hostname      string                 `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	SrcAddr       string                 `protobuf:"bytes,7,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	SrcPort       uint32                 `protobuf:"varint,8,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstAddr       string                 `protobuf:"bytes,9,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	DstPort       uint32                 `protobuf:"varint,10,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	Leap          uint32                 `protobuf:"varint,11,opt,name=leap,proto3" json:"leap,omitempty"`
	Stratum       uint32                 `protobuf:"varint,12,opt,name=stratum,proto3" json:"stratum,omitempty"`
	Precision     uint32                 `protobuf:"varint,13,opt,name=precision,proto3" json:"precision,omitempty"`
	RefId         string                 `protobuf:"bytes,14,opt,name=ref_id,json=refId,proto3" json:"ref_id,omitempty"`
	RefTime       *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=ref_time,json=refTime,proto3" json:"ref_time,omitempty"`
	Poll          int32                  `protobuf:"zigzag32,16,opt,name=poll,proto3" json:"poll,omitempty"`
	Flags         uint32                 `protobuf:"varint,17,opt,name=flags,proto3" json:"flags,omitempty"` // bitmap from NTPSourceBitmap
	Offset        float64                `protobuf:"fixed64,18,opt,name=offset,proto3" json:"offset,omitempty"`
	Delay         float64                `protobuf:"fixed64,19,opt,name=delay,proto3" json:"delay,omitempty"`
	Dispersion    float64                `protobuf:"fixed64,20,opt,name=dispersion,proto3" json:"dispersion,omitempty"`
	Jitter        float64                `protobuf:"fixed64,21,opt,name=jitter,proto3" json:"jitter,omitempty"`
	RootDelay     float64                `protobuf:"fixed64,22,opt,name=root_delay,json=rootDelay,proto3" json:"root_delay,omitempty"`
	RootDisp      float64                `protobuf:"fixed64,23,opt,name=root_disp,json=rootDisp,proto3" json:"root_disp,omitempty"`
}

func (x *NTPSource) Reset() {
	*x = NTPSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_ntpsources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NTPSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NTPSource) ProtoMessage() {}

func (x *NTPSource) ProtoReflect() protoreflect.Message {
	mi := &file_info_ntpsources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NTPSource.ProtoReflect.Descriptor instead.
func (*NTPSource) Descriptor() ([]byte, []int) {
	return file_info_ntpsources_proto_rawDescGZIP(), []int{0}
}

func (x *NTPSource) GetAuthenticated() bool {
	if x != nil {
		return x.Authenticated
	}
	return false
}

func (x *NTPSource) GetReachable() bool {
	if x != nil {
		return x.Reachable
	}
	return false
}

func (x *NTPSource) GetReachability() uint32 {
	if x != nil {
		return x.Reachability
	}
	return 0
}

func (x *NTPSource) GetState() NTPSourceState {
	if x != nil {
		return x.State
	}
	return NTPSourceState_NTP_SOURCE_STATE_UNSPECIFIED
}

func (x *NTPSource) GetMode() NTPSourceMode {
	if x != nil {
		return x.Mode
	}
	return NTPSourceMode_NTP_SOURCE_MODE_UNSPECIFIED
}

func (x *NTPSource) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NTPSource) GetSrcAddr() string {
	if x != nil {
		return x.SrcAddr
	}
	return ""
}

func (x *NTPSource) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *NTPSource) GetDstAddr() string {
	if x != nil {
		return x.DstAddr
	}
	return ""
}

func (x *NTPSource) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *NTPSource) GetLeap() uint32 {
	if x != nil {
		return x.Leap
	}
	return 0
}

func (x *NTPSource) GetStratum() uint32 {
	if x != nil {
		return x.Stratum
	}
	return 0
}

func (x *NTPSource) GetPrecision() uint32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *NTPSource) GetRefId() string {
	if x != nil {
		return x.RefId
	}
	return ""
}

func (x *NTPSource) GetRefTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RefTime
	}
	return nil
}

func (x *NTPSource) GetPoll() int32 {
	if x != nil {
		return x.Poll
	}
	return 0
}

func (x *NTPSource) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *NTPSource) GetOffset() float64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *NTPSource) GetDelay() float64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *NTPSource) GetDispersion() float64 {
	if x != nil {
		return x.Dispersion
	}
	return 0
}

func (x *NTPSource) GetJitter() float64 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

func (x *NTPSource) GetRootDelay() float64 {
	if x != nil {
		return x.RootDelay
	}
	return 0
}

func (x *NTPSource) GetRootDisp() float64 {
	if x != nil {
		return x.RootDisp
	}
	return 0
}

type ZInfoNTPSources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources []*NTPSource `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *ZInfoNTPSources) Reset() {
	*x = ZInfoNTPSources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_ntpsources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZInfoNTPSources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZInfoNTPSources) ProtoMessage() {}

func (x *ZInfoNTPSources) ProtoReflect() protoreflect.Message {
	mi := &file_info_ntpsources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZInfoNTPSources.ProtoReflect.Descriptor instead.
func (*ZInfoNTPSources) Descriptor() ([]byte, []int) {
	return file_info_ntpsources_proto_rawDescGZIP(), []int{1}
}

func (x *ZInfoNTPSources) GetSources() []*NTPSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

var File_info_ntpsources_proto protoreflect.FileDescriptor

var file_info_ntpsources_proto_rawDesc = []byte{
	0x0a, 0x15, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x6e, 0x74, 0x70, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x05,
	0x0a, 0x09, 0x4e, 0x54, 0x50, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x54, 0x50, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x4e, 0x54, 0x50, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x65, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x65,
	0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x72, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x72, 0x65, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6c, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x6f,
	0x6f, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x44, 0x69, 0x73, 0x70, 0x22, 0x4b, 0x0a, 0x0f, 0x5a, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x54, 0x50,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c,
	0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x4e,
	0x54, 0x50, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2a, 0xe9, 0x01, 0x0a, 0x0e, 0x4e, 0x54, 0x50, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4a, 0x49, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12,
	0x1e, 0x0a, 0x1a, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12,
	0x1c, 0x0a, 0x18, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x4c, 0x49, 0x45, 0x52, 0x10, 0x06, 0x2a, 0x7f, 0x0a,
	0x0d, 0x4e, 0x54, 0x50, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4e,
	0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50,
	0x45, 0x45, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x10, 0x03, 0x2a, 0x9c,
	0x03, 0x0a, 0x0f, 0x4e, 0x54, 0x50, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x4b, 0x54, 0x5f, 0x44,
	0x55, 0x50, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x4b, 0x54, 0x5f, 0x42, 0x4f,
	0x47, 0x55, 0x53, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x4b, 0x54, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x54, 0x50, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x4b,
	0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x54, 0x50, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x4b,
	0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x55, 0x4d, 0x10, 0x10, 0x12, 0x20, 0x0a, 0x1c, 0x4e,
	0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50,
	0x5f, 0x50, 0x4b, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x20, 0x12, 0x23, 0x0a,
	0x1f, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d,
	0x41, 0x50, 0x5f, 0x54, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59,
	0x10, 0x40, 0x12, 0x26, 0x0a, 0x21, 0x4e, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x80, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x4e, 0x54,
	0x50, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f,
	0x54, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x44, 0x45, 0x56, 0x5f, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x80, 0x02, 0x12, 0x24, 0x0a, 0x1f, 0x4e, 0x54, 0x50, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x53, 0x54,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x80, 0x04, 0x42, 0x39, 0x0a,
	0x13, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6c, 0x66, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_info_ntpsources_proto_rawDescOnce sync.Once
	file_info_ntpsources_proto_rawDescData = file_info_ntpsources_proto_rawDesc
)

func file_info_ntpsources_proto_rawDescGZIP() []byte {
	file_info_ntpsources_proto_rawDescOnce.Do(func() {
		file_info_ntpsources_proto_rawDescData = protoimpl.X.CompressGZIP(file_info_ntpsources_proto_rawDescData)
	})
	return file_info_ntpsources_proto_rawDescData
}

var file_info_ntpsources_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_info_ntpsources_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_info_ntpsources_proto_goTypes = []interface{}{
	(NTPSourceState)(0),           // 0: org.lfedge.eve.info.NTPSourceState
	(NTPSourceMode)(0),            // 1: org.lfedge.eve.info.NTPSourceMode
	(NTPSourceBitmap)(0),          // 2: org.lfedge.eve.info.NTPSourceBitmap
	(*NTPSource)(nil),             // 3: org.lfedge.eve.info.NTPSource
	(*ZInfoNTPSources)(nil),       // 4: org.lfedge.eve.info.ZInfoNTPSources
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_info_ntpsources_proto_depIdxs = []int32{
	0, // 0: org.lfedge.eve.info.NTPSource.state:type_name -> org.lfedge.eve.info.NTPSourceState
	1, // 1: org.lfedge.eve.info.NTPSource.mode:type_name -> org.lfedge.eve.info.NTPSourceMode
	5, // 2: org.lfedge.eve.info.NTPSource.ref_time:type_name -> google.protobuf.Timestamp
	3, // 3: org.lfedge.eve.info.ZInfoNTPSources.sources:type_name -> org.lfedge.eve.info.NTPSource
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_info_ntpsources_proto_init() }
func file_info_ntpsources_proto_init() {
	if File_info_ntpsources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_info_ntpsources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NTPSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_ntpsources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZInfoNTPSources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_info_ntpsources_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_info_ntpsources_proto_goTypes,
		DependencyIndexes: file_info_ntpsources_proto_depIdxs,
		EnumInfos:         file_info_ntpsources_proto_enumTypes,
		MessageInfos:      file_info_ntpsources_proto_msgTypes,
	}.Build()
	File_info_ntpsources_proto = out.File
	file_info_ntpsources_proto_rawDesc = nil
	file_info_ntpsources_proto_goTypes = nil
	file_info_ntpsources_proto_depIdxs = nil
}
