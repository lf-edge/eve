// Copyright(c) 2017-2020 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: config/appconfig.proto

package config

import (
	evecommon "github.com/lf-edge/eve-api/go/evecommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of cloud-init data to provide to application
type MetaDataType int32

const (
	MetaDataType_MetaDataDrive          MetaDataType = 0
	MetaDataType_MetaDataNone           MetaDataType = 1 // Do not provide metadata
	MetaDataType_MetaDataOpenStack      MetaDataType = 2
	MetaDataType_MetaDataDriveMultipart MetaDataType = 3 // Process multipart MIME for application
)

// Enum value maps for MetaDataType.
var (
	MetaDataType_name = map[int32]string{
		0: "MetaDataDrive",
		1: "MetaDataNone",
		2: "MetaDataOpenStack",
		3: "MetaDataDriveMultipart",
	}
	MetaDataType_value = map[string]int32{
		"MetaDataDrive":          0,
		"MetaDataNone":           1,
		"MetaDataOpenStack":      2,
		"MetaDataDriveMultipart": 3,
	}
)

func (x MetaDataType) Enum() *MetaDataType {
	p := new(MetaDataType)
	*p = x
	return p
}

func (x MetaDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetaDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_appconfig_proto_enumTypes[0].Descriptor()
}

func (MetaDataType) Type() protoreflect.EnumType {
	return &file_config_appconfig_proto_enumTypes[0]
}

func (x MetaDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetaDataType.Descriptor instead.
func (MetaDataType) EnumDescriptor() ([]byte, []int) {
	return file_config_appconfig_proto_rawDescGZIP(), []int{0}
}

// Type of the snapshot creation trigger
type SnapshotType int32

const (
	SnapshotType_SNAPSHOT_TYPE_UNSPECIFIED SnapshotType = 0
	SnapshotType_SNAPSHOT_TYPE_APP_UPDATE  SnapshotType = 1 // Snapshot created as a result of an application update
)

// Enum value maps for SnapshotType.
var (
	SnapshotType_name = map[int32]string{
		0: "SNAPSHOT_TYPE_UNSPECIFIED",
		1: "SNAPSHOT_TYPE_APP_UPDATE",
	}
	SnapshotType_value = map[string]int32{
		"SNAPSHOT_TYPE_UNSPECIFIED": 0,
		"SNAPSHOT_TYPE_APP_UPDATE":  1,
	}
)

func (x SnapshotType) Enum() *SnapshotType {
	p := new(SnapshotType)
	*p = x
	return p
}

func (x SnapshotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SnapshotType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_appconfig_proto_enumTypes[1].Descriptor()
}

func (SnapshotType) Type() protoreflect.EnumType {
	return &file_config_appconfig_proto_enumTypes[1]
}

func (x SnapshotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SnapshotType.Descriptor instead.
func (SnapshotType) EnumDescriptor() ([]byte, []int) {
	return file_config_appconfig_proto_rawDescGZIP(), []int{1}
}

type InstanceOpsCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counter uint32 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	OpsTime string `protobuf:"bytes,4,opt,name=opsTime,proto3" json:"opsTime,omitempty"` // Not currently used
}

func (x *InstanceOpsCmd) Reset() {
	*x = InstanceOpsCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_appconfig_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceOpsCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceOpsCmd) ProtoMessage() {}

func (x *InstanceOpsCmd) ProtoReflect() protoreflect.Message {
	mi := &file_config_appconfig_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceOpsCmd.ProtoReflect.Descriptor instead.
func (*InstanceOpsCmd) Descriptor() ([]byte, []int) {
	return file_config_appconfig_proto_rawDescGZIP(), []int{0}
}

func (x *InstanceOpsCmd) GetCounter() uint32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *InstanceOpsCmd) GetOpsTime() string {
	if x != nil {
		return x.OpsTime
	}
	return ""
}

// A descriptor of the snapshot instance
type SnapshotDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the snapshot.
	// The format of the ID is a standard UUIDv4.
	// Should be unique within the app instance. Generated by the Controller in
	// the case the snapshot creation is requested by the Controller, or by EVE
	// in the case the snapshot creation is triggered locally.
	// Corresponds to the ZInfoApp.snapshots[].id field (see the `info.proto`
	// file).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// type of the snapshot creation trigger.
	Type SnapshotType `protobuf:"varint,2,opt,name=type,proto3,enum=org.lfedge.eve.config.SnapshotType" json:"type,omitempty"`
}

func (x *SnapshotDesc) Reset() {
	*x = SnapshotDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_appconfig_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotDesc) ProtoMessage() {}

func (x *SnapshotDesc) ProtoReflect() protoreflect.Message {
	mi := &file_config_appconfig_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotDesc.ProtoReflect.Descriptor instead.
func (*SnapshotDesc) Descriptor() ([]byte, []int) {
	return file_config_appconfig_proto_rawDescGZIP(), []int{1}
}

func (x *SnapshotDesc) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SnapshotDesc) GetType() SnapshotType {
	if x != nil {
		return x.Type
	}
	return SnapshotType_SNAPSHOT_TYPE_UNSPECIFIED
}

// The snapshot information for an Application Instance
type SnapshotConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// active_snapshot is the id of the snapshot which is expected to be used by
	// the application.
	// It may be empty if no snapshot expected to be used.
	ActiveSnapshot string `protobuf:"bytes,1,opt,name=active_snapshot,json=activeSnapshot,proto3" json:"active_snapshot,omitempty"`
	// rollback_cmd is used to trigger a rollback to the snapshot with the
	// active_snapshot id.
	// The counter inside the InstanceOpsCmd is incremented when a snapshot is
	// used for a rollback. It should not be decreased.
	// The counter's semantics is the same as the one used in the restart/purge
	// commands. It's necessary for the cases, when the state of the device is
	// behind the controller because it hasn't yet managed to fetch the latest
	// declarative statement. Only increasing the counter will trigger the
	// rollback.
	RollbackCmd *InstanceOpsCmd `protobuf:"bytes,2,opt,name=rollback_cmd,json=rollbackCmd,proto3" json:"rollback_cmd,omitempty"`
	// max_snapshots is the maximum number of snapshots that can be stored for the
	// application instance.
	// If the number of snapshots exceeds the max_snapshots, the oldest snapshot
	// will be deleted. It's so even if the oldest snapshot is the active one.
	// As an example, let's consider the following scenario:
	// The value of max_snapshots is 1. Then a snapshot is created. VM continues
	// working. Then a rollback to the snapshot created earlier is requested, so
	// the first snapshot becomes active. EVE performs the rollback. Then the
	// controller requests a new snapshot be created. EVE is configured to store
	// only 1 snapshot, hence the first one should be deleted.
	MaxSnapshots uint32 `protobuf:"varint,3,opt,name=max_snapshots,json=maxSnapshots,proto3" json:"max_snapshots,omitempty"`
	// snapshots is the list of snapshots of the application instance.
	// It is used to synchronize the list of snapshots between the controller and
	// the device. This can be used to provide an id of a new snapshot or to
	// delete an existing snapshot.
	// To provide a new snapshot id, the controller should send a message with
	// the new snapshot id in the snapshots list. The id is generated by
	// Controller in this case. (It can be also generated by EVE, if the snapshot
	// creation is triggered locally. In this case the ID will be returned in the
	// ZInfoApp.snapshots[].id field, see the `info.proto` file).
	// Worth noting that the snapshot creation is not triggered by the appearance
	// of the snapshot id in the available_snapshots list. The snapshot creation
	// will be triggered by the behaviour defined in the snapshot type field.
	// To delete a snapshot, the controller should send a message that does not
	// contain the snapshot id in the available_snapshots list. The device will
	// delete the snapshot with the absent id.
	Snapshots []*SnapshotDesc `protobuf:"bytes,4,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (x *SnapshotConfig) Reset() {
	*x = SnapshotConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_appconfig_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotConfig) ProtoMessage() {}

func (x *SnapshotConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_appconfig_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotConfig.ProtoReflect.Descriptor instead.
func (*SnapshotConfig) Descriptor() ([]byte, []int) {
	return file_config_appconfig_proto_rawDescGZIP(), []int{2}
}

func (x *SnapshotConfig) GetActiveSnapshot() string {
	if x != nil {
		return x.ActiveSnapshot
	}
	return ""
}

func (x *SnapshotConfig) GetRollbackCmd() *InstanceOpsCmd {
	if x != nil {
		return x.RollbackCmd
	}
	return nil
}

func (x *SnapshotConfig) GetMaxSnapshots() uint32 {
	if x != nil {
		return x.MaxSnapshots
	}
	return 0
}

func (x *SnapshotConfig) GetSnapshots() []*SnapshotDesc {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

// The complete configuration for an Application Instance
// When changing key fields such as the drives/volumeRefs or the number
// of interfaces, the controller is required to issue a purge command i.e.,
// increase the purge counter. Otherwise there will be an error (The controller
// can also issue a purge command to re-construct the content of the first
// drive/volumeRef without any changes.)
// Some changes such as ACL changes in the interfaces do not require a restart,
// but all other changes (such as fixedresources and adapters) require a
// restart command i.e., an increase to the restart counter. The restart counter
// can also be increased to cause an application instance restart without
// any other change to the application instance.
type AppInstanceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuidandversion *UUIDandVersion `protobuf:"bytes,1,opt,name=uuidandversion,proto3" json:"uuidandversion,omitempty"`
	Displayname    string          `protobuf:"bytes,2,opt,name=displayname,proto3" json:"displayname,omitempty"` // User-friendly name
	Fixedresources *VmConfig       `protobuf:"bytes,3,opt,name=fixedresources,proto3" json:"fixedresources,omitempty"`
	// VolumeRefs, if supported by EVE, will supersede drives. Drives still
	// exist for backward compatibility.
	// Drives will be deprecated in the future.
	// The order here is critical because they are presented to the VM or
	// container in the order they are listed, e.g., the first VM image
	// will be the root disk.
	Drives []*Drive `protobuf:"bytes,4,rep,name=drives,proto3" json:"drives,omitempty"`
	// Set activate to start the application instance; clear it to stop it.
	Activate bool `protobuf:"varint,5,opt,name=activate,proto3" json:"activate,omitempty"`
	// NetworkAdapter are virtual adapters assigned to the application
	// The order here is critical because they are presented to the VM or
	// container in the order they are listed, e.g., the first NetworkAdapter
	// will appear in a Linux VM as eth0. Also, the MAC address is determined
	// based on the order in the list.
	Interfaces []*NetworkAdapter `protobuf:"bytes,6,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	// Physical adapters such as eth1 or USB controllers and GPUs assigned
	// to the application instance.
	// The Name in Adapter should be set to PhysicalIO.assigngrp
	Adapters []*Adapter `protobuf:"bytes,7,rep,name=adapters,proto3" json:"adapters,omitempty"`
	// The device behavior for a restart command (if counter increased)
	// is to restart the application instance
	// Increasing this multiple times does not imply the application instance
	// will restart more than once.
	// EVE can assume that the adapters did not change.
	Restart *InstanceOpsCmd `protobuf:"bytes,9,opt,name=restart,proto3" json:"restart,omitempty"`
	// The EVE behavior for a purge command is to restart the application instance
	// with the first drive/volumeRef recreated from its origin.
	Purge *InstanceOpsCmd `protobuf:"bytes,10,opt,name=purge,proto3" json:"purge,omitempty"`
	// App Instance initialization configuration data provided by user
	// This will be used as "user-data" in cloud-init
	// Empty string will indicate that cloud-init is not required
	// It is also used to carry environment variables for containers.
	// XXX will be deprecated and replaced by the cipherData below.
	UserData string `protobuf:"bytes,11,opt,name=userData,proto3" json:"userData,omitempty"`
	// Config flag if the app-instance should be made accessible
	// through a remote console session established by the device.
	RemoteConsole bool `protobuf:"varint,12,opt,name=remoteConsole,proto3" json:"remoteConsole,omitempty"`
	// contains the encrypted userdata
	CipherData *evecommon.CipherBlock `protobuf:"bytes,13,opt,name=cipherData,proto3" json:"cipherData,omitempty"`
	// The static IP address assigned on the NetworkAdapter which App Container
	// stats collection uses. If the 'collectStatsIPAddr' is not empty and valid,
	// it enables the container stats collection for this App.
	// During App instance creation, after user enables the collection of stats
	// from App, cloud needs to make sure at least one 'Local' type of Network-Instance
	// is assigned to the App interface, and based on the subnet of the NI, statically
	// assign an IP address on the same subnet, e.g. 10.1.0.100
	CollectStatsIPAddr string `protobuf:"bytes,15,opt,name=collectStatsIPAddr,proto3" json:"collectStatsIPAddr,omitempty"`
	// The volumes to be attached to the app-instance.
	// The order here is critical because they are presented to the VM or
	// container in the order they are listed, e.g., the first VM image
	// will be the root disk.
	// Note that since the name volumeRef was used before and deprecated
	// python protobuf seems to require that we use a different name.
	VolumeRefList []*VolumeRef `protobuf:"bytes,16,rep,name=volumeRefList,proto3" json:"volumeRefList,omitempty"`
	// metadata type to use for app if provided inside userData
	MetaDataType MetaDataType `protobuf:"varint,17,opt,name=metaDataType,proto3,enum=org.lfedge.eve.config.MetaDataType" json:"metaDataType,omitempty"`
	// profile_list is a set of strings which can be used to control which sets
	// of applications are run. Combined with the activate flag above.
	// If the profile list is empty it means wildcard; application will
	// be started independent of the global or local profile specified for the
	// device.
	ProfileList []string `protobuf:"bytes,18,rep,name=profile_list,json=profileList,proto3" json:"profile_list,omitempty"`
	// start_delay_in_seconds - Applicable only when EVE boots up fresh and starts
	// applications for the first time after boot up. This is the amount of time that
	// EVE waits (after boot finish) before starting each application.
	// Default value 0 -> start application immediately.
	// Non-Zero value -> After EVE is ready to start application instance, wait for the
	// given amount of time before starting the respective application instance.
	StartDelayInSeconds uint32 `protobuf:"varint,19,opt,name=start_delay_in_seconds,json=startDelayInSeconds,proto3" json:"start_delay_in_seconds,omitempty"`
	// service - run app instance as a service container in the host/dom0
	// will override default capabilities with configuration
	// defined in org.mobyproject.config label of image provided by linuxkit
	Service bool `protobuf:"varint,20,opt,name=service,proto3" json:"service,omitempty"`
	// All changes to the cloud-init config are tracked using this version field -
	// once the version is changed cloud-init tool restarts in a guest.
	CloudInitVersion uint32 `protobuf:"varint,21,opt,name=cloud_init_version,json=cloudInitVersion,proto3" json:"cloud_init_version,omitempty"`
	// SnapshotConfig is used to track the snapshots of the app instance
	Snapshot *SnapshotConfig `protobuf:"bytes,22,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	// PatchEnvelopeRef is used to track all patch envelopes used by the app instance
	PatchRef *PatchEnvelopeRef `protobuf:"bytes,23,opt,name=patchRef,proto3" json:"patchRef,omitempty"`
	// This edge-node UUID for the Designate Node for the Application
	DesignatedNodeId string `protobuf:"bytes,26,opt,name=designated_node_id,json=designatedNodeId,proto3" json:"designated_node_id,omitempty"`
}

func (x *AppInstanceConfig) Reset() {
	*x = AppInstanceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_appconfig_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppInstanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInstanceConfig) ProtoMessage() {}

func (x *AppInstanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_appconfig_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInstanceConfig.ProtoReflect.Descriptor instead.
func (*AppInstanceConfig) Descriptor() ([]byte, []int) {
	return file_config_appconfig_proto_rawDescGZIP(), []int{3}
}

func (x *AppInstanceConfig) GetUuidandversion() *UUIDandVersion {
	if x != nil {
		return x.Uuidandversion
	}
	return nil
}

func (x *AppInstanceConfig) GetDisplayname() string {
	if x != nil {
		return x.Displayname
	}
	return ""
}

func (x *AppInstanceConfig) GetFixedresources() *VmConfig {
	if x != nil {
		return x.Fixedresources
	}
	return nil
}

func (x *AppInstanceConfig) GetDrives() []*Drive {
	if x != nil {
		return x.Drives
	}
	return nil
}

func (x *AppInstanceConfig) GetActivate() bool {
	if x != nil {
		return x.Activate
	}
	return false
}

func (x *AppInstanceConfig) GetInterfaces() []*NetworkAdapter {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *AppInstanceConfig) GetAdapters() []*Adapter {
	if x != nil {
		return x.Adapters
	}
	return nil
}

func (x *AppInstanceConfig) GetRestart() *InstanceOpsCmd {
	if x != nil {
		return x.Restart
	}
	return nil
}

func (x *AppInstanceConfig) GetPurge() *InstanceOpsCmd {
	if x != nil {
		return x.Purge
	}
	return nil
}

func (x *AppInstanceConfig) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *AppInstanceConfig) GetRemoteConsole() bool {
	if x != nil {
		return x.RemoteConsole
	}
	return false
}

func (x *AppInstanceConfig) GetCipherData() *evecommon.CipherBlock {
	if x != nil {
		return x.CipherData
	}
	return nil
}

func (x *AppInstanceConfig) GetCollectStatsIPAddr() string {
	if x != nil {
		return x.CollectStatsIPAddr
	}
	return ""
}

func (x *AppInstanceConfig) GetVolumeRefList() []*VolumeRef {
	if x != nil {
		return x.VolumeRefList
	}
	return nil
}

func (x *AppInstanceConfig) GetMetaDataType() MetaDataType {
	if x != nil {
		return x.MetaDataType
	}
	return MetaDataType_MetaDataDrive
}

func (x *AppInstanceConfig) GetProfileList() []string {
	if x != nil {
		return x.ProfileList
	}
	return nil
}

func (x *AppInstanceConfig) GetStartDelayInSeconds() uint32 {
	if x != nil {
		return x.StartDelayInSeconds
	}
	return 0
}

func (x *AppInstanceConfig) GetService() bool {
	if x != nil {
		return x.Service
	}
	return false
}

func (x *AppInstanceConfig) GetCloudInitVersion() uint32 {
	if x != nil {
		return x.CloudInitVersion
	}
	return 0
}

func (x *AppInstanceConfig) GetSnapshot() *SnapshotConfig {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *AppInstanceConfig) GetPatchRef() *PatchEnvelopeRef {
	if x != nil {
		return x.PatchRef
	}
	return nil
}

func (x *AppInstanceConfig) GetDesignatedNodeId() string {
	if x != nil {
		return x.DesignatedNodeId
	}
	return ""
}

type PatchEnvelopeRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// one of them should be non-empty
	// non-empty name overrides the id
	Name string `protobuf:"bytes,23,opt,name=name,proto3" json:"name,omitempty"`
	Id   string `protobuf:"bytes,24,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PatchEnvelopeRef) Reset() {
	*x = PatchEnvelopeRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_appconfig_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchEnvelopeRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchEnvelopeRef) ProtoMessage() {}

func (x *PatchEnvelopeRef) ProtoReflect() protoreflect.Message {
	mi := &file_config_appconfig_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchEnvelopeRef.ProtoReflect.Descriptor instead.
func (*PatchEnvelopeRef) Descriptor() ([]byte, []int) {
	return file_config_appconfig_proto_rawDescGZIP(), []int{4}
}

func (x *PatchEnvelopeRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchEnvelopeRef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Reference to a Volume specified separately in the API
// If a volume is purged (re-created from scratch) it will either have a new
// UUID or a new generationCount
type VolumeRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid            string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"` // Volume UUID
	GenerationCount int64  `protobuf:"varint,2,opt,name=generationCount,proto3" json:"generationCount,omitempty"`
	// Indicates volume mount point inside container
	// if mount_dir is empty then it will be mounted on /mnt
	MountDir string `protobuf:"bytes,3,opt,name=mount_dir,json=mountDir,proto3" json:"mount_dir,omitempty"`
}

func (x *VolumeRef) Reset() {
	*x = VolumeRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_appconfig_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeRef) ProtoMessage() {}

func (x *VolumeRef) ProtoReflect() protoreflect.Message {
	mi := &file_config_appconfig_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeRef.ProtoReflect.Descriptor instead.
func (*VolumeRef) Descriptor() ([]byte, []int) {
	return file_config_appconfig_proto_rawDescGZIP(), []int{5}
}

func (x *VolumeRef) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VolumeRef) GetGenerationCount() int64 {
	if x != nil {
		return x.GenerationCount
	}
	return 0
}

func (x *VolumeRef) GetMountDir() string {
	if x != nil {
		return x.MountDir
	}
	return ""
}

var File_config_appconfig_proto protoreflect.FileDescriptor

var file_config_appconfig_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x1b, 0x65, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x76, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x6e, 0x65, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f,
	0x70, 0x73, 0x43, 0x6d, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x70, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x70, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x0c, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x48,
	0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x73, 0x43, 0x6d, 0x64, 0x52, 0x0b, 0x72, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6d, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x41, 0x0a,
	0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x22, 0xc9, 0x09, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x0e, 0x75, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x64, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x61, 0x6e, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x64, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x52, 0x06,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x08, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x73, 0x43, 0x6d, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x75, 0x72, 0x67, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x73, 0x43, 0x6d, 0x64, 0x52, 0x05, 0x70, 0x75,
	0x72, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x12, 0x46, 0x0a, 0x0d, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x66, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x66, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x6e, 0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x43, 0x0a,
	0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x66, 0x52, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x66, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x18, 0x10, 0x19, 0x22, 0x36, 0x0a, 0x10,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x66, 0x0a, 0x09, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x66, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x2a, 0x66, 0x0a, 0x0c,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x44, 0x72, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x10, 0x03, 0x2a, 0x4b, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x42, 0x3d, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x66, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x65,
	0x76, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_appconfig_proto_rawDescOnce sync.Once
	file_config_appconfig_proto_rawDescData = file_config_appconfig_proto_rawDesc
)

func file_config_appconfig_proto_rawDescGZIP() []byte {
	file_config_appconfig_proto_rawDescOnce.Do(func() {
		file_config_appconfig_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_appconfig_proto_rawDescData)
	})
	return file_config_appconfig_proto_rawDescData
}

var file_config_appconfig_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_config_appconfig_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_config_appconfig_proto_goTypes = []interface{}{
	(MetaDataType)(0),             // 0: org.lfedge.eve.config.MetaDataType
	(SnapshotType)(0),             // 1: org.lfedge.eve.config.SnapshotType
	(*InstanceOpsCmd)(nil),        // 2: org.lfedge.eve.config.InstanceOpsCmd
	(*SnapshotDesc)(nil),          // 3: org.lfedge.eve.config.SnapshotDesc
	(*SnapshotConfig)(nil),        // 4: org.lfedge.eve.config.SnapshotConfig
	(*AppInstanceConfig)(nil),     // 5: org.lfedge.eve.config.AppInstanceConfig
	(*PatchEnvelopeRef)(nil),      // 6: org.lfedge.eve.config.PatchEnvelopeRef
	(*VolumeRef)(nil),             // 7: org.lfedge.eve.config.VolumeRef
	(*UUIDandVersion)(nil),        // 8: org.lfedge.eve.config.UUIDandVersion
	(*VmConfig)(nil),              // 9: org.lfedge.eve.config.VmConfig
	(*Drive)(nil),                 // 10: org.lfedge.eve.config.Drive
	(*NetworkAdapter)(nil),        // 11: org.lfedge.eve.config.NetworkAdapter
	(*Adapter)(nil),               // 12: org.lfedge.eve.config.Adapter
	(*evecommon.CipherBlock)(nil), // 13: org.lfedge.eve.common.CipherBlock
}
var file_config_appconfig_proto_depIdxs = []int32{
	1,  // 0: org.lfedge.eve.config.SnapshotDesc.type:type_name -> org.lfedge.eve.config.SnapshotType
	2,  // 1: org.lfedge.eve.config.SnapshotConfig.rollback_cmd:type_name -> org.lfedge.eve.config.InstanceOpsCmd
	3,  // 2: org.lfedge.eve.config.SnapshotConfig.snapshots:type_name -> org.lfedge.eve.config.SnapshotDesc
	8,  // 3: org.lfedge.eve.config.AppInstanceConfig.uuidandversion:type_name -> org.lfedge.eve.config.UUIDandVersion
	9,  // 4: org.lfedge.eve.config.AppInstanceConfig.fixedresources:type_name -> org.lfedge.eve.config.VmConfig
	10, // 5: org.lfedge.eve.config.AppInstanceConfig.drives:type_name -> org.lfedge.eve.config.Drive
	11, // 6: org.lfedge.eve.config.AppInstanceConfig.interfaces:type_name -> org.lfedge.eve.config.NetworkAdapter
	12, // 7: org.lfedge.eve.config.AppInstanceConfig.adapters:type_name -> org.lfedge.eve.config.Adapter
	2,  // 8: org.lfedge.eve.config.AppInstanceConfig.restart:type_name -> org.lfedge.eve.config.InstanceOpsCmd
	2,  // 9: org.lfedge.eve.config.AppInstanceConfig.purge:type_name -> org.lfedge.eve.config.InstanceOpsCmd
	13, // 10: org.lfedge.eve.config.AppInstanceConfig.cipherData:type_name -> org.lfedge.eve.common.CipherBlock
	7,  // 11: org.lfedge.eve.config.AppInstanceConfig.volumeRefList:type_name -> org.lfedge.eve.config.VolumeRef
	0,  // 12: org.lfedge.eve.config.AppInstanceConfig.metaDataType:type_name -> org.lfedge.eve.config.MetaDataType
	4,  // 13: org.lfedge.eve.config.AppInstanceConfig.snapshot:type_name -> org.lfedge.eve.config.SnapshotConfig
	6,  // 14: org.lfedge.eve.config.AppInstanceConfig.patchRef:type_name -> org.lfedge.eve.config.PatchEnvelopeRef
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_config_appconfig_proto_init() }
func file_config_appconfig_proto_init() {
	if File_config_appconfig_proto != nil {
		return
	}
	file_config_devcommon_proto_init()
	file_config_storage_proto_init()
	file_config_vm_proto_init()
	file_config_netconfig_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_config_appconfig_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceOpsCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_appconfig_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_appconfig_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_appconfig_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppInstanceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_appconfig_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchEnvelopeRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_appconfig_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_appconfig_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_appconfig_proto_goTypes,
		DependencyIndexes: file_config_appconfig_proto_depIdxs,
		EnumInfos:         file_config_appconfig_proto_enumTypes,
		MessageInfos:      file_config_appconfig_proto_msgTypes,
	}.Build()
	File_config_appconfig_proto = out.File
	file_config_appconfig_proto_rawDesc = nil
	file_config_appconfig_proto_goTypes = nil
	file_config_appconfig_proto_depIdxs = nil
}
