// Copyright(c) 2017-2020 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: config/storage.proto

package config

import (
	evecommon "github.com/lf-edge/eve-api/go/evecommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DsType int32

const (
	DsType_DsUnknown           DsType = 0
	DsType_DsHttp              DsType = 1
	DsType_DsHttps             DsType = 2
	DsType_DsS3                DsType = 3
	DsType_DsSFTP              DsType = 4
	DsType_DsContainerRegistry DsType = 5
	DsType_DsAzureBlob         DsType = 6
	DsType_DsGoogleStorage     DsType = 7
)

// Enum value maps for DsType.
var (
	DsType_name = map[int32]string{
		0: "DsUnknown",
		1: "DsHttp",
		2: "DsHttps",
		3: "DsS3",
		4: "DsSFTP",
		5: "DsContainerRegistry",
		6: "DsAzureBlob",
		7: "DsGoogleStorage",
	}
	DsType_value = map[string]int32{
		"DsUnknown":           0,
		"DsHttp":              1,
		"DsHttps":             2,
		"DsS3":                3,
		"DsSFTP":              4,
		"DsContainerRegistry": 5,
		"DsAzureBlob":         6,
		"DsGoogleStorage":     7,
	}
)

func (x DsType) Enum() *DsType {
	p := new(DsType)
	*p = x
	return p
}

func (x DsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DsType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_storage_proto_enumTypes[0].Descriptor()
}

func (DsType) Type() protoreflect.EnumType {
	return &file_config_storage_proto_enumTypes[0]
}

func (x DsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DsType.Descriptor instead.
func (DsType) EnumDescriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{0}
}

type Format int32

const (
	Format_FmtUnknown Format = 0
	Format_RAW        Format = 1
	Format_QCOW       Format = 2
	Format_QCOW2      Format = 3
	Format_VHD        Format = 4
	Format_VMDK       Format = 5
	Format_OVA        Format = 6
	Format_VHDX       Format = 7
	Format_CONTAINER  Format = 8
	Format_ISO        Format = 9
	Format_PVC        Format = 10
)

// Enum value maps for Format.
var (
	Format_name = map[int32]string{
		0:  "FmtUnknown",
		1:  "RAW",
		2:  "QCOW",
		3:  "QCOW2",
		4:  "VHD",
		5:  "VMDK",
		6:  "OVA",
		7:  "VHDX",
		8:  "CONTAINER",
		9:  "ISO",
		10: "PVC",
	}
	Format_value = map[string]int32{
		"FmtUnknown": 0,
		"RAW":        1,
		"QCOW":       2,
		"QCOW2":      3,
		"VHD":        4,
		"VMDK":       5,
		"OVA":        6,
		"VHDX":       7,
		"CONTAINER":  8,
		"ISO":        9,
		"PVC":        10,
	}
)

func (x Format) Enum() *Format {
	p := new(Format)
	*p = x
	return p
}

func (x Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Format) Descriptor() protoreflect.EnumDescriptor {
	return file_config_storage_proto_enumTypes[1].Descriptor()
}

func (Format) Type() protoreflect.EnumType {
	return &file_config_storage_proto_enumTypes[1]
}

func (x Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Format.Descriptor instead.
func (Format) EnumDescriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{1}
}

type Target int32

const (
	Target_TgtUnknown Target = 0
	Target_Disk       Target = 1
	Target_Kernel     Target = 2
	Target_Initrd     Target = 3
	Target_RamDisk    Target = 4
	Target_AppCustom  Target = 5 // XXX DeviceTree?
)

// Enum value maps for Target.
var (
	Target_name = map[int32]string{
		0: "TgtUnknown",
		1: "Disk",
		2: "Kernel",
		3: "Initrd",
		4: "RamDisk",
		5: "AppCustom",
	}
	Target_value = map[string]int32{
		"TgtUnknown": 0,
		"Disk":       1,
		"Kernel":     2,
		"Initrd":     3,
		"RamDisk":    4,
		"AppCustom":  5,
	}
)

func (x Target) Enum() *Target {
	p := new(Target)
	*p = x
	return p
}

func (x Target) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Target) Descriptor() protoreflect.EnumDescriptor {
	return file_config_storage_proto_enumTypes[2].Descriptor()
}

func (Target) Type() protoreflect.EnumType {
	return &file_config_storage_proto_enumTypes[2]
}

func (x Target) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Target.Descriptor instead.
func (Target) EnumDescriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{2}
}

// XXX the DriveType will be deprecated when we deprecate Drive
type DriveType int32

const (
	DriveType_Unclassified DriveType = 0
	DriveType_CDROM        DriveType = 1
	DriveType_HDD          DriveType = 2
	DriveType_NET          DriveType = 3
	// this type is allocate the empty disk of maxsizebytes specified
	DriveType_HDD_EMPTY DriveType = 4
)

// Enum value maps for DriveType.
var (
	DriveType_name = map[int32]string{
		0: "Unclassified",
		1: "CDROM",
		2: "HDD",
		3: "NET",
		4: "HDD_EMPTY",
	}
	DriveType_value = map[string]int32{
		"Unclassified": 0,
		"CDROM":        1,
		"HDD":          2,
		"NET":          3,
		"HDD_EMPTY":    4,
	}
)

func (x DriveType) Enum() *DriveType {
	p := new(DriveType)
	*p = x
	return p
}

func (x DriveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DriveType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_storage_proto_enumTypes[3].Descriptor()
}

func (DriveType) Type() protoreflect.EnumType {
	return &file_config_storage_proto_enumTypes[3]
}

func (x DriveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DriveType.Descriptor instead.
func (DriveType) EnumDescriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{3}
}

// The protocol that the task will use to access the Volume
type VolumeAccessProtocols int32

const (
	VolumeAccessProtocols_VAP_NONE VolumeAccessProtocols = 0
	VolumeAccessProtocols_VAP_9P   VolumeAccessProtocols = 1
)

// Enum value maps for VolumeAccessProtocols.
var (
	VolumeAccessProtocols_name = map[int32]string{
		0: "VAP_NONE",
		1: "VAP_9P",
	}
	VolumeAccessProtocols_value = map[string]int32{
		"VAP_NONE": 0,
		"VAP_9P":   1,
	}
)

func (x VolumeAccessProtocols) Enum() *VolumeAccessProtocols {
	p := new(VolumeAccessProtocols)
	*p = x
	return p
}

func (x VolumeAccessProtocols) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeAccessProtocols) Descriptor() protoreflect.EnumDescriptor {
	return file_config_storage_proto_enumTypes[4].Descriptor()
}

func (VolumeAccessProtocols) Type() protoreflect.EnumType {
	return &file_config_storage_proto_enumTypes[4]
}

func (x VolumeAccessProtocols) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeAccessProtocols.Descriptor instead.
func (VolumeAccessProtocols) EnumDescriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{4}
}

type VolumeContentOriginType int32

const (
	VolumeContentOriginType_VCOT_UNKNOWN  VolumeContentOriginType = 0
	VolumeContentOriginType_VCOT_BLANK    VolumeContentOriginType = 1 // Create an empty directory/disk with specified size
	VolumeContentOriginType_VCOT_DOWNLOAD VolumeContentOriginType = 2 // Create from downloadContentTreeID
)

// Enum value maps for VolumeContentOriginType.
var (
	VolumeContentOriginType_name = map[int32]string{
		0: "VCOT_UNKNOWN",
		1: "VCOT_BLANK",
		2: "VCOT_DOWNLOAD",
	}
	VolumeContentOriginType_value = map[string]int32{
		"VCOT_UNKNOWN":  0,
		"VCOT_BLANK":    1,
		"VCOT_DOWNLOAD": 2,
	}
)

func (x VolumeContentOriginType) Enum() *VolumeContentOriginType {
	p := new(VolumeContentOriginType)
	*p = x
	return p
}

func (x VolumeContentOriginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeContentOriginType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_storage_proto_enumTypes[5].Descriptor()
}

func (VolumeContentOriginType) Type() protoreflect.EnumType {
	return &file_config_storage_proto_enumTypes[5]
}

func (x VolumeContentOriginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeContentOriginType.Descriptor instead.
func (VolumeContentOriginType) EnumDescriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{5}
}

// DiskConfigType is the desired configuration of disks
type DiskConfigType int32

const (
	DiskConfigType_DISK_CONFIG_TYPE_UNSPECIFIED DiskConfigType = 0 // no configured, do nothing
	DiskConfigType_DISK_CONFIG_TYPE_EVEOS       DiskConfigType = 1 // the disk EVE is installed on
	DiskConfigType_DISK_CONFIG_TYPE_PERSIST     DiskConfigType = 2 // the disk is separate persist partition, not zfs
	DiskConfigType_DISK_CONFIG_TYPE_ZFS_ONLINE  DiskConfigType = 3 // included in zfs and online
	DiskConfigType_DISK_CONFIG_TYPE_ZFS_OFFLINE DiskConfigType = 4 // included in zfs and offline
	DiskConfigType_DISK_CONFIG_TYPE_APPDIRECT   DiskConfigType = 5 // for direct assignment
	DiskConfigType_DISK_CONFIG_TYPE_UNUSED      DiskConfigType = 6 // removed from zfs/app-direct
)

// Enum value maps for DiskConfigType.
var (
	DiskConfigType_name = map[int32]string{
		0: "DISK_CONFIG_TYPE_UNSPECIFIED",
		1: "DISK_CONFIG_TYPE_EVEOS",
		2: "DISK_CONFIG_TYPE_PERSIST",
		3: "DISK_CONFIG_TYPE_ZFS_ONLINE",
		4: "DISK_CONFIG_TYPE_ZFS_OFFLINE",
		5: "DISK_CONFIG_TYPE_APPDIRECT",
		6: "DISK_CONFIG_TYPE_UNUSED",
	}
	DiskConfigType_value = map[string]int32{
		"DISK_CONFIG_TYPE_UNSPECIFIED": 0,
		"DISK_CONFIG_TYPE_EVEOS":       1,
		"DISK_CONFIG_TYPE_PERSIST":     2,
		"DISK_CONFIG_TYPE_ZFS_ONLINE":  3,
		"DISK_CONFIG_TYPE_ZFS_OFFLINE": 4,
		"DISK_CONFIG_TYPE_APPDIRECT":   5,
		"DISK_CONFIG_TYPE_UNUSED":      6,
	}
)

func (x DiskConfigType) Enum() *DiskConfigType {
	p := new(DiskConfigType)
	*p = x
	return p
}

func (x DiskConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_storage_proto_enumTypes[6].Descriptor()
}

func (DiskConfigType) Type() protoreflect.EnumType {
	return &file_config_storage_proto_enumTypes[6]
}

func (x DiskConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskConfigType.Descriptor instead.
func (DiskConfigType) EnumDescriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{6}
}

// DisksArrayType is the desired configuration of disks in DisksConfig
type DisksArrayType int32

const (
	DisksArrayType_DISKS_ARRAY_TYPE_UNSPECIFIED DisksArrayType = 0 // no configured
	DisksArrayType_DISKS_ARRAY_TYPE_RAID0       DisksArrayType = 1 // stripe
	DisksArrayType_DISKS_ARRAY_TYPE_RAID1       DisksArrayType = 2 // mirror
	DisksArrayType_DISKS_ARRAY_TYPE_RAID5       DisksArrayType = 3 // raidz1
	DisksArrayType_DISKS_ARRAY_TYPE_RAID6       DisksArrayType = 4 // raidz2
)

// Enum value maps for DisksArrayType.
var (
	DisksArrayType_name = map[int32]string{
		0: "DISKS_ARRAY_TYPE_UNSPECIFIED",
		1: "DISKS_ARRAY_TYPE_RAID0",
		2: "DISKS_ARRAY_TYPE_RAID1",
		3: "DISKS_ARRAY_TYPE_RAID5",
		4: "DISKS_ARRAY_TYPE_RAID6",
	}
	DisksArrayType_value = map[string]int32{
		"DISKS_ARRAY_TYPE_UNSPECIFIED": 0,
		"DISKS_ARRAY_TYPE_RAID0":       1,
		"DISKS_ARRAY_TYPE_RAID1":       2,
		"DISKS_ARRAY_TYPE_RAID5":       3,
		"DISKS_ARRAY_TYPE_RAID6":       4,
	}
)

func (x DisksArrayType) Enum() *DisksArrayType {
	p := new(DisksArrayType)
	*p = x
	return p
}

func (x DisksArrayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisksArrayType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_storage_proto_enumTypes[7].Descriptor()
}

func (DisksArrayType) Type() protoreflect.EnumType {
	return &file_config_storage_proto_enumTypes[7]
}

func (x DisksArrayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisksArrayType.Descriptor instead.
func (DisksArrayType) EnumDescriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{7}
}

// XXX this will be deprecated when all deployed instances of EVE
// no longer expect it. 5.6.X depend on it. 5.7.1 does not.
type SignatureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intercertsurl string `protobuf:"bytes,1,opt,name=intercertsurl,proto3" json:"intercertsurl,omitempty"`
	Signercerturl string `protobuf:"bytes,2,opt,name=signercerturl,proto3" json:"signercerturl,omitempty"`
	Signature     []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignatureInfo) Reset() {
	*x = SignatureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureInfo) ProtoMessage() {}

func (x *SignatureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureInfo.ProtoReflect.Descriptor instead.
func (*SignatureInfo) Descriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{0}
}

func (x *SignatureInfo) GetIntercertsurl() string {
	if x != nil {
		return x.Intercertsurl
	}
	return ""
}

func (x *SignatureInfo) GetSignercerturl() string {
	if x != nil {
		return x.Signercerturl
	}
	return ""
}

func (x *SignatureInfo) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// The DataStoreConfig contains common parameters for a give source of
// images aka ContentTrees, such as the credentials and server
type DatastoreConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"` // UUID
	DType DsType `protobuf:"varint,1,opt,name=dType,proto3,enum=org.lfedge.eve.config.DsType" json:"dType,omitempty"`
	Fqdn  string `protobuf:"bytes,2,opt,name=fqdn,proto3" json:"fqdn,omitempty"` // Fully-qualified domain name of server
	// to be deprecated, use cipherData instead
	ApiKey string `protobuf:"bytes,3,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
	// to be deprecated, use cipherData instead
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// depending on datastore types, it could be bucket or path
	Dpath string `protobuf:"bytes,5,opt,name=dpath,proto3" json:"dpath,omitempty"`
	// Applies for some datastore types
	Region string `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	// contains the encrypted credentials
	CipherData *evecommon.CipherBlock `protobuf:"bytes,7,opt,name=cipherData,proto3" json:"cipherData,omitempty"`
	// Uploaded datastore certificate or certificate chain
	DsCertPEM [][]byte `protobuf:"bytes,8,rep,name=dsCertPEM,proto3" json:"dsCertPEM,omitempty"`
}

func (x *DatastoreConfig) Reset() {
	*x = DatastoreConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_storage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatastoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatastoreConfig) ProtoMessage() {}

func (x *DatastoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_storage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatastoreConfig.ProtoReflect.Descriptor instead.
func (*DatastoreConfig) Descriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{1}
}

func (x *DatastoreConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DatastoreConfig) GetDType() DsType {
	if x != nil {
		return x.DType
	}
	return DsType_DsUnknown
}

func (x *DatastoreConfig) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *DatastoreConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *DatastoreConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DatastoreConfig) GetDpath() string {
	if x != nil {
		return x.Dpath
	}
	return ""
}

func (x *DatastoreConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *DatastoreConfig) GetCipherData() *evecommon.CipherBlock {
	if x != nil {
		return x.CipherData
	}
	return nil
}

func (x *DatastoreConfig) GetDsCertPEM() [][]byte {
	if x != nil {
		return x.DsCertPEM
	}
	return nil
}

// XXX the Image will be deprecated and we will use ContentTree instead
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuidandversion *UUIDandVersion `protobuf:"bytes,1,opt,name=uuidandversion,proto3" json:"uuidandversion,omitempty"`
	// it could be relative path/name as well; appended to the datastore dpath
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sha256  string `protobuf:"bytes,3,opt,name=sha256,proto3" json:"sha256,omitempty"` // EVE will verify this sha for the content
	Iformat Format `protobuf:"varint,4,opt,name=iformat,proto3,enum=org.lfedge.eve.config.Format" json:"iformat,omitempty"`
	// if its signed image
	Siginfo *SignatureInfo `protobuf:"bytes,5,opt,name=siginfo,proto3" json:"siginfo,omitempty"`
	DsId    string         `protobuf:"bytes,6,opt,name=dsId,proto3" json:"dsId,omitempty"` // Datastore UUID
	// sizeBytes indicates the maximum download size of an image.
	// A value of 0 will indicate the unlimited download.
	SizeBytes int64 `protobuf:"varint,8,opt,name=sizeBytes,proto3" json:"sizeBytes,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_storage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_config_storage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{2}
}

func (x *Image) GetUuidandversion() *UUIDandVersion {
	if x != nil {
		return x.Uuidandversion
	}
	return nil
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *Image) GetIformat() Format {
	if x != nil {
		return x.Iformat
	}
	return Format_FmtUnknown
}

func (x *Image) GetSiginfo() *SignatureInfo {
	if x != nil {
		return x.Siginfo
	}
	return nil
}

func (x *Image) GetDsId() string {
	if x != nil {
		return x.DsId
	}
	return ""
}

func (x *Image) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

// XXX the Drive will be deprecated and we will use Volumes instead
type Drive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image    *Image    `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Readonly bool      `protobuf:"varint,5,opt,name=readonly,proto3" json:"readonly,omitempty"`
	Preserve bool      `protobuf:"varint,6,opt,name=preserve,proto3" json:"preserve,omitempty"` // XXX deprecate; EVE always preserves unless there is a purge
	Drvtype  DriveType `protobuf:"varint,8,opt,name=drvtype,proto3,enum=org.lfedge.eve.config.DriveType" json:"drvtype,omitempty"`
	Target   Target    `protobuf:"varint,9,opt,name=target,proto3,enum=org.lfedge.eve.config.Target" json:"target,omitempty"`
	// maxsizebytes indicates the maximum size of the volume.
	// Initial image size will be resized to the maxsizebytes
	// iff maxsizebytes is greater than the image size.
	Maxsizebytes int64 `protobuf:"varint,10,opt,name=maxsizebytes,proto3" json:"maxsizebytes,omitempty"`
}

func (x *Drive) Reset() {
	*x = Drive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_storage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Drive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Drive) ProtoMessage() {}

func (x *Drive) ProtoReflect() protoreflect.Message {
	mi := &file_config_storage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Drive.ProtoReflect.Descriptor instead.
func (*Drive) Descriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{3}
}

func (x *Drive) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Drive) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *Drive) GetPreserve() bool {
	if x != nil {
		return x.Preserve
	}
	return false
}

func (x *Drive) GetDrvtype() DriveType {
	if x != nil {
		return x.Drvtype
	}
	return DriveType_Unclassified
}

func (x *Drive) GetTarget() Target {
	if x != nil {
		return x.Target
	}
	return Target_TgtUnknown
}

func (x *Drive) GetMaxsizebytes() int64 {
	if x != nil {
		return x.Maxsizebytes
	}
	return 0
}

// ContentTree describes the top of some content tree. The controller needs
// to allocate a uuid for it, and that uuid will be sent by EVE in the
// ZInfoContentTree message
type ContentTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid    string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	DsId    string `protobuf:"bytes,2,opt,name=dsId,proto3" json:"dsId,omitempty"` // Deprecated; You need to check the ds_ids_list
	URL     string `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`   // URL to append to datastore dpath
	Iformat Format `protobuf:"varint,4,opt,name=iformat,proto3,enum=org.lfedge.eve.config.Format" json:"iformat,omitempty"`
	// The sha is for the top blob of the ContentTree
	Sha256 string `protobuf:"bytes,5,opt,name=sha256,proto3" json:"sha256,omitempty"`
	// maxSizeBytes used for capping resource consumption in EVE.
	// maxSizeBytes indicates the maximum download size of content tree.
	MaxSizeBytes uint64         `protobuf:"varint,6,opt,name=maxSizeBytes,proto3" json:"maxSizeBytes,omitempty"`
	Siginfo      *SignatureInfo `protobuf:"bytes,7,opt,name=siginfo,proto3" json:"siginfo,omitempty"`
	DisplayName  string         `protobuf:"bytes,8,opt,name=displayName,proto3" json:"displayName,omitempty"` // Optional friendly name echo'ed in info
	// For container ContentTree, sha256 might not be available in config.
	// If the sha256 is not available then it needs to be resolved corresponding to the tag
	// change in generation_count indicates that the resolution of tag is needed
	// generation_count needs to be updated when purge is required for an existing
	// instance. In case of new instance using the same content tree, EVE will get
	// new content tree UUID in the device configuration from the controller.
	GenerationCount int64 `protobuf:"varint,9,opt,name=generation_count,json=generationCount,proto3" json:"generation_count,omitempty"`
	// An arbitrary string. Usage depends on the content purpose. Currently the
	// only usage is with custom application blobs (AppCustom) - this string will
	// appear in the restAPI endpoint available at http://169.254.169.254. So user
	// application can read that data and treat the blob accordingly.
	CustomMetaData string `protobuf:"bytes,10,opt,name=custom_meta_data,json=customMetaData,proto3" json:"custom_meta_data,omitempty"`
	// List of DatastoreConfig UUIDs, that must have the same content. In case of
	// network failure, the download process can fallback to the next datastore
	// in the list.
	DsIdsList []string `protobuf:"bytes,11,rep,name=ds_ids_list,json=dsIdsList,proto3" json:"ds_ids_list,omitempty"`
}

func (x *ContentTree) Reset() {
	*x = ContentTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_storage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentTree) ProtoMessage() {}

func (x *ContentTree) ProtoReflect() protoreflect.Message {
	mi := &file_config_storage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentTree.ProtoReflect.Descriptor instead.
func (*ContentTree) Descriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{4}
}

func (x *ContentTree) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ContentTree) GetDsId() string {
	if x != nil {
		return x.DsId
	}
	return ""
}

func (x *ContentTree) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *ContentTree) GetIformat() Format {
	if x != nil {
		return x.Iformat
	}
	return Format_FmtUnknown
}

func (x *ContentTree) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *ContentTree) GetMaxSizeBytes() uint64 {
	if x != nil {
		return x.MaxSizeBytes
	}
	return 0
}

func (x *ContentTree) GetSiginfo() *SignatureInfo {
	if x != nil {
		return x.Siginfo
	}
	return nil
}

func (x *ContentTree) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ContentTree) GetGenerationCount() int64 {
	if x != nil {
		return x.GenerationCount
	}
	return 0
}

func (x *ContentTree) GetCustomMetaData() string {
	if x != nil {
		return x.CustomMetaData
	}
	return ""
}

func (x *ContentTree) GetDsIdsList() []string {
	if x != nil {
		return x.DsIdsList
	}
	return nil
}

type VolumeContentOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                  VolumeContentOriginType `protobuf:"varint,1,opt,name=type,proto3,enum=org.lfedge.eve.config.VolumeContentOriginType" json:"type,omitempty"`
	DownloadContentTreeID string                  `protobuf:"bytes,2,opt,name=downloadContentTreeID,proto3" json:"downloadContentTreeID,omitempty"` // UUID for ContentTree
}

func (x *VolumeContentOrigin) Reset() {
	*x = VolumeContentOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_storage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeContentOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeContentOrigin) ProtoMessage() {}

func (x *VolumeContentOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_config_storage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeContentOrigin.ProtoReflect.Descriptor instead.
func (*VolumeContentOrigin) Descriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{5}
}

func (x *VolumeContentOrigin) GetType() VolumeContentOriginType {
	if x != nil {
		return x.Type
	}
	return VolumeContentOriginType_VCOT_UNKNOWN
}

func (x *VolumeContentOrigin) GetDownloadContentTreeID() string {
	if x != nil {
		return x.DownloadContentTreeID
	}
	return ""
}

// The Volume describes a storage volume which should exist on the device.
// This can currently either be blank or created from a ContentTree
// If maxSizeBytes is zero it means unlimited by the controller. In that
// case EVE needs to determine how much space it can assign and limit any
// downloaded ContentTree and the created volume based on that calculated size.
type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// origin of the volume content.
	Origin *VolumeContentOrigin `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	// describes all the different ways how this Volume can
	// be offered to Tasks
	Protocols []VolumeAccessProtocols `protobuf:"varint,3,rep,packed,name=protocols,proto3,enum=org.lfedge.eve.config.VolumeAccessProtocols" json:"protocols,omitempty"`
	// change in generationCount indicates that the mutated volume needs to be
	// purged and built from scratch. This is a generalization of the purge
	// command for an application instance
	GenerationCount int64 `protobuf:"varint,4,opt,name=generationCount,proto3" json:"generationCount,omitempty"`
	// miscellaneous attributes of the Volume
	// maxSizeBytes Used for capping resource consumption in EVE.
	// maxSizeBytes indicates the maximum size of the volume.
	Maxsizebytes int64  `protobuf:"varint,5,opt,name=maxsizebytes,proto3" json:"maxsizebytes,omitempty"`
	Readonly     bool   `protobuf:"varint,6,opt,name=readonly,proto3" json:"readonly,omitempty"`                               // Will be offered to tasks as read-only
	DisplayName  string `protobuf:"bytes,7,opt,name=displayName,proto3" json:"displayName,omitempty"`                          // Optional friendly name echo'ed in info message
	ClearText    bool   `protobuf:"varint,8,opt,name=clear_text,json=clearText,proto3" json:"clear_text,omitempty"`            // Flag to indicate the volume encryption needed or not
	Target       Target `protobuf:"varint,9,opt,name=target,proto3,enum=org.lfedge.eve.config.Target" json:"target,omitempty"` // How the volume will be presented to the instance. At the moment only the AppCustom is used
	// To inform the edge-node if the device receiving this Volume is
	// responsible for volume creation, convert PVC, or not
	DesignatedNodeId string `protobuf:"bytes,10,opt,name=designated_node_id,json=designatedNodeId,proto3" json:"designated_node_id,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_storage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_config_storage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{6}
}

func (x *Volume) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Volume) GetOrigin() *VolumeContentOrigin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *Volume) GetProtocols() []VolumeAccessProtocols {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *Volume) GetGenerationCount() int64 {
	if x != nil {
		return x.GenerationCount
	}
	return 0
}

func (x *Volume) GetMaxsizebytes() int64 {
	if x != nil {
		return x.Maxsizebytes
	}
	return 0
}

func (x *Volume) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

func (x *Volume) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Volume) GetClearText() bool {
	if x != nil {
		return x.ClearText
	}
	return false
}

func (x *Volume) GetTarget() Target {
	if x != nil {
		return x.Target
	}
	return Target_TgtUnknown
}

func (x *Volume) GetDesignatedNodeId() string {
	if x != nil {
		return x.DesignatedNodeId
	}
	return ""
}

// DiskConfig describe desired configuration of disk
// If we want change state to online/offline we should define its state
// If we want to add disk we should define it here and set DiskConfigType to online or offline
// If we want to remove disk we should set its state to unused or appdirect
// If we want to replace disk we should fill old_disk to be replaced with disk
// Progress of operation is expected to be available in info messages
type DiskConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disk *evecommon.DiskDescription `protobuf:"bytes,1,opt,name=disk,proto3" json:"disk,omitempty"`
	// define old disk here to replace it with new one defined in disk, omit it to not use replacement
	OldDisk    *evecommon.DiskDescription `protobuf:"bytes,2,opt,name=old_disk,json=oldDisk,proto3" json:"old_disk,omitempty"`
	DiskConfig DiskConfigType             `protobuf:"varint,3,opt,name=disk_config,json=diskConfig,proto3,enum=org.lfedge.eve.config.DiskConfigType" json:"disk_config,omitempty"`
}

func (x *DiskConfig) Reset() {
	*x = DiskConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_storage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskConfig) ProtoMessage() {}

func (x *DiskConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_storage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskConfig.ProtoReflect.Descriptor instead.
func (*DiskConfig) Descriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{7}
}

func (x *DiskConfig) GetDisk() *evecommon.DiskDescription {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *DiskConfig) GetOldDisk() *evecommon.DiskDescription {
	if x != nil {
		return x.OldDisk
	}
	return nil
}

func (x *DiskConfig) GetDiskConfig() DiskConfigType {
	if x != nil {
		return x.DiskConfig
	}
	return DiskConfigType_DISK_CONFIG_TYPE_UNSPECIFIED
}

// DisksConfig is a configuration of disks
// We expect information about disks to be filled and will try to adjust disks states accordingly
// All disks defined in disks field expected to have array type defined in array_type
// To support nested topologies we can use children field
//
// For example to use stripe of two pairs of mirrored disks we should define
// DisksConfig without disks with array_type DISKS_ARRAY_TYPE_RAID0
// with two children with properly defined disks inside and with array_type DISKS_ARRAY_TYPE_RAID1
// and empty children
type DisksConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disks     []*DiskConfig  `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty"`
	ArrayType DisksArrayType `protobuf:"varint,2,opt,name=array_type,json=arrayType,proto3,enum=org.lfedge.eve.config.DisksArrayType" json:"array_type,omitempty"`
	Children  []*DisksConfig `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *DisksConfig) Reset() {
	*x = DisksConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_storage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisksConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisksConfig) ProtoMessage() {}

func (x *DisksConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_storage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisksConfig.ProtoReflect.Descriptor instead.
func (*DisksConfig) Descriptor() ([]byte, []int) {
	return file_config_storage_proto_rawDescGZIP(), []int{8}
}

func (x *DisksConfig) GetDisks() []*DiskConfig {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *DisksConfig) GetArrayType() DisksArrayType {
	if x != nil {
		return x.ArrayType
	}
	return DisksArrayType_DISKS_ARRAY_TYPE_UNSPECIFIED
}

func (x *DisksConfig) GetChildren() []*DisksConfig {
	if x != nil {
		return x.Children
	}
	return nil
}

var File_config_storage_proto protoreflect.FileDescriptor

var file_config_storage_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x16, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x65, 0x76, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x65, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x61, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x65, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x76,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a,
	0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x72, 0x74, 0x73, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x72, 0x74,
	0x73, 0x75, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x63, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x63, 0x65, 0x72, 0x74, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x0f, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x05,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x44, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x73, 0x43, 0x65, 0x72, 0x74, 0x50, 0x45, 0x4d, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09,
	0x64, 0x73, 0x43, 0x65, 0x72, 0x74, 0x50, 0x45, 0x4d, 0x22, 0xad, 0x02, 0x0a, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x75, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x64, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x61, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x64, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x37,
	0x0a, 0x07, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07,
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c,
	0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x73, 0x69, 0x67, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x05, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x6f,
	0x6e, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x64, 0x72, 0x76, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x64, 0x72, 0x76, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x73, 0x69, 0x7a, 0x65, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x73, 0x69, 0x7a,
	0x65, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x93, 0x03, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x73, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c,
	0x12, 0x37, 0x0a, 0x07, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65,
	0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x07, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x69,
	0x67, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0b,
	0x64, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x73, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a,
	0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x49, 0x44, 0x22, 0xbc,
	0x03, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x42, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x4a, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x73, 0x69,
	0x7a, 0x65, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x73, 0x69, 0x7a, 0x65, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c,
	0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xd3, 0x01,
	0x0a, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x04,
	0x64, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x41, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f,
	0x64, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x46, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xcc, 0x01, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x44, 0x0a, 0x0a,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x65, 0x76,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x2a, 0x85, 0x01, 0x0a, 0x06, 0x44, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x73, 0x48, 0x74, 0x74, 0x70, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x73, 0x48, 0x74,
	0x74, 0x70, 0x73, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x73, 0x53, 0x33, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x73, 0x53, 0x46, 0x54, 0x50, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x73, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x42,
	0x6c, 0x6f, 0x62, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x73, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x10, 0x07, 0x2a, 0x7d, 0x0a, 0x06, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x6d, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x51, 0x43, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x43, 0x4f, 0x57, 0x32,
	0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x48, 0x44, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x56,
	0x4d, 0x44, 0x4b, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x56, 0x41, 0x10, 0x06, 0x12, 0x08,
	0x0a, 0x04, 0x56, 0x48, 0x44, 0x58, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x53, 0x4f, 0x10, 0x09,
	0x12, 0x07, 0x0a, 0x03, 0x50, 0x56, 0x43, 0x10, 0x0a, 0x2a, 0x56, 0x0a, 0x06, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x67, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x6e, 0x69,
	0x74, 0x72, 0x64, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x61, 0x6d, 0x44, 0x69, 0x73, 0x6b,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10,
	0x05, 0x2a, 0x49, 0x0a, 0x09, 0x44, 0x72, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x55, 0x6e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x44, 0x52, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x48,
	0x44, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x48, 0x44, 0x44, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x04, 0x2a, 0x31, 0x0a, 0x15,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x50, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x41, 0x50, 0x5f, 0x39, 0x50, 0x10, 0x01, 0x2a,
	0x4e, 0x0a, 0x17, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x43,
	0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x56, 0x43, 0x4f, 0x54, 0x5f, 0x42, 0x4c, 0x41, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x56, 0x43, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x2a,
	0xec, 0x01, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4f, 0x53, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x5a, 0x46, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12,
	0x20, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x5a, 0x46, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xa2,
	0x01, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x53, 0x4b, 0x53, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x4b, 0x53, 0x5f, 0x41, 0x52, 0x52,
	0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x30, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x4b, 0x53, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44, 0x31, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x44,
	0x49, 0x53, 0x4b, 0x53, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x41, 0x49, 0x44, 0x35, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x4b, 0x53,
	0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x49, 0x44,
	0x36, 0x10, 0x04, 0x42, 0x3d, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x66, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x65, 0x76, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5a, 0x24, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x66, 0x2d, 0x65, 0x64, 0x67, 0x65,
	0x2f, 0x65, 0x76, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_storage_proto_rawDescOnce sync.Once
	file_config_storage_proto_rawDescData = file_config_storage_proto_rawDesc
)

func file_config_storage_proto_rawDescGZIP() []byte {
	file_config_storage_proto_rawDescOnce.Do(func() {
		file_config_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_storage_proto_rawDescData)
	})
	return file_config_storage_proto_rawDescData
}

var file_config_storage_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_config_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_config_storage_proto_goTypes = []interface{}{
	(DsType)(0),                       // 0: org.lfedge.eve.config.DsType
	(Format)(0),                       // 1: org.lfedge.eve.config.Format
	(Target)(0),                       // 2: org.lfedge.eve.config.Target
	(DriveType)(0),                    // 3: org.lfedge.eve.config.DriveType
	(VolumeAccessProtocols)(0),        // 4: org.lfedge.eve.config.VolumeAccessProtocols
	(VolumeContentOriginType)(0),      // 5: org.lfedge.eve.config.VolumeContentOriginType
	(DiskConfigType)(0),               // 6: org.lfedge.eve.config.DiskConfigType
	(DisksArrayType)(0),               // 7: org.lfedge.eve.config.DisksArrayType
	(*SignatureInfo)(nil),             // 8: org.lfedge.eve.config.SignatureInfo
	(*DatastoreConfig)(nil),           // 9: org.lfedge.eve.config.DatastoreConfig
	(*Image)(nil),                     // 10: org.lfedge.eve.config.Image
	(*Drive)(nil),                     // 11: org.lfedge.eve.config.Drive
	(*ContentTree)(nil),               // 12: org.lfedge.eve.config.ContentTree
	(*VolumeContentOrigin)(nil),       // 13: org.lfedge.eve.config.VolumeContentOrigin
	(*Volume)(nil),                    // 14: org.lfedge.eve.config.Volume
	(*DiskConfig)(nil),                // 15: org.lfedge.eve.config.DiskConfig
	(*DisksConfig)(nil),               // 16: org.lfedge.eve.config.DisksConfig
	(*evecommon.CipherBlock)(nil),     // 17: org.lfedge.eve.common.CipherBlock
	(*UUIDandVersion)(nil),            // 18: org.lfedge.eve.config.UUIDandVersion
	(*evecommon.DiskDescription)(nil), // 19: org.lfedge.eve.common.DiskDescription
}
var file_config_storage_proto_depIdxs = []int32{
	0,  // 0: org.lfedge.eve.config.DatastoreConfig.dType:type_name -> org.lfedge.eve.config.DsType
	17, // 1: org.lfedge.eve.config.DatastoreConfig.cipherData:type_name -> org.lfedge.eve.common.CipherBlock
	18, // 2: org.lfedge.eve.config.Image.uuidandversion:type_name -> org.lfedge.eve.config.UUIDandVersion
	1,  // 3: org.lfedge.eve.config.Image.iformat:type_name -> org.lfedge.eve.config.Format
	8,  // 4: org.lfedge.eve.config.Image.siginfo:type_name -> org.lfedge.eve.config.SignatureInfo
	10, // 5: org.lfedge.eve.config.Drive.image:type_name -> org.lfedge.eve.config.Image
	3,  // 6: org.lfedge.eve.config.Drive.drvtype:type_name -> org.lfedge.eve.config.DriveType
	2,  // 7: org.lfedge.eve.config.Drive.target:type_name -> org.lfedge.eve.config.Target
	1,  // 8: org.lfedge.eve.config.ContentTree.iformat:type_name -> org.lfedge.eve.config.Format
	8,  // 9: org.lfedge.eve.config.ContentTree.siginfo:type_name -> org.lfedge.eve.config.SignatureInfo
	5,  // 10: org.lfedge.eve.config.VolumeContentOrigin.type:type_name -> org.lfedge.eve.config.VolumeContentOriginType
	13, // 11: org.lfedge.eve.config.Volume.origin:type_name -> org.lfedge.eve.config.VolumeContentOrigin
	4,  // 12: org.lfedge.eve.config.Volume.protocols:type_name -> org.lfedge.eve.config.VolumeAccessProtocols
	2,  // 13: org.lfedge.eve.config.Volume.target:type_name -> org.lfedge.eve.config.Target
	19, // 14: org.lfedge.eve.config.DiskConfig.disk:type_name -> org.lfedge.eve.common.DiskDescription
	19, // 15: org.lfedge.eve.config.DiskConfig.old_disk:type_name -> org.lfedge.eve.common.DiskDescription
	6,  // 16: org.lfedge.eve.config.DiskConfig.disk_config:type_name -> org.lfedge.eve.config.DiskConfigType
	15, // 17: org.lfedge.eve.config.DisksConfig.disks:type_name -> org.lfedge.eve.config.DiskConfig
	7,  // 18: org.lfedge.eve.config.DisksConfig.array_type:type_name -> org.lfedge.eve.config.DisksArrayType
	16, // 19: org.lfedge.eve.config.DisksConfig.children:type_name -> org.lfedge.eve.config.DisksConfig
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_config_storage_proto_init() }
func file_config_storage_proto_init() {
	if File_config_storage_proto != nil {
		return
	}
	file_config_devcommon_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_config_storage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_storage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatastoreConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_storage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_storage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Drive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_storage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_storage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeContentOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_storage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_storage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_storage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisksConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_storage_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_storage_proto_goTypes,
		DependencyIndexes: file_config_storage_proto_depIdxs,
		EnumInfos:         file_config_storage_proto_enumTypes,
		MessageInfos:      file_config_storage_proto_msgTypes,
	}.Build()
	File_config_storage_proto = out.File
	file_config_storage_proto_rawDesc = nil
	file_config_storage_proto_goTypes = nil
	file_config_storage_proto_depIdxs = nil
}
