---
name: Release Assets
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      tag_ref:
        required: true
        type: string

jobs:
  create_release:
    runs-on: zededa-ubuntu-2204
    outputs:
      release_id: ${{ steps.create_release.outputs.release_id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create GitHub Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "tag_name": "${{ inputs.tag_ref }}",
              "name": "${{ inputs.tag_ref }}",
              "draft": false,
              "prerelease": true
            }' https://api.github.com/repos/${{ github.repository }}/releases)
          release_id=$(echo "$response" | jq -r .id)
          upload_url=$(echo "$response" | jq -r .upload_url | sed -e "s/{?name,label}//")
          echo $upload_url
          echo "release_id=$release_id" >> "$GITHUB_OUTPUT"
          echo "upload_url=$upload_url" >> "$GITHUB_OUTPUT"
  build:
    runs-on: zededa-ubuntu-2204
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
        platform: ["generic"]
        hv: ["kvm"]
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag_ref }}
          fetch-depth: 0
      - name: Force fetch annotated tags (workaround)
        # Workaround for https://github.com/actions/checkout/issues/290
        run: |
          git fetch --force --tags
      - name: Determine architecture prefix and ref
        env:
          REF: ${{ inputs.tag_ref }}
        run: |
          echo "ARCH=${{ matrix.arch }}" >> "$GITHUB_ENV"
          if [ "${{ matrix.platform }}" != "generic" ]; then
             echo "PLATFORMVER=${{ matrix.platform }}-" >> "$GITHUB_ENV"
          else
             echo "PLATFORMVER=" >> "$GITHUB_ENV"
          fi
          echo "TAG=$(git describe --always --tags | grep -E '[0-9]+\.[0-9]+\.[0-9]' || echo snapshot)" >> "$GITHUB_ENV"
      - name: Ensure clean assets directory
        run: |
          rm -rf assets && mkdir -p assets
      - name: Pull the EVE release from DockerHUB or build it
        run: |
          HV=${{ matrix.hv }}
          if [ "${{ github.event.repository.full_name }}" = "lf-edge/eve" ]; then
             EVE=lfedge/eve:${TAG}-${{ env.PLATFORMVER }}${HV}-${{ env.ARCH }}
             docker pull "$EVE"
          else
             make pkgs
             make HV=${HV} ZARCH=${{ env.ARCH }} PLATFORM=${{ matrix.platform }} eve
             EVE=lfedge/eve:$(make version)-${{ env.PLATFORMVER }}${HV}-${{ env.ARCH }}
          fi
          echo "EVE=$EVE" >> "$GITHUB_ENV"
      - name: Generate EVE binary assets
        run: |
          docker run "$EVE" rootfs > assets/rootfs.img
          docker run "$EVE" installer_raw > assets/installer.raw
          docker run "$EVE" live > assets/live.raw
          if [ "${{ matrix.platform }}" == "generic" ]; then
             docker run "$EVE" installer_iso > assets/installer.iso
             docker run "$EVE" installer_net > assets/installer-net.tar
          fi
      - name: Pull eve-sources and publish collected_sources.tar.gz to assets
        run: |
          HV=${{ matrix.hv }}
          EVE_SOURCES=lfedge/eve-sources:${TAG}-${{ env.PLATFORMVER }}${HV}-${{ env.ARCH }}
          docker pull "$EVE_SOURCES"
          docker create --name eve_sources "$EVE_SOURCES" bash
          docker export --output assets/collected_sources.tar.gz eve_sources
          docker rm eve_sources
      - name: Rename, create SHA256 checksums and upload files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ needs.create_release.outputs.release_id }}
          UPLOAD_URL: ${{ needs.create_release.outputs.upload_url }}
        run: |
          # Rename all files
          HV=${{ matrix.hv }}
          for file in assets/*; do
            base_name=$(basename "$file")
            # Add ARCH + platform prefix
            new_name="${ARCH}.${HV}.${{ matrix.platform }}.${base_name}"
            # Rename the file
            mv "$file" "assets/$new_name"
          done
          # Create sha256sums file and summary of file sizes
          sha256_file="${ARCH}.${HV}.${{ matrix.platform }}.sha256sums"
          sizes_file="${ARCH}.${HV}.${{ matrix.platform }}.sizes"
          cd assets/
          sha256sum * > "../$sha256_file"
          du -b * > "../$sizes_file"
          cd ../
          mv "$sha256_file" assets/
          mv "$sizes_file" assets/
          # Upload files
          for file in assets/*; do
            file_name=$(basename $file)
            echo "Uploading ${file_name}..."
            upload_response=$(curl -s -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              -T "$file" \
              "$UPLOAD_URL?name=$file_name")
            if echo "$upload_response" | jq -e .id > /dev/null; then
              echo "$file_name uploaded successfully."
            else
              echo "Error uploading $file_name: $upload_response"
            fi
          done
