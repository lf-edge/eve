# This workflow is much more convoluted than it should be (see a simpler
# version of it in git's history). The reason it is convoluted is that it
# kept timing out on any of the hosted runners so we're now trying to see
# if GitHub own runners are any better. Of course, GH only provides x86
# runners and thus (instead of a nice matrix job of amd64, arm64) we have
# to "emulated" arm64 side on the amd64 runner.
#
# The trick we play is that we keep it as a matrix job still, but we make
# it use the same GitHub provided x86 ubuntu-20.04 runners. The runner that
# gets to unpack arm64 artifacts does so with the help of binfmt-support and
# qemu-user-static

---
name: Release Assets
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      tag_ref:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag_ref }}
          fetch-depth: 0
      - name: Force fetch annotated tags (workaround)
        # Workaround for https://github.com/actions/checkout/issues/290
        run: |
          git fetch --force --tags
      - name: Determine architecture prefix and ref
        env:
          REF: ${{ inputs.tag_ref }}
        run: |
          # FIXME: I'd rather be a real matrix job with a functional arm64 runner
          # echo "ARCH=$(uname -m | sed -e 's/x86_64/amd64/' -e 's/aarch64/arm64/')" >> "$GITHUB_ENV"
          APT_INSTALL="sudo apt install -y binfmt-support qemu-user-static"
          # the following weird statement is here to speed up the happy path
          # if the default server is responding -- we can skip apt update
          $APT_INSTALL || { sudo apt update && $APT_INSTALL ; }
          echo "ARCH=${{ matrix.arch }}" >> "$GITHUB_ENV"
          echo "TAG=$(git describe --always --tags | grep -E '[0-9]+\.[0-9]+\.[0-9]' || echo snapshot)" >> "$GITHUB_ENV"
      - name: ensure clean assets directory
        run: |
          rm -rf assets && mkdir -p assets
      - name: Pull the EVE release from DockerHUB or build it
        run: |
          HV=kvm
          if [ "${{ github.event.repository.full_name }}" = "lf-edge/eve" ]; then
             EVE=lfedge/eve:${TAG}-${HV}-${{ env.ARCH }}
             docker pull "$EVE"
          else
             make pkgs
             make HV=${HV} ZARCH=${{ env.ARCH }} eve
             EVE=lfedge/eve:$(make version)-${HV}-${{ env.ARCH }}
          fi
          docker run "$EVE" rootfs > assets/rootfs.img
          docker run "$EVE" installer_net | tar -C assets -xvf -
      - name: Create direct iPXE config
        run: |
          URL="${{ github.event.repository.html_url }}/releases/download/${TAG}/${{ env.ARCH }}."
          sed -i. -e '/# set url https:/s#^.*$#set url '"$URL"'#' assets/ipxe.efi.cfg
          for comp in initrd rootfs installer; do
              sed -i. -e "s#initrd=${comp}#initrd=${{ env.ARCH }}.${comp}#g" assets/ipxe.efi.cfg
          done
          sed -e 's#{mac:hexhyp}#{ip}#' < assets/ipxe.efi.cfg > assets/ipxe.efi.ip.cfg
      - name: Pull eve-sources and publish collected_sources.tar.gz to assets
        run: |
          HV=kvm
          EVE_SOURCES=lfedge/eve-sources:${TAG}-${HV}-${{ env.ARCH }}
          docker pull "$EVE_SOURCES"
          docker create --name eve_sources "$EVE_SOURCES" bash
          docker export --output assets/collected_sources.tar.gz eve_sources
          docker rm eve_sources
      - name: Rename files for release
        id: rename-files-for-release
        run: |
          mv assets/rootfs.img assets/${{ env.ARCH }}.rootfs.img
          mv assets/kernel assets/${{ env.ARCH }}.kernel
          mv assets/installer.img assets/${{ env.ARCH }}.installer.img
          mv assets/initrd.img assets/${{ env.ARCH }}.initrd.img
          mv assets/initrd.bits assets/${{ env.ARCH }}.initrd.bits
          mv assets/ipxe.efi assets/${{ env.ARCH }}.ipxe.efi
          mv assets/ipxe.efi.cfg assets/${{ env.ARCH }}.ipxe.efi.cfg
          mv assets/ipxe.efi.ip.cfg assets/${{ env.ARCH }}.ipxe.efi.ip.cfg
          mv assets/collected_sources.tar.gz assets/${{ env.ARCH }}.collected_sources.tar.gz
      - name: Upload release files
        id: upload-release-files
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.tag_ref }}
          make_latest: false
          files: |
            assets/${{ env.ARCH }}.rootfs.img
            assets/${{ env.ARCH }}.kernel
            assets/${{ env.ARCH }}.installer.img
            assets/${{ env.ARCH }}.initrd.img
            assets/${{ env.ARCH }}.initrd.bits
            assets/${{ env.ARCH }}.ipxe.efi
            assets/${{ env.ARCH }}.ipxe.efi.cfg
            assets/${{ env.ARCH }}.ipxe.efi.ip.cfg
            assets/${{ env.ARCH }}.collected_sources.tar.gz
