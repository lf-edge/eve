# This workflow is much more convoluted than it should be (see a simpler
# version of it in git's history). The reason it is convoluted is that it
# kept timing out on any of the hosted runners so we're now trying to see
# if GitHub own runners are any better. Of course, GH only provides x86
# runners and thus (instead of a nice matrix job of amd64, arm64) we have
# to "emulated" arm64 side on the amd64 runner.
#
# The trick we play is that we keep it as a matrix job still, but we make
# it use the same GitHub provided x86 ubuntu-20.04 runners. The runner that
# gets to unpack arm64 artifacts does so with the help of binfmt-support and
# qemu-user-static

---
name: Release Assets
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      tag_ref:
        required: true
        type: string

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.release_id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create GitHub Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "tag_name": "${{ inputs.tag_ref }}",
              "name": "${{ inputs.tag_ref }}",
              "draft": false,
              "prerelease": true
            }' https://api.github.com/repos/${{ github.repository }}/releases)
          release_id=$(echo "$response" | jq -r .id)
          upload_url=$(echo "$response" | jq -r .upload_url | sed -e "s/{?name,label}//")
          echo $upload_url
          echo "release_id=$release_id" >> "$GITHUB_OUTPUT"
          echo "upload_url=$upload_url" >> "$GITHUB_OUTPUT"
  build:
    runs-on: ubuntu-20.04
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag_ref }}
          fetch-depth: 0
      - name: Force fetch annotated tags (workaround)
        # Workaround for https://github.com/actions/checkout/issues/290
        run: |
          git fetch --force --tags
      - name: Determine architecture prefix and ref
        env:
          REF: ${{ inputs.tag_ref }}
        run: |
          # FIXME: I'd rather be a real matrix job with a functional arm64 runner
          # echo "ARCH=$(uname -m | sed -e 's/x86_64/amd64/' -e 's/aarch64/arm64/')" >> "$GITHUB_ENV"
          APT_INSTALL="sudo apt install -y binfmt-support qemu-user-static"
          # the following weird statement is here to speed up the happy path
          # if the default server is responding -- we can skip apt update
          $APT_INSTALL || { sudo apt update && $APT_INSTALL ; }
          echo "ARCH=${{ matrix.arch }}" >> "$GITHUB_ENV"
          echo "TAG=$(git describe --always --tags | grep -E '[0-9]+\.[0-9]+\.[0-9]' || echo snapshot)" >> "$GITHUB_ENV"
      - name: ensure clean assets directory
        run: |
          rm -rf assets && mkdir -p assets
      - name: Pull the EVE release from DockerHUB or build it
        run: |
          HV=kvm
          if [ "${{ github.event.repository.full_name }}" = "lf-edge/eve" ]; then
             EVE=lfedge/eve:${TAG}-${HV}-${{ env.ARCH }}
             docker pull "$EVE"
          else
             make pkgs
             make HV=${HV} ZARCH=${{ env.ARCH }} eve
             EVE=lfedge/eve:$(make version)-${HV}-${{ env.ARCH }}
          fi
          docker run "$EVE" rootfs > assets/rootfs.img
          docker run "$EVE" installer_net | tar -C assets -xvf -
      - name: Create direct iPXE config
        run: |
          URL="${{ github.event.repository.html_url }}/releases/download/${TAG}/${{ env.ARCH }}."
          sed -i. -e '/# set url https:/s#^.*$#set url '"$URL"'#' assets/ipxe.efi.cfg
          for comp in initrd rootfs installer; do
              sed -i. -e "s#initrd=${comp}#initrd=${{ env.ARCH }}.${comp}#g" assets/ipxe.efi.cfg
          done
          sed -e 's#{mac:hexhyp}#{ip}#' < assets/ipxe.efi.cfg > assets/ipxe.efi.ip.cfg
      - name: Pull eve-sources and publish collected_sources.tar.gz to assets
        run: |
          HV=kvm
          EVE_SOURCES=lfedge/eve-sources:${TAG}-${HV}-${{ env.ARCH }}
          docker pull "$EVE_SOURCES"
          docker create --name eve_sources "$EVE_SOURCES" bash
          docker export --output assets/collected_sources.tar.gz eve_sources
          docker rm eve_sources
      - name: Create SHA256 checksum, rename, and upload files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ needs.create_release.outputs.release_id }}
          UPLOAD_URL: ${{ needs.create_release.outputs.upload_url }}
        run: |
          # Create SHA256 checksum for rootfs.img
          sha256sum "assets/rootfs.img" | awk '{ print $1 }' > "assets/rootfs.img.sha256"
          for file in assets/*; do
            base_name=$(basename "$file")
            # Add ARCH prefix
            new_name="${ARCH}.${base_name}"
            # Rename the file
            mv "$file" "assets/$new_name"
            echo "Uploading assets/$new_name as $new_name..."
            upload_response=$(curl -s -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"assets/$new_name" \
              "$UPLOAD_URL?name=$new_name")
            if echo "$upload_response" | jq -e .id > /dev/null; then
              echo "$file_name uploaded successfully."
            else
              echo "Error uploading $file_name: $upload_response"
            fi
          done
